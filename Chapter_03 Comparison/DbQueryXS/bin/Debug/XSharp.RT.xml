<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>XSharp.RT</name>
  </assembly>
  <members>
    <member name="T:System.Linq.ExtensionMethods"></member>
    <member name="M:System.Linq.ExtensionMethods.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,XSharp.__Currency})"></member>
    <member name="M:System.Linq.ExtensionMethods.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,XSharp.__Float})"></member>
    <member name="M:System.Linq.ExtensionMethods.Max(System.Collections.Generic.IEnumerable{XSharp.__Currency})"></member>
    <member name="M:System.Linq.ExtensionMethods.Max(System.Collections.Generic.IEnumerable{XSharp.__Float})"></member>
    <member name="M:System.Linq.ExtensionMethods.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,XSharp.__Currency})"></member>
    <member name="M:System.Linq.ExtensionMethods.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,XSharp.__Float})"></member>
    <member name="M:System.Linq.ExtensionMethods.Min(System.Collections.Generic.IEnumerable{XSharp.__Currency})"></member>
    <member name="M:System.Linq.ExtensionMethods.Min(System.Collections.Generic.IEnumerable{XSharp.__Float})"></member>
    <member name="M:System.Linq.ExtensionMethods.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,XSharp.__Currency})"></member>
    <member name="M:System.Linq.ExtensionMethods.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,XSharp.__Float})"></member>
    <member name="M:System.Linq.ExtensionMethods.Sum(System.Collections.Generic.IEnumerable{XSharp.__Currency})"></member>
    <member name="M:System.Linq.ExtensionMethods.Sum(System.Collections.Generic.IEnumerable{XSharp.__Float})"></member>
    <member name="T:XSharp.__Array">
      <summary>Internal type that implements the VO Compatible ARRAY type.<br />
            This type has methods and properties that normally are never directly called from user code.
            </summary>
    </member>
    <member name="M:XSharp.__Array.#ctor">
      <summary>Create an empty array</summary>
    </member>
    <member name="M:XSharp.__Array.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.__Array</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.__Array.#ctor(System.Collections.Generic.IEnumerable{XSharp.__Usual})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.__Array</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.__Array.#ctor(System.Object[])">
      <summary>Create an array and fill it with elements from an existing .Net array of objects. Note that the objects must be of the right type.</summary>
    </member>
    <member name="M:XSharp.__Array.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__Array.#ctor(System.UInt32)">
      <summary>Create an array with a certain capacity.</summary>
    </member>
    <member name="M:XSharp.__Array.#ctor(System.UInt32,System.Boolean)">
      <summary>Create an array with a certain capacity and specify if it should be filled with default values.</summary>
    </member>
    <member name="M:XSharp.__Array.#ctor(XSharp.__Usual[])">
      <summary>Create an array and fill it with elements from an existing .Net array of USUALS</summary>
    </member>
    <member name="P:XSharp.__Array.DefaultValue">
      <summary>Returns the default value for array elements when arrays are resized or initialized. This is NIL.</summary>
    </member>
    <member name="F:XSharp.__Array.FoxArrayHelpers"></member>
    <member name="M:XSharp.__Array.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:XSharp.__Array.Item(System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <returns>The value of the property of the element stored at the indicated location in the array.</returns>
    </member>
    <member name="P:XSharp.__Array.Item(System.Int32,System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <param name="index2">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <returns>The value of the property of the element stored at the indicated location in the array.</returns>
    </member>
    <member name="P:XSharp.__Array.Item(System.Int32[])">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="indices">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <returns>The value of the property of the element stored at the indicated location in the array.</returns>
    </member>
    <member name="T:XSharp.__ArrayBase`1">
      <summary>Internal type that implements the new TYPED ARRAY type.<br />
            This type has methods and properties that normally are never directly called from user code.
            </summary>
      <typeparam name="T">Type of the elements inside the array </typeparam>
    </member>
    <member name="M:XSharp.__ArrayBase`1.#ctor">
      <summary>Create an empty array</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Create an array and fill it with elements from an existing collection.</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.#ctor(System.Object[])">
      <summary>Create an array and fill it with elements from an existing .Net array of objects. Note that the objects must be of the right type.</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__ArrayBase`1.#ctor(System.UInt32)">
      <summary>Create an array with a certain capacity.</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.#ctor(System.UInt32,System.Boolean)">
      <summary>Create an array with a certain capacity and specify if it should be filled with default values.</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.#ctor(`0[])">
      <summary>Create an array and fill it with elements from an existing .Net array.</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.Add(`0)"></member>
    <member name="P:XSharp.__ArrayBase`1.Count">
      <summary>Length of the array as integer.</summary>
    </member>
    <member name="P:XSharp.__ArrayBase`1.DefaultValue">
      <summary>Returns the default value for array elements when arrays are resized or initialized.</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:XSharp.__ArrayBase`1.IsEmpty">
      <summary>Is the array empty.</summary>
    </member>
    <member name="P:XSharp.__ArrayBase`1.Item(System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <returns>The element stored at the indicated location in the collection.</returns>
    </member>
    <member name="P:XSharp.__ArrayBase`1.Item(System.Int32,System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <param name="index2">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <returns>The value of the property of the element stored at the indicated location in the array.</returns>
    </member>
    <member name="P:XSharp.__ArrayBase`1.Item(System.Int32,System.String)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <param name="name">
        <span>
      Name of the property from the element stored in the location index. If the element implements IIndexedProperties,
      then the indexer with a string parameter on this element will be called. Otherwise the runtime will use reflection to find
      the field or property on the element and return its value
    </span>
      </param>
      <returns>The value of the property of the element stored at the indicated location in the array.</returns>
    </member>
    <member name="P:XSharp.__ArrayBase`1.Length">
      <summary>Length of the array.</summary>
    </member>
    <member name="P:XSharp.__ArrayBase`1.Locked">
      <summary>Is the array locked?</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.op_Explicit(XSharp.__ArrayBase{`0})~XSharp.__Array">
      <summary>Implicitely convert a typed array to an array of USUALs.</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.op_Implicit(XSharp.__Array)~XSharp.__ArrayBase{`0}">
      <summary>Implicitely convert an array of USUALs to a typed array. Note that the usuals must contain a value of the correct type.</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.op_Implicit(XSharp.__ArrayBase{`0})~System.Object[]">
      <summary>Implicitely convert a typed Array to an OBJECT[].</summary>
    </member>
    <member name="M:XSharp.__ArrayBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:XSharp.__ArrayBase`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:XSharp.__ArrayBase`1.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:XSharp.__Binary">
      <summary>Internal type that implements the FoxPro Compatible BINARY type.<br />
            This type has many operators and implicit converters that normally are never directly called from user code.
            The data in this type is stored as an array of Bytes<br />
            Conversions from and to String are supported and they use the current active windows codepage.
            </summary>
    </member>
    <member name="M:XSharp.__Binary.#ctor(System.Byte[])">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
      <param name="b">Byte[] value that has the bytes that define the binary</param>
    </member>
    <member name="M:XSharp.__Binary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__Binary.#ctor(System.String)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
      <param name="s">STRING that will be converted to bytes using the current windows codepage.</param>
    </member>
    <member name="M:XSharp.__Binary.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:XSharp.__Binary.CompareTo(XSharp.__Binary)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </summary>
      <param name="other">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order. </returns>
    </member>
    <member name="M:XSharp.__Binary.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
    </member>
    <member name="M:XSharp.__Binary.Equals(XSharp.__Binary)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:XSharp.__Binary.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__Binary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:XSharp.__Binary.Length"></member>
    <member name="M:XSharp.__Binary.op_Addition(System.String,XSharp.__Binary)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_Addition(XSharp.__Binary,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_Addition(XSharp.__Binary,XSharp.__Binary)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_Equality(XSharp.__Binary,XSharp.__Binary)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_GreaterThan(XSharp.__Binary,XSharp.__Binary)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_GreaterThanOrEqual(XSharp.__Binary,XSharp.__Binary)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_Implicit(System.Byte[])~XSharp.__Binary">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_Implicit(System.String)~XSharp.__Binary">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_Implicit(XSharp.__Binary)~System.Byte[]">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_Implicit(XSharp.__Binary)~System.String">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_Inequality(XSharp.__Binary,XSharp.__Binary)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_LessThan(XSharp.__Binary,XSharp.__Binary)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.op_LessThanOrEqual(XSharp.__Binary,XSharp.__Binary)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Binary.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="M:XSharp.__Binary.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Binary.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.-or- A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="formatProvider">The provider to use to format the value.-or- A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="P:XSharp.__Binary.Value">
      <summary>Binary value as array of Bytes</summary>
    </member>
    <member name="T:XSharp.__Currency">
      <summary>Internal type that implements the FoxPro Compatible CURRENCY type.
            This type has many operators and implicit converters that normally are never directly called from user code.
            The data in this type is stored as a System.Decimal with 4 decimal places
            </summary>
    </member>
    <member name="M:XSharp.__Currency.#ctor(System.Decimal)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.#ctor(System.Double)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
      <param name="r8">Real8 value to convert to a FLOAT</param>
    </member>
    <member name="M:XSharp.__Currency.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__Currency.#ctor(XSharp.IFloat)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:XSharp.__Currency.CompareTo(XSharp.__Currency)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </summary>
      <param name="other">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order. </returns>
    </member>
    <member name="M:XSharp.__Currency.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
    </member>
    <member name="M:XSharp.__Currency.Equals(XSharp.__Currency)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:XSharp.__Currency.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:XSharp.__Currency.op_Addition(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Addition(XSharp.__Currency,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Addition(XSharp.__Usual,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Decrement(XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Division(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Equality(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Explicit(XSharp.__Currency)~System.Byte">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Explicit(XSharp.__Currency)~System.SByte">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Explicit(XSharp.__Currency)~System.Int16">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Explicit(XSharp.__Currency)~System.UInt16">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Explicit(XSharp.__Currency)~System.Int32">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Explicit(XSharp.__Currency)~System.UInt32">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Explicit(XSharp.__Currency)~System.Int64">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Explicit(XSharp.__Currency)~System.UInt64">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_GreaterThan(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_GreaterThanOrEqual(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.Byte)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.Decimal)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.Double)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.Int16)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.Int32)~XSharp.__Currency">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.Int64)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.SByte)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.Single)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.UInt16)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.UInt32)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(System.UInt64)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(XSharp.__Currency)~System.Double">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(XSharp.__Currency)~System.Single">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(XSharp.__Currency)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(XSharp.__Currency)~System.Decimal">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Implicit(XSharp.__Float)~XSharp.__Currency"></member>
    <member name="M:XSharp.__Currency.op_Increment(XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Inequality(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_LessThan(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_LessThanOrEqual(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Modulus(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Multiply(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Subtraction(XSharp.__Currency,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Subtraction(XSharp.__Currency,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_Subtraction(XSharp.__Usual,XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_UnaryNegation(XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.op_UnaryPlus(XSharp.__Currency)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Currency.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.-or- A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="formatProvider">The provider to use to format the value.-or- A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="P:XSharp.__Currency.Value">
      <summary>Decimal (System.Decimal) value</summary>
    </member>
    <member name="T:XSharp.__Date">
      <summary>Internal type that implements the VO Compatible DATE type<br />
            This type has many operators and implicit converters that normally are never directly called from user code.
            It holds year, month, day in 32 bits. For date calculations it uses the System.DateTime calculation logic.
            There are implicit converters between Date and DateTime.
            </summary>
    </member>
    <member name="M:XSharp.__Date.#ctor(System.DateTime)">
      <summary>Construct a date from a DateTime value.</summary>
    </member>
    <member name="M:XSharp.__Date.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Construct a date from year, month, day </summary>
    </member>
    <member name="M:XSharp.__Date.#ctor(System.Int64)">
      <summary>Construct a date from a number of Ticks.</summary>
    </member>
    <member name="M:XSharp.__Date.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__Date.#ctor(System.String)">
      <summary>Construct a date from a string. This assumes the string is in current Date format</summary>
    </member>
    <member name="M:XSharp.__Date.#ctor(System.String,System.String)">
      <summary>Construct a date from a string using the specified Date Format.</summary>
    </member>
    <member name="M:XSharp.__Date.#ctor(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Construct a date from year, month, day </summary>
    </member>
    <member name="M:XSharp.__Date.#ctor(XSharp.IDate)">
      <summary>Construct a date from another IDate type.</summary>
    </member>
    <member name="M:XSharp.__Date.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:XSharp.__Date.CompareTo(XSharp.__Date)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </summary>
      <param name="other">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order. </returns>
    </member>
    <member name="P:XSharp.__Date.Day">
      <summary>Day part of the date. A number between 0 an 31</summary>
      <returns>Integer value</returns>
    </member>
    <member name="M:XSharp.__Date.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
    </member>
    <member name="M:XSharp.__Date.Equals(XSharp.__Date)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:XSharp.__Date.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:XSharp.__Date.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="P:XSharp.__Date.IsEmpty">
      <summary>Is the date empty (NULL_DATE)</summary>
      <returns>Logical value</returns>
    </member>
    <member name="P:XSharp.__Date.Month">
      <summary>Month part of the date. A number between 0 an 12</summary>
      <returns>Integer value</returns>
    </member>
    <member name="M:XSharp.__Date.op_Addition(XSharp.__Date,System.Double)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Addition(XSharp.__Date,System.Int32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Addition(XSharp.__Date,System.Int64)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Addition(XSharp.__Date,System.TimeSpan)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Addition(XSharp.__Date,System.UInt32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Addition(XSharp.__Date,System.UInt64)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Addition(XSharp.__Date,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Decrement(XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Equality(XSharp.__Date,XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Explicit(System.Int32)~XSharp.__Date">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Explicit(System.UInt32)~XSharp.__Date">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Explicit(XSharp.__Date)~System.UInt32">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Explicit(XSharp.__Date)~System.Int32">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_GreaterThan(XSharp.__Date,XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_GreaterThanOrEqual(XSharp.__Date,XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Implicit(System.DateTime)~XSharp.__Date">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Implicit(XSharp.__Date)~System.DateTime">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Increment(XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Inequality(XSharp.__Date,XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_LessThan(XSharp.__Date,XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_LessThanOrEqual(XSharp.__Date,XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Subtraction(XSharp.__Date,System.Double)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Subtraction(XSharp.__Date,System.Int32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Subtraction(XSharp.__Date,System.Int64)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Subtraction(XSharp.__Date,System.TimeSpan)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Subtraction(XSharp.__Date,System.UInt32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Subtraction(XSharp.__Date,System.UInt64)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Subtraction(XSharp.__Date,XSharp.__Date)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.op_Subtraction(XSharp.__Date,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="M:XSharp.__Date.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Date.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</summary>
      <param name="format">A standard or custom date and time format string (see Remarks). </param>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or- 
              <paramref name="format" /> does not contain a valid custom format pattern. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
    </member>
    <member name="M:XSharp.__Date.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.-or- A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="formatProvider">The provider to use to format the value.-or- A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="P:XSharp.__Date.Value">
      <summary>Return DATE value as DateTime.</summary>
    </member>
    <member name="P:XSharp.__Date.Year">
      <summary>Year part of the date. A number between 0 and 9999</summary>
      <returns>Integer value</returns>
    </member>
    <member name="T:XSharp.__Float">
      <summary>Internal type that implements the XBase Compatible FLOAT type.
            This type has many operators and implicit converters that normally are never directly called from user code.
            </summary>
    </member>
    <member name="M:XSharp.__Float.#ctor(System.Double)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
      <param name="r8">Real8 value to convert to a FLOAT</param>
    </member>
    <member name="M:XSharp.__Float.#ctor(System.Double,System.Int32)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.#ctor(System.Double,System.Int32,System.Int32)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.#ctor(System.Double,System.UInt32)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.#ctor(System.Double,System.UInt32,System.UInt32)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__Float.#ctor(XSharp.IFloat)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:XSharp.__Float.CompareTo(XSharp.__Float)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </summary>
      <param name="other">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order. </returns>
    </member>
    <member name="P:XSharp.__Float.Decimals">
      <summary>Number of decimals</summary>
    </member>
    <member name="P:XSharp.__Float.Digits">
      <summary>Width </summary>
    </member>
    <member name="M:XSharp.__Float.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
    </member>
    <member name="M:XSharp.__Float.Equals(XSharp.__Float)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:XSharp.__Float.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:XSharp.__Float.op_Addition(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Addition(XSharp.__Float,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Addition(XSharp.__Usual,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Decrement(XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Division(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Equality(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Explicit(XSharp.__Float)~System.Byte">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Explicit(XSharp.__Float)~System.SByte">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Explicit(XSharp.__Float)~System.Int16">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Explicit(XSharp.__Float)~System.UInt16">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Explicit(XSharp.__Float)~System.Int32">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Explicit(XSharp.__Float)~System.UInt32">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Explicit(XSharp.__Float)~System.Int64">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Explicit(XSharp.__Float)~System.UInt64">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_GreaterThan(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_GreaterThanOrEqual(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.Byte)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.Decimal)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.Double)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.Int16)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.Int32)~XSharp.__Float">
      <summary>This converter is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.Int64)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.SByte)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.Single)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.UInt16)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.UInt32)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(System.UInt64)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(XSharp.__Float)~System.Double">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(XSharp.__Float)~System.Single">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Implicit(XSharp.__Float)~System.Decimal">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Increment(XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Inequality(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_LessThan(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_LessThanOrEqual(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Modulus(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Multiply(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Subtraction(XSharp.__Float,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Subtraction(XSharp.__Float,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_Subtraction(XSharp.__Usual,XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_UnaryNegation(XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.op_UnaryPlus(XSharp.__Float)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Float.ToDebugString"></member>
    <member name="M:XSharp.__Float.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="M:XSharp.__Float.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:XSharp.__Float.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.-or- A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="formatProvider">The provider to use to format the value.-or- A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="P:XSharp.__Float.Value">
      <summary>REAL8 (System.Double) value</summary>
    </member>
    <member name="T:XSharp.__Psz">
      <summary>Internal type that implements the XBase Compatible PSZ type.<br />
            This type has many operators and implicit converters that normally are never directly called from user code.
            </summary>
    </member>
    <member name="M:XSharp.__Psz.#ctor(System.IntPtr)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__Psz.#ctor(System.String)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__Psz.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:XSharp.__Psz.Item(System.Int32)"></member>
    <member name="M:XSharp.__Psz.op_Addition(System.String,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Addition(XSharp.__Psz,System.Int32)"></member>
    <member name="M:XSharp.__Psz.op_Addition(XSharp.__Psz,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Addition(XSharp.__Psz,System.UInt32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Addition(XSharp.__Psz,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Equality(XSharp.__Psz,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_GreaterThan(XSharp.__Psz,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_GreaterThanOrEqual(XSharp.__Psz,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(System.Byte*)~XSharp.__Psz">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(System.Int32)~XSharp.__Psz">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(System.IntPtr)~XSharp.__Psz">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(System.SByte*)~XSharp.__Psz">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(System.UInt32)~XSharp.__Psz">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(System.Void*)~XSharp.__Psz">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(XSharp.__Psz)~System.Void*">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(XSharp.__Psz)~System.Byte*">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(XSharp.__Psz)~System.SByte*">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(XSharp.__Psz)~System.IntPtr">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(XSharp.__Psz)~System.String"></member>
    <member name="M:XSharp.__Psz.op_Implicit(XSharp.__Psz)~System.Int32">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(XSharp.__Psz)~System.Int64">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Implicit(XSharp.__Psz)~System.UInt32">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Inequality(XSharp.__Psz,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_LessThan(XSharp.__Psz,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_LessThanOrEqual(XSharp.__Psz,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Subtraction(System.String,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Subtraction(XSharp.__Psz,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Psz.op_Subtraction(XSharp.__Psz,XSharp.__Psz)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="T:XSharp.__Symbol">
      <summary>Internal type that implements the XBase Compatible SYMBOL type.<br />
            This type has many operators and implicit converters that normally are never directly called from user code.<br />
            There are also some operators that handle implicit conversions between Symbols and Strings in your code.
            </summary>
    </member>
    <member name="M:XSharp.__Symbol.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__Symbol.#ctor(System.String)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.#ctor(System.String,System.Boolean)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.GetHashCode(XSharp.__Symbol)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XSharp.__Symbol.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:XSharp.__Symbol.op_Equality(System.String,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Equality(System.UInt32,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Equality(XSharp.__Symbol,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Equality(XSharp.__Symbol,System.UInt32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Equality(XSharp.__Symbol,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Explicit(System.UInt32)~XSharp.__Symbol">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Explicit(XSharp.__Symbol)~System.UInt32">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_GreaterThan(System.String,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_GreaterThan(XSharp.__Symbol,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_GreaterThan(XSharp.__Symbol,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_GreaterThanOrEqual(System.String,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_GreaterThanOrEqual(XSharp.__Symbol,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_GreaterThanOrEqual(XSharp.__Symbol,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Implicit(System.String)~XSharp.__Symbol">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Implicit(XSharp.__Symbol)~System.String">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Inequality(System.String,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Inequality(System.UInt32,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Inequality(XSharp.__Symbol,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Inequality(XSharp.__Symbol,System.UInt32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_Inequality(XSharp.__Symbol,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_LessThan(System.String,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_LessThan(XSharp.__Symbol,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_LessThan(XSharp.__Symbol,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_LessThanOrEqual(System.String,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_LessThanOrEqual(XSharp.__Symbol,System.String)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.op_LessThanOrEqual(XSharp.__Symbol,XSharp.__Symbol)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Symbol.ToDebugString"></member>
    <member name="M:XSharp.__Symbol.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="T:XSharp.__Usual">
      <summary>Internal type that implements the XBase Compatible USUAL type.<br />
            This type has many operators and implicit converters that normally are never directly called from user code.
            </summary>
    </member>
    <member name="M:XSharp.__Usual.#ctor(System.Object)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__Usual.#ctor(XSharp.__Usual,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.__Usual</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.__Usual.#ctor(XSharp.__UsualType,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.__Usual</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.__Usual.CompareTo(System.Object)">
      <summary>This method is needed to implement the IComparable interface.</summary>
    </member>
    <member name="M:XSharp.__Usual.CompareTo(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the comparison</param>
      <param name="rhs">Right side of the comparison</param>
      <returns>A Logicical value</returns>
    </member>
    <member name="M:XSharp.__Usual.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
    </member>
    <member name="M:XSharp.__Usual.Equals(XSharp.__Usual)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:XSharp.__Usual.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:XSharp.__Usual.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="P:XSharp.__Usual.IsArray">
      <summary>This property returns TRUE when the USUAL is of type ARRAY </summary>
    </member>
    <member name="P:XSharp.__Usual.IsBinary">
      <summary>This property returns TRUE when the USUAL is of type CODEBLOCK </summary>
    </member>
    <member name="P:XSharp.__Usual.IsByRef">
      <summary>This property returns TRUE when the USUAL is passed by reference (not implemented yet)</summary>
    </member>
    <member name="P:XSharp.__Usual.IsCodeblock">
      <summary>This property returns TRUE when the USUAL is of type BINARY </summary>
    </member>
    <member name="P:XSharp.__Usual.IsCurrency">
      <summary>This property returns TRUE when the USUAL is of type CURRENCY </summary>
    </member>
    <member name="P:XSharp.__Usual.IsDate">
      <summary>This property returns TRUE when the USUAL is of type DATE </summary>
    </member>
    <member name="P:XSharp.__Usual.IsDateTime">
      <summary>This property returns TRUE when the USUAL is of type DateTime </summary>
    </member>
    <member name="P:XSharp.__Usual.IsDecimal">
      <summary>This property returns TRUE when the USUAL is of type Decimal </summary>
    </member>
    <member name="P:XSharp.__Usual.IsFloat">
      <summary>This property returns TRUE when the USUAL is of type FLOAT </summary>
    </member>
    <member name="P:XSharp.__Usual.IsFractional">
      <summary>This property returns TRUE when the USUAL is of type FLOAT, Decimal or Currency</summary>
    </member>
    <member name="P:XSharp.__Usual.IsInt64">
      <summary>This property returns TRUE when the USUAL is of type Int64 </summary>
    </member>
    <member name="P:XSharp.__Usual.IsInteger">
      <summary>This property returns TRUE when the USUAL is of type LONG or INT64 </summary>
    </member>
    <member name="P:XSharp.__Usual.IsLogic">
      <summary>This property returns TRUE when the USUAL is of type LOGIC </summary>
    </member>
    <member name="P:XSharp.__Usual.IsLong">
      <summary>This property returns TRUE when the USUAL is of type Long </summary>
    </member>
    <member name="P:XSharp.__Usual.IsNull">
      <summary>This property returns TRUE when the USUAL is of type BINARY </summary>
    </member>
    <member name="P:XSharp.__Usual.IsNumeric">
      <summary>This property returns TRUE when the USUAL is of type LONG, Int64, FLOAT or Decimal</summary>
    </member>
    <member name="P:XSharp.__Usual.IsObject">
      <summary>This property returns TRUE when the USUAL is of type Object</summary>
    </member>
    <member name="P:XSharp.__Usual.IsPsz">
      <summary>This property returns TRUE when the USUAL is of type String</summary>
    </member>
    <member name="P:XSharp.__Usual.IsPtr">
      <summary>This property returns TRUE when the USUAL is of type Ptr (IntPtr)</summary>
    </member>
    <member name="P:XSharp.__Usual.IsString">
      <summary>This property returns TRUE when the USUAL is of type String</summary>
    </member>
    <member name="P:XSharp.__Usual.IsSymbol">
      <summary>This property returns TRUE when the USUAL is of type Symbol</summary>
    </member>
    <member name="P:XSharp.__Usual.Item(System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <returns>The element stored at the indicated location in the collection.</returns>
    </member>
    <member name="P:XSharp.__Usual.Item(System.Int32,System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <param name="index2">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <returns>The element stored at the indicated location in the array.</returns>
    </member>
    <member name="P:XSharp.__Usual.Item(System.Int32[])">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <returns>The element stored at the indicated location in the array.</returns>
    </member>
    <member name="P:XSharp.__Usual.Item(System.String)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="name">
        <span>
      Name of the property from the element stored in the location index. If the element implements IIndexedProperties,
      then the indexer with a string parameter on this element will be called. Otherwise the runtime will use reflection to find
      the field or property on the element and return its value
    </span>
      </param>
      <returns>The element stored at the indicated location in the collection.</returns>
    </member>
    <member name="M:XSharp.__Usual.op_Addition(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the binary operation</param>
      <param name="rhs">Right side of the binary operation</param>
      <returns>A usual value of a type that matches the binary operator. For example when the operation involves an integer and a float then the result will be a float</returns>
    </member>
    <member name="M:XSharp.__Usual.op_BitwiseAnd(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_BitwiseOr(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Decrement(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Division(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the binary operation</param>
      <param name="rhs">Right side of the binary operation</param>
      <returns>A usual value of a type that matches the binary operator. For example when the operation involves an integer and a float then the result will be a float</returns>
    </member>
    <member name="M:XSharp.__Usual.op_Equality(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the comparison</param>
      <param name="rhs">Right side of the comparison</param>
      <returns>A Logicical value</returns>
    </member>
    <member name="M:XSharp.__Usual.op_False(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_GreaterThan(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the comparison</param>
      <param name="rhs">Right side of the comparison</param>
      <returns>A Logicical value</returns>
    </member>
    <member name="M:XSharp.__Usual.op_GreaterThanOrEqual(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the comparison</param>
      <param name="rhs">Right side of the comparison</param>
      <returns>A Logicical value</returns>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Boolean)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Byte)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.DateTime)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Decimal)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Double)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Int16)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Int32)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Int64)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.IntPtr)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Object)~XSharp.__Usual"></member>
    <member name="M:XSharp.__Usual.op_Implicit(System.SByte)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Single)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.String)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.UInt16)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.UInt32)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.UInt64)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(System.Void*)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Array)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Binary)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Currency)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Date)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Float)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Psz)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Symbol)~XSharp.__Usual">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~XSharp.__Array">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~XSharp.Codeblock">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Boolean">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~XSharp.__Date">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.DateTime">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.IntPtr">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Void*">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.String">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~XSharp.__Symbol">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~XSharp.__Psz">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Byte">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Int16">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Int32">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Int64">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Decimal">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.SByte">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.UInt16">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.UInt32">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.UInt64">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Single">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~System.Double">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~XSharp.__Float">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~XSharp.__Currency">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Implicit(XSharp.__Usual)~XSharp.__Binary">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Increment(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Inequality(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the comparison</param>
      <param name="rhs">Right side of the comparison</param>
      <returns>A Logicical value</returns>
    </member>
    <member name="M:XSharp.__Usual.op_LeftShift(XSharp.__Usual,System.Int32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_LessThan(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the comparison</param>
      <param name="rhs">Right side of the comparison</param>
      <returns>A Logicical value</returns>
    </member>
    <member name="M:XSharp.__Usual.op_LessThanOrEqual(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the comparison</param>
      <param name="rhs">Right side of the comparison</param>
      <returns>A Logicical value</returns>
    </member>
    <member name="M:XSharp.__Usual.op_LogicalNot(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Modulus(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the binary operation</param>
      <param name="rhs">Right side of the binary operation</param>
      <returns>A usual value of a type that matches the binary operator. For example when the operation involves an integer and a float then the result will be a float</returns>
    </member>
    <member name="M:XSharp.__Usual.op_Multiply(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the binary operation</param>
      <param name="rhs">Right side of the binary operation</param>
      <returns>A usual value of a type that matches the binary operator. For example when the operation involves an integer and a float then the result will be a float</returns>
    </member>
    <member name="M:XSharp.__Usual.op_OnesComplement(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_RightShift(XSharp.__Usual,System.Int32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_Subtraction(XSharp.__Usual,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
      <param name="lhs">Left side of the binary operation</param>
      <param name="rhs">Right side of the binary operation</param>
      <returns>A usual value of a type that matches the binary operator. For example when the operation involves an integer and a float then the result will be a float</returns>
    </member>
    <member name="M:XSharp.__Usual.op_True(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_UnaryNegation(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.op_UnaryPlus(XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.__Usual.System#IDisposable#Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="P:XSharp.__Usual.SystemType">
      <summary>This property returns the System.Type that represents the value of the usual.</summary>
    </member>
    <member name="M:XSharp.__Usual.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="M:XSharp.__Usual.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="P:XSharp.__Usual.Type">
      <summary>This property returns the __UsualType of the USUAL </summary>
    </member>
    <member name="P:XSharp.__Usual.Value">
      <summary>Return the value of the USUAL as object. NIL values are shown as a NIL string.</summary>
    </member>
    <member name="T:XSharp.__WinBool">
      <summary>Internal type that implements the WIN32 Compatible LOGIC type in UNIONs and VOSTRUCTs</summary>
    </member>
    <member name="M:XSharp.__WinBool.#ctor(System.Boolean)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinBool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__WinBool.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
    </member>
    <member name="M:XSharp.__WinBool.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__WinBool.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:XSharp.__WinBool.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:XSharp.__WinBool.Value">
      <summary>Value as Logic</summary>
    </member>
    <member name="T:XSharp.__WinDate">
      <summary>Internal type that implements the XBase Compatible DATE type in UNIONs and VOSTRUCTs</summary>
    </member>
    <member name="M:XSharp.__WinDate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Construct a value from serialized data</summary>
      <param name="info">A SerializationInfo object containing information required to construct value.</param>
      <param name="context">A StreamingContext object containing the source and destination of the serialized stream associated with the value.</param>
    </member>
    <member name="M:XSharp.__WinDate.#ctor(XSharp.__Date)">
      <summary>This constructor is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
    </member>
    <member name="M:XSharp.__WinDate.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:XSharp.__WinDate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:XSharp.__WinDate.JulianValue">
      <summary>Value as Julian Number, 0 for NULL_DATE</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Addition(XSharp.__WinDate,System.Double)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Addition(XSharp.__WinDate,System.Int32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Addition(XSharp.__WinDate,System.Int64)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Addition(XSharp.__WinDate,System.TimeSpan)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Addition(XSharp.__WinDate,System.UInt32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Addition(XSharp.__WinDate,System.UInt64)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Addition(XSharp.__WinDate,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Decrement(XSharp.__WinDate)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Increment(XSharp.__WinDate)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Subtraction(XSharp.__WinDate,System.Double)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Subtraction(XSharp.__WinDate,System.Int32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Subtraction(XSharp.__WinDate,System.Int64)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Subtraction(XSharp.__WinDate,System.TimeSpan)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Subtraction(XSharp.__WinDate,System.UInt32)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Subtraction(XSharp.__WinDate,System.UInt64)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Subtraction(XSharp.__WinDate,XSharp.__Usual)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.op_Subtraction(XSharp.__WinDate,XSharp.__WinDate)">
      <summary>This operator is used in code generated by the compiler when needed.</summary>
    </member>
    <member name="M:XSharp.__WinDate.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:XSharp.__WinDate.Value">
      <summary>Value as Date</summary>
    </member>
    <member name="T:XSharp._Codeblock">
      <summary>Internal type that is the base class for macro compiled codeblocks.
            </summary>
    </member>
    <member name="M:XSharp._Codeblock.#ctor(XSharp.ICodeblock,System.String,System.Boolean,System.Boolean)">
      <summary>This constructor is used by the Macro Compiler</summary>
      <param name="innerBlock">Compiled codeblock created by the macro compiler.</param>
      <param name="cMacro">Macro string that was used to create the codeblock.</param>
      <param name="lIsBlock">Did the macro string start with "{|".</param>
      <param name="lAddsMemvars">Does the macro create Memvars .</param>
    </member>
    <member name="M:XSharp._Codeblock.Eval(XSharp.__Usual[])">
      <summary>
            Executes the codeblock.</summary>
      <param name="args">Zero or more arguments to pass to the codeblock.</param>
      <returns>The value of the last expression within the codeblock as a USUAL.
            If the last expression in the codeblock is of type VOID, then the codeblock
            returns NIL.</returns>
    </member>
    <member name="P:XSharp._Codeblock.IsBlock">
      <summary>Was the codeblock created from a string that started with "{|" </summary>
    </member>
    <member name="M:XSharp._Codeblock.ToString">
      <summary>
            Returns the original string that was used to create the macro compiled codeblock.
            </summary>
    </member>
    <member name="T:XSharp.BlobData">
      <summary>
            This class is used to write BLOB data to a FPT file.
            </summary>
    </member>
    <member name="M:XSharp.BlobData.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.BlobData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.BlobData.Data">
      <summary>
            Data to write to the blob file. This can be a BYTE[] but also other values.
            At this moment the FPT RDD supports BYTE[], String, Logic
            Other value types may follow later
            </summary>
    </member>
    <member name="P:XSharp.BlobData.Length">
      <summary>
            Length of the data to write or return. Defaults to all data
            </summary>
    </member>
    <member name="P:XSharp.BlobData.Pointer">
      <summary>
            Pointer for which to write or return the data
            </summary>
    </member>
    <member name="P:XSharp.BlobData.Start">
      <summary>
            Start of the data to write or return. Defaults to 0
            </summary>
    </member>
    <member name="T:XSharp.Codeblock">
      <summary>Internal type that implements the VO Compatible CODEBLOCK type<br />
            This type has methods that normally are never directly called from user code.
            </summary>
    </member>
    <member name="M:XSharp.Codeblock.Eval(XSharp.__Usual[])">
      <summary>
            Executes the codeblock.</summary>
      <param name="args">Zero or more arguments to pass to the codeblock.</param>
      <returns>The value of the last expression within the codeblock as a USUAL.
            If the last expression in the codeblock is of type VOID, then the codeblock
            returns NIL.</returns>
    </member>
    <member name="M:XSharp.Codeblock.EvalBlock(System.Object[])">
      <summary>
            Eval method that can be called from code that does not "know" about the USUAL type.
            such as the code in the RDD classes.
            </summary>
    </member>
    <member name="M:XSharp.Codeblock.PCount">
      <summary>Returns the number of parameters in the codeblock</summary>
    </member>
    <member name="P:XSharp.Codeblock.ResultType">
      <summary>
            Returns the real /original return type of the EvalBlock() method
            </summary>
      <value>A value of the __UsualType enum</value>
    </member>
    <member name="M:XSharp.Codeblock.ToString">
      <summary>
            Return a string that contains the # of parameters for display in the debugger.
            </summary>
    </member>
    <member name="T:XSharp.FixedMemBlockEnd">
      <summary>Guard Block following MemAlloc return value</summary>
    </member>
    <member name="F:XSharp.FixedMemBlockEnd.dwMagic">
      <summary>Checksum</summary>
    </member>
    <member name="F:XSharp.FixedMemBlockEnd.dwZero">
      <summary>Zero terminator</summary>
    </member>
    <member name="T:XSharp.FixedMemBlockStart">
      <summary>Guard Block preceding MemAlloc return value</summary>
    </member>
    <member name="F:XSharp.FixedMemBlockStart.dwCargo">
      <summary>Cargo slot</summary>
    </member>
    <member name="F:XSharp.FixedMemBlockStart.dwGroup">
      <summary>Group number</summary>
    </member>
    <member name="F:XSharp.FixedMemBlockStart.dwMagic">
      <summary>Checksum</summary>
    </member>
    <member name="F:XSharp.FixedMemBlockStart.dwSize">
      <summary>Size</summary>
    </member>
    <member name="T:XSharp.IDynamicProperties">
      <summary> This interface is used for objects that implement a special mechanism
            for reading / writing properties at runtime.</summary>
    </member>
    <member name="M:XSharp.IDynamicProperties.GetPropertyNames">
      <summary>Retrieve an array of the property names that exist.</summary>
    </member>
    <member name="M:XSharp.IDynamicProperties.NoIvarGet(System.String)">
      <summary>Retrieve the value of a property by name.</summary>
      <param name="cName">Property Name</param>
      <returns>The current value of the property </returns>
    </member>
    <member name="M:XSharp.IDynamicProperties.NoIvarPut(System.String,XSharp.__Usual)">
      <summary>Update the value of a property by name.</summary>
      <param name="cName">Property Name</param>
      <param name="uValue">New value of the property</param>
    </member>
    <member name="T:XSharp.IDynamicProperties2"></member>
    <member name="M:XSharp.IDynamicProperties2._AddProperty(System.String,XSharp.__Usual,System.Int32,System.String)"></member>
    <member name="M:XSharp.IDynamicProperties2._RemoveProperty(System.String)"></member>
    <member name="T:XSharp.IIndexedProperties">
      <summary>This interface can be used to access any object with an indexer.
            This is mostly used for elements inside typed arrays of the 'ARRAY OF' class.
            If you implement the interface on the elements you can use an array syntax to
            assess fields/properties in the elements of the array by name or ordinal.</summary>
    </member>
    <member name="P:XSharp.IIndexedProperties.Item(System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
    </member>
    <member name="P:XSharp.IIndexedProperties.Item(System.String)">
      <summary>Get/Set array elements with a name.</summary>
      <param name="name">Name which will be used to lookup a property</param>
    </member>
    <member name="T:XSharp.IIndexer">
      <summary> This interface is used to index a collection using the VO Array syntax.
            The interface is implemented by the ARRAY type in the runtime, but you can also use it for your custom types.</summary>
    </member>
    <member name="P:XSharp.IIndexer.Item(System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
    </member>
    <member name="P:XSharp.IIndexer.Item(System.Int32,System.Int32)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index1">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <param name="index2">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
    </member>
    <member name="P:XSharp.IIndexer.Item(System.Int32[])">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
    </member>
    <member name="T:XSharp.IMacroCompilerUsual">
      <summary>
            This interface defines and extension to the Macro compiler subsystem
            </summary>
    </member>
    <member name="M:XSharp.IMacroCompilerUsual.CompileCodeblock(System.String)">
      <summary>Compile a string into a runtime codeblock.</summary>
      <param name="macro">String to compile</param>
      <returns>A compiled codeblock</returns>
    </member>
    <member name="M:XSharp.IMacroCompilerUsual.CompileCodeblock(System.String,System.Boolean,System.Reflection.Module)">
      <summary>Compile a string into a runtime codeblock.</summary>
      <param name="macro">String to compile</param>
      <param name="lAllowSingleQuotes">Should single quotes be allowed</param>
      <param name="module">Module of the main app</param>
      <param name="isCodeblock">will be set to TRUE when the string was a real codeblock (with {|..| }).</param>
      <param name="addsMemVars">will be set to TRUE when the macro contains code that may result in adding new MemVars).</param>
      <returns>A compiled codeblock</returns>
    </member>
    <member name="T:XSharp.INamedIndexer">
      <summary>This interface is used to index a collection using a numeric and a string index and is implemented by the
            typed array class ('ARRAY OF'). If your elements inside the collection implement the IIndexProperties interface then
            the lookup of the property inside array element will be resolved with a call to the named indexer on that object.</summary>
    </member>
    <member name="P:XSharp.INamedIndexer.Item(System.Int32,System.String)">
      <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
      <param name="index">
        <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
      </param>
      <param name="name">
        <span>
      Name of the property from the element stored in the location index. If the element implements IIndexedProperties,
      then the indexer with a string parameter on this element will be called. Otherwise the runtime will use reflection to find
      the field or property on the element and return its value
    </span>
      </param>
    </member>
    <member name="T:XSharp.IRtCodeblock">
      <summary>
            This interface Extended the ICodeblock interface and adds support for usual
            parameters and return values
            </summary>
    </member>
    <member name="M:XSharp.IRtCodeblock.Eval(XSharp.__Usual[])">
      <summary>
            Executes the codeblock.</summary>
      <param name="args">Zero or more arguments to pass to the codeblock.</param>
      <returns>The value of the last expression in the codeblock.</returns>
    </member>
    <member name="P:XSharp.IRtCodeblock.IsBlock">
      <summary>Was the codeblock created from a string that started with "{|" </summary>
    </member>
    <member name="T:XSharp.MemVar">
      <summary>Internal type that implements the Dynamic Memory Variables.<br /></summary>
    </member>
    <member name="M:XSharp.MemVar.#ctor(System.String,XSharp.__Usual)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.MemVar</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.MemVar._Get(System.String)">
      <summary>Get the value of a local, private or public (in that order). Throws an exception when the variable does not exist.</summary>
      <param name="cName">The name of the memory variable</param>
      <returns>The value of the memory variable.</returns>
    </member>
    <member name="M:XSharp.MemVar._GetSafe(System.String)">
      <summary>Get the value of a local, private or public (in that order). Returns NIL if the value does not exist.</summary>
      <param name="cName">The name of the memory variable</param>
      <returns>The value of the memory variable or NIL when it does not exist.</returns>
    </member>
    <member name="M:XSharp.MemVar._Put(System.String,XSharp.__Usual)">
      <summary>Updates the value of a local, private or public (in that order).
            If the value does not exist than a new variable at the current level is created.</summary>
      <param name="cName">The name of the memory variable.</param>
      <param name="uValue">The value to assign.</param>
      <returns>The value of the memory variable.</returns>
    </member>
    <member name="M:XSharp.MemVar.Add(System.String,System.Boolean)">
      <summary>Add a public memvar or a private memvar to the current level.</summary>
      <param name="cName">The name of the memory variable</param>
      <param name="lPrivate">Should the variable be created as private</param>
    </member>
    <member name="M:XSharp.MemVar.Clear(System.String)">
      <summary>Clear a variable by name. Tries to clear a private first and when that is not found then a public</summary>
      <param name="cName">The name of the memory variable.</param>
    </member>
    <member name="M:XSharp.MemVar.ClearAll">
      <summary>Clear all memvar name/value pairs.
            Does not remove locals. Does not remove privates stack levels.</summary>
    </member>
    <member name="F:XSharp.MemVar.Get">
      <summary>Get the value of a local, private or public (in that order). Throws an exception when the variable does not exist.</summary>
      <param name="cName">The name of the memory variable</param>
      <returns>The value of the memory variable.</returns>
    </member>
    <member name="M:XSharp.MemVar.GetHigherLevelPrivate(System.String)">
      <summary>Get a memvar object from the stack (if it exists)</summary>
    </member>
    <member name="F:XSharp.MemVar.GetSafe">
      <summary>Get the value of a local, private or public (in that order). Returns NIL if the value does not exist.</summary>
      <param name="cName">The name of the memory variable</param>
      <returns>The value of the memory variable or NIL when it does not exist.</returns>
    </member>
    <member name="M:XSharp.MemVar.Initialize"></member>
    <member name="P:XSharp.MemVar.Name">
      <summary>Name of the memory variable.</summary>
    </member>
    <member name="M:XSharp.MemVar.PrivateFind(System.String)">
      <summary>Find a private variable. Try on the current level on the stack first and when not found then walk the stack.</summary>
    </member>
    <member name="M:XSharp.MemVar.PrivatePut(System.String,XSharp.__Usual)">
      <summary>Update a private variable. Does NOT add a new variable</summary>
    </member>
    <member name="M:XSharp.MemVar.PrivatesCount(System.Boolean)">
      <summary>Get the total number of unique private variable names.</summary>
    </member>
    <member name="M:XSharp.MemVar.PrivatesEnum(System.Boolean)">
      <summary>Get an enumerator for all the unique names of private variables</summary>
    </member>
    <member name="M:XSharp.MemVar.PrivatesFirst(System.Boolean)">
      <summary>Get the first unique private variable name.</summary>
    </member>
    <member name="M:XSharp.MemVar.PrivatesNext">
      <summary>Get the next unique private variable name.</summary>
    </member>
    <member name="M:XSharp.MemVar.PublicFind(System.String)">
      <summary>Find a public variable</summary>
      <param name="cName">The name of the memory variable.</param>
    </member>
    <member name="M:XSharp.MemVar.PublicPut(System.String,XSharp.__Usual)">
      <summary>Update a public variable. Does NOT create a new public when there is no variable with that name.</summary>
      <param name="cName">The name of the memory variable.</param>
      <param name="uValue">The value to assign.</param>
    </member>
    <member name="M:XSharp.MemVar.PublicsCount">
      <summary>Gets the total number of public variables.</summary>
    </member>
    <member name="M:XSharp.MemVar.PublicsEnum">
      <summary>Get an enumerator for all the unique names of public variables</summary>
    </member>
    <member name="M:XSharp.MemVar.PublicsFirst">
      <summary>Gets the name of the first public variable.</summary>
    </member>
    <member name="M:XSharp.MemVar.PublicsNext">
      <summary>Gets the name of the next public variable.</summary>
    </member>
    <member name="F:XSharp.MemVar.Put">
      <summary>Updates the value of a local, private or public (in that order).
            If the value does not exist than a new variable at the current level is created.</summary>
      <param name="cName">The name of the memory variable.</param>
      <param name="uValue">The value to assign.</param>
      <returns>The value of the memory variable.</returns>
    </member>
    <member name="M:XSharp.MemVar.Release(System.String)">
      <summary>Release a private variable</summary>
    </member>
    <member name="M:XSharp.MemVar.ReleaseAll">
      <summary>Assign NIL to all visible private variables. Hidden privates are not affected.</summary>
    </member>
    <member name="M:XSharp.MemVar.ReleasePrivates(System.Int32)">
      <summary>Release all privates at a certain level and higher</summary>
    </member>
    <member name="M:XSharp.MemVar.TryGet(System.String,XSharp.__Usual@)">
      <summary>Try to retrieve the value of a local, private or public (in that order).</summary>
      <param name="cName">The name of the memory variable</param>
      <param name="uValue">Value of the variable, or NIL whe the variable does not exist.</param>
      <returns>TRUE when the variable was found. Otherwise FALSE</returns>
    </member>
    <member name="P:XSharp.MemVar.Value">
      <summary>Value of the memory variable. The default is NIL for PRIVATEs and FALSE for PUBLICs.</summary>
    </member>
    <member name="T:XSharp.MemVar.Getter">
      <summary>Delegate for reading memvars.</summary>
      <param name="name">Name of the Memvar for which the value has to be retrieved</param>
      <returns>The value of the memory variable. </returns>
    </member>
    <member name="T:XSharp.MemVar.Putter">
      <summary>Delegate for writing memvars.</summary>
      <param name="name">Name of the Memvar for which the value has to be retrieved</param>
      <param name="value">Value to assign to the memory variable</param>
    </member>
    <member name="T:XSharp.VoDb">
      <summary>The VoDb class extends the CoreDb class with methods that take usual parameters or return usual values.<br />
            All other methods are identical and inherited from the CoreDb class.</summary>
    </member>
    <member name="M:XSharp.VoDb.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.VoDb</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.VoDb.BlobInfo(System.UInt32,System.UInt32,XSharp.__Usual)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal"></param>
      <param name="nPos"></param>
      <param name="oRet"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.BlobInfo(System.UInt32,System.UInt32,XSharp.__Usual@)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal"></param>
      <param name="nPos"></param>
      <param name="oRet"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.FieldGet(System.UInt32,XSharp.__Usual@)">
      <summary>
            Retrieve the value of a specified database field.
            </summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="oRet">The returnvalue is returned through this parameter</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.FieldInfo(System.UInt32,System.UInt32,XSharp.__Usual)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.FieldInfo(System.UInt32,System.UInt32,XSharp.__Usual@)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.Info(System.UInt32,XSharp.__Usual)">
      <summary>
            Retrieve information about a work area.
            </summary>
      <param name="nOrdinal"></param>
      <param name="oValue">If specified, this parameter is used to change the value of a setting. This parameter also receives the return value.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.Info(System.UInt32,XSharp.__Usual@)">
      <summary>
            Retrieve information about a work area.
            </summary>
      <param name="nOrdinal"></param>
      <param name="oValue">If specified, this parameter is used to change the value of a setting. This parameter also receives the return value.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.OrderInfo(System.UInt32,System.String,System.Object,XSharp.__Usual)">
      <summary>
            Return information about index files and the orders in them.
            </summary>
      <param name="nOrdinal">Specifies the type of information. This must match the values in the DBOI_ defines</param>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  </param>
      <param name="oOrder">The name of the order about which you want to obtain information or a number representing its position in the order list.</param>
      <param name="oValue">If specified, this parameter is used to change the value of a setting. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.OrderInfo(System.UInt32,System.String,System.Object,XSharp.__Usual@)">
      <summary>
            Return information about index files and the orders in them.
            </summary>
      <param name="nOrdinal">Specifies the type of information. This must match the values in the DBOI_ defines</param>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  </param>
      <param name="oOrder">The name of the order about which you want to obtain information or a number representing its position in the order list.</param>
      <param name="oValue">If specified, this parameter is used to change the value of a setting. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.RddInfo(System.UInt32,XSharp.__Usual)">
      <summary>Return and optionally change settings controlled directly by the RDD.</summary>
      <param name="nOrdinal">Ordinal number of the setting to set/retrieve.</param>
      <param name="oValue">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.RddInfo(System.UInt32,XSharp.__Usual@)">
      <summary>Return and optionally change settings controlled directly by the RDD.</summary>
      <param name="nOrdinal">Ordinal number of the setting to set/retrieve.</param>
      <param name="oValue">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.RecordInfo(System.UInt32,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Retrieve information about a record.
            </summary>
      <param name="nOrdinal">This must match one of the values from the DbRecordInfo Enum</param>
      <param name="oRecID">Some of the DbRecordInfo enum values require a record number</param>
      <param name="oValue">Some of the DbRecordInfo enum values require a new value. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.RecordInfo(System.UInt32,XSharp.__Usual,XSharp.__Usual@)">
      <summary>
            Retrieve information about a record.
            </summary>
      <param name="nOrdinal">This must match one of the values from the DbRecordInfo Enum</param>
      <param name="oRecID">Some of the DbRecordInfo enum values require a record number</param>
      <param name="oValue">Some of the DbRecordInfo enum values require a new value. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.Select(System.UInt32,XSharp.__Usual@)">
      <summary>
            Select a new work area and retrieve the current work area.
            </summary>
      <param name="nNew">The work area number for the new work area.</param>
      <param name="nOld">The work area number for the old work area.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.VoDb.SetFilter(XSharp.__Usual,System.String)">
      <summary>
            Set a filter condition.
            </summary>
      <param name="oBlock">Codeblock that defines the filter. Please note that some RDDs (such as Advangate) will NOT use this compiled codeblock.</param>
      <param name="cFilter">String version of the filter. Some RDDs (such as Advantage) use this condition instead of the codeblock</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="T:XSharp.Internal.CompilerServices">
      <summary>
            This class contains helper code that is called by the compiler to support various XBase language constructs, such as the
            automatic memory management of PSZ values created with String2Psz().
            </summary>
    </member>
    <member name="M:XSharp.Internal.CompilerServices.CanBreak">
      <summary>
             Determine if we are inside a BEGIN SEQUENCE .. END by looking at the SEQUENCE counter in the runtime.
            </summary>
    </member>
    <member name="M:XSharp.Internal.CompilerServices.EnterBeginSequence">
      <summary>
             Increment the SEQUENCE counter for a BEGIN SEQUENCE statement
            </summary>
    </member>
    <member name="M:XSharp.Internal.CompilerServices.ExitBeginSequence">
      <summary>
             Decrement the SEQUENCE counter for a BEGIN SEQUENCE statement
            </summary>
    </member>
    <member name="M:XSharp.Internal.CompilerServices.String2Psz(System.String,System.Collections.Generic.List{System.IntPtr})">
      <summary>
             Allocate a PSZ and add it to the list
            </summary>
    </member>
    <member name="M:XSharp.Internal.CompilerServices.String2PszRelease(System.Collections.Generic.List{System.IntPtr})">
      <summary>
             Free all PSZ values in the List
            </summary>
    </member>
    <member name="M:XSharp.Internal.CompilerServices.StringArrayInit(System.Array)"></member>
    <member name="M:XSharp.Internal.CompilerServices.StringSubtract(System.String,System.String)">
      <summary>
             Subtract 2 strings.
            </summary>
    </member>
    <member name="T:XSharp.RT.Functions">
      <summary>This compiler generated class contains all the functions, globals and defines that are defined in the XSharp.RT.dll assembly. </summary>
    </member>
    <member name="M:XSharp.RT.Functions._accept">
      <summary>
            Take input from the keyboard and assign it to a memory variable.
        </summary>
      <param name="uValuePrompt">An optional prompt displayed before the input area.</param>
      <param name="TO idVar">
            The variable that will hold input from the keyboard.<br />
            If there is no variable named <paramref name="idVar" /> that is visible to the current routine, a private variable is created.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions._accept(System.String)">
      <summary>
            Take input from the keyboard and assign it to a memory variable.
        </summary>
      <param name="uValuePrompt">An optional prompt displayed before the input area.</param>
      <param name="TO idVar">
            The variable that will hold input from the keyboard.<br />
            If there is no variable named <paramref name="idVar" /> that is visible to the current routine, a private variable is created.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions._ArrayToObjectArray(XSharp.__Array)">
      <summary>Helper function to convert ARRAY to OBJECT[]</summary>
      <param name="args">X# array to convert</param>
      <returns>OBJECT Array</returns>
    </member>
    <member name="M:XSharp.RT.Functions._ArrayToUsualArray(XSharp.__Array)">
      <summary>Helper function to convert ARRAY to USUAL[]</summary>
      <param name="args">X# array to convert</param>
      <returns>USUAL Array</returns>
    </member>
    <member name="M:XSharp.RT.Functions._Break(XSharp.__Usual)">
      <summary>
            Branch out of a BEGIN SEQUENCE...END construct.
        </summary>
      <param name="uValue">
            The value passed to the RECOVER clause.  Note that <paramref name="uValue" /> is not optional; however, NIL can be specified if there is no break value.
        </param>
      <returns>
            The value passed to the RECOVER clause.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions._CallClipFunc(System.String,XSharp.__Array)">
      <summary>Call a clipper function by name</summary>
      <param name="symFunction">The name of the function to call.</param>
      <param name="aArgs">The list of arguments to pass to the function</param>
      <returns>The return value of the function</returns>
    </member>
    <member name="M:XSharp.RT.Functions._CallClipFunc(System.String,XSharp.__Usual[])">
      <summary>Call a function by name</summary>
      <param name="symFunction">The name of the function to call.</param>
      <param name="uArgs">The list of arguments to pass to the function</param>
      <returns>The return value of the function</returns>
    </member>
    <member name="M:XSharp.RT.Functions._CreateInstance(System.String,XSharp.__Usual[])">
      <summary>
            Create an object.
        </summary>
      <param name="symClassName">The name of the class for which you want to create an object.</param>
      <param name="InitArgList">
            A comma-separated list of arguments to pass to the Init() method of <paramref name="symClassName" /> (see example below).
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions._GetMRandID"></member>
    <member name="M:XSharp.RT.Functions._HasClipFunc(System.String)"></member>
    <member name="M:XSharp.RT.Functions._MClear">
      <summary>
            Clear all memory variables (all public variables and the private variables of the current thread)
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._MRelease(System.String,System.Boolean)">
      <summary>
            Release variables that match a certain wildcard pattern
            </summary>
      <param name="cMask">The wildcard pattern to use when releasing the memvars. May contain * and ? characters.</param>
      <param name="lMatch">Indicates if the variables that need to be released should match (TRUE) or NOT match (FALSE) the pattern.</param>
    </member>
    <member name="M:XSharp.RT.Functions._MRestore(System.String,System.Boolean,System.String,System.Boolean)">
      <summary>
            Recreate public and private variables previously saved to a file and initialize them with their former values.
            </summary>
      <param name="cFileName">The name of the memory file to read. The default extension is .MEM </param>
      <param name="lAdditive">When set to TRUE then the existing memory variables will be saved. Otherwise all memory variables will be deleted first.</param>
      <param name="cSkel">(Optional) Wildcard pattern to use when saving. This can include literal characters as well as the standard wildcard characters, * and ?. </param>
      <param name="lLike">(Optional) When set to TRUE then variables matching the pattern are restored. When set to FALSE then the variables that do NOT match the pattern are restored.</param>
    </member>
    <member name="M:XSharp.RT.Functions._MSave(System.String,System.String,System.Boolean)">
      <summary>
            Copy public and private memory variables visible within the current routine to a disk file.
            </summary>
      <param name="cFileName">The name of the file, including an optional drive, directory, and extension. The default extension is .MEM </param>
      <param name="cSkel">Wildcard pattern to use when saving. This can include literal characters as well as the standard wildcard characters, * and ?. </param>
      <param name="lLike">When set to TRUE then variables matching the pattern are saved. When set to FALSE then the variables that do NOT match the pattern are saved.</param>
    </member>
    <member name="M:XSharp.RT.Functions._MxRelease(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Release one or more memory variables variables.
            </summary>
      <param name="var1">Variable 1</param>
      <param name="var2">Variable 2</param>
      <param name="var3">Variable 3</param>
      <param name="var4">Variable 4</param>
      <param name="varn">Variable n</param>
    </member>
    <member name="M:XSharp.RT.Functions._NoAlias(XSharp.__Usual)"></member>
    <member name="M:XSharp.RT.Functions._ObjectArrayToUsualArray(System.Object[])">
      <summary>Helper function to convert OBJECT[] to USUAL[]</summary>
      <param name="args">OBJECT array to convert</param>
      <returns>USUAL Array</returns>
    </member>
    <member name="M:XSharp.RT.Functions._PrivateCount(System.Boolean)">
      <summary>
            Count private variables
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._PrivateEnum(System.Boolean)">
      <summary>
            Enumerate private variables
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._PrivateFirst(System.Boolean)">
      <summary>
            Enumerate private variables
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._PrivateNext">
      <summary>
            Enumerate private variables
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._PublicCount">
      <summary>
            Count public variables
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._PublicEnum">
      <summary>
            Enumerate public variables
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._PublicFirst">
      <summary>
            Enumerate public variables
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._PublicNext">
      <summary>
            Enumerate public variables
            </summary>
    </member>
    <member name="M:XSharp.RT.Functions._RegisterExit(XSharp.__Usual)"></member>
    <member name="M:XSharp.RT.Functions._Select(XSharp.__Usual)">
      <summary>
            Determine the number of a work area.
        </summary>
      <param name="uWorkArea">
            A value that identifies the work area.<br />
            This can be the number of the work area or its alias, specified either as a symbol or a string.<br />
            If <paramref name="uWorkArea" /> is not specified, the current work area number is returned.<br />
            Therefore, Select() is the same as DBGetSelect().
        </param>
      <returns>
            A number from 0 to 4096.  0 is returned if <paramref name="uWorkArea" /> does not identify a valid work area or does not correspond to a valid alias.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions._SelectString(System.String)">
      <summary>
            Determine the number of a work area.
        </summary>
      <param name="uWorkArea">
            A value that identifies the work area.<br />
            This can be the number of the work area or its alias, specified either as a symbol or a string.<br />
            If <paramref name="uWorkArea" /> is not specified, the current work area number is returned.<br />
            Therefore, Select() is the same as DBGetSelect().
        </param>
      <returns>
            A number from 0 to 4096.  0 is returned if <paramref name="uWorkArea" /> does not identify a valid work area or does not correspond to a valid alias.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions._SequenceError(System.Exception)">
      <summary>
            This function is automatically inserted by the compiler in a RECOVER USING block and gets called when the
            RECOVER USING block is reached because of an exception.
            </summary>
      <param name="e">The exception that triggered the jump into the RECOVER USING block</param>
      <returns>The result of the call to the error handler installed in the ErrorBlock</returns>
    </member>
    <member name="M:XSharp.RT.Functions._SequenceRecover(XSharp.__Usual)">
      <summary>
            This function is automatically inserted by the compiler in a compiler generated
            RECOVER USING block when you have a BEGIN SEQUENCE .. END SEQUENCE in your code
            without RECOVER USING clause
            </summary>
      <param name="u">The parameter that was passed in the BREAK statement or the call to the _Break function</param>
    </member>
    <member name="M:XSharp.RT.Functions._Str(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Convert a numeric expression to a string.
        </summary>
      <param name="nNumber">The numeric expression to convert to a string.</param>
      <param name="nLength">
            The length of the string to return, including decimal digits, decimal point, and sign.<br />

            	A value of -1 specifies that any right padding is suppressed.  However, decimal places are still returned as specified in <paramref name="nDecimals" />.<br />

            	If <paramref name="nLength" /> is not specified,  SetDigit() and SetDigitFixed() determine the number of digits that are returned.
        </param>
      <param name="nDecimals">
            The number of decimal places in the return value.<br />
            A  value  of -1 specifies that only the significant digits to the right of the decimal point are returned (see example below).<br />
            The number of whole digits in the return value, however, are still determined by the <paramref name="nLength" /> argument.<br />

            	If <paramref name="nDecimals" /> is not specified, SetDecimal() and SetFixed()  determine the number of decimals that are returned.<br />

            	The representation of the decimal point is determined by the current setting of SetDecimalSep().
        </param>
      <returns>The returned string with always have a DOT as decimal separator.</returns>
    </member>
    <member name="M:XSharp.RT.Functions._Str3(XSharp.__Float,System.UInt32,System.UInt32)">
      <summary>
            Convert a numeric expression to a string of specific length and decimal places.
        </summary>
      <param name="fNumber">The numeric expression to convert.</param>
      <param name="dwLength">
            The length of the string to return, including decimal digits, decimal point, and sign.<br />
            If <paramref name="dwLength" /> is not long enough to hold the entire number, the result will be in scientific notation.
        </param>
      <param name="dwDecimals">The number of decimal places to return.</param>
      <returns>A string with DOT as decimal separator.</returns>
    </member>
    <member name="M:XSharp.RT.Functions._UsualArrayToObjectArray(XSharp.__Usual[])">
      <summary>Helper function to convert USUAL[] to OBJECT[]</summary>
      <param name="args">USUAL array to convert</param>
      <returns>OBJECT Array</returns>
    </member>
    <member name="M:XSharp.RT.Functions._VoDbErrInfoPtr">
      <summary>Return exception object from last RDD operation.</summary>
    </member>
    <member name="M:XSharp.RT.Functions._wait">
      <summary>
            Display a prompt after sending a carriage return/linefeed to the terminal window, then wait for a key to be pressed.
            Note:  WAIT is a compatibility command and is no longer recommended.
        </summary>
      <param name="uValuePrompt">
            An optional prompt displayed before the input area.<br />
            If omitted, "Press any key to continue..." is displayed.  Specify NULL_STRING if you do not want to display a prompt.
        </param>
      <param name="Value">
            The variable that will hold input from the keyboard.<br />
            If there is no variable named <paramref name="idVar" /> that is visible to the current routine, a private variable is created.  <paramref name="idVar" /> is assigned the keystroke as a string.<br />
            If an Alt or Ctrl key combination is pressed, WAIT assigns Chr(0) to <paramref name="idVar" />.  <br />

            	Non-alphanumeric values entered by pressing an Alt+key combination assign the specified character.<br />
            If the character can be displayed, it is echoed to the screen.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions._wait(System.String)">
      <summary>
            Display a prompt after sending a carriage return/linefeed to the terminal window, then wait for a key to be pressed.
            Note:  WAIT is a compatibility command and is no longer recommended.
        </summary>
      <param name="uValuePrompt">
            An optional prompt displayed before the input area.<br />
            If omitted, "Press any key to continue..." is displayed.  Specify NULL_STRING if you do not want to display a prompt.
        </param>
      <param name="Value">
            The variable that will hold input from the keyboard.<br />
            If there is no variable named <paramref name="idVar" /> that is visible to the current routine, a private variable is created.  <paramref name="idVar" /> is assigned the keystroke as a string.<br />
            If an Alt or Ctrl key combination is pressed, WAIT assigns Chr(0) to <paramref name="idVar" />.  <br />

            	Non-alphanumeric values entered by pressing an Alt+key combination assign the specified character.<br />
            If the character can be displayed, it is echoed to the screen.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.AAdd(XSharp.__Array,XSharp.__Usual)">
      <summary>
            Add a new element to the end of an array.
        </summary>
      <param name="aTarget">The array to add a new element to.</param>
      <param name="uNewElement">
            The value assigned to the new element.<br />
            If <paramref name="uNewElement" /> is another array, the new element in the target array will contain a reference to the array specified by <paramref name="uNewElement" />, rather than the array itself.
        </param>
      <returns>
            The value of <paramref name="uNewElement" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AAdd``1(XSharp.__ArrayBase{``0},``0)">
      <summary>
            Add a new element to the end of an array.
        </summary>
      <param name="aTarget">The array to add a new element to.</param>
      <param name="uNewElement">
            The value assigned to the new element.<br />
            If <paramref name="uNewElement" /> is another array, the new element in the target array will contain a reference to the array specified by <paramref name="uNewElement" />, rather than the array itself.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            The value of <paramref name="uNewElement" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Abs(XSharp.__Usual)">
      <summary>
            Return the absolute value of a numeric expression, regardless of its sign.
        </summary>
      <param name="nValue">The numeric expression to evaluate.</param>
      <returns>
            A positive number or 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AbsFloat(XSharp.__Float)">
      <summary>
            Return the absolute value of a strongly typed numeric expression, regardless of its sign.
        </summary>
      <param name="fValue">The floating point number to evaluate.</param>
      <returns>
            A positive number or 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AClone(XSharp.__Array)">
      <summary>
            Duplicate a multidimensional array.
        </summary>
      <param name="aSource">The array to duplicate.</param>
      <returns>
            A duplicate of <paramref name="aSource" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AClone``1(XSharp.__ArrayBase{``0})">
      <summary>
            Duplicate a multidimensional array.
        </summary>
      <param name="aSource">The array to duplicate.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A duplicate of <paramref name="aSource" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ACloneShallow(XSharp.__Array)">
      <summary>
            Duplicate an array without its subarrays.
        </summary>
      <param name="aSource">The array to duplicate.</param>
      <returns>
            A duplicate of <paramref name="aSource" /> without its subarrays.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ACloneShallow``1(XSharp.__ArrayBase{``0})">
      <summary>
            Duplicate an array without its subarrays.
        </summary>
      <param name="aSource">The array to duplicate.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A duplicate of <paramref name="aSource" /> without its subarrays.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ACopy(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Copy elements from one array to another.
        </summary>
      <param name="aSource">The array to copy elements from.</param>
      <param name="aTarget">The array to copy elements to.</param>
      <param name="nStart">
            The starting element position in <paramref name="aSource" />. <br />
            A negative value starts from the end. <br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to copy from <paramref name="aSource" />, beginning at <paramref name="nStart" />. <br />
            A negative value starts from the end. <br />
            If <paramref name="nCount" /> is not specified, all elements in <paramref name="aSource" /> beginning with the starting element are copied.
        </param>
      <param name="nTargetPos">
            The starting element position in <paramref name="aTarget" /> to receive elements from <paramref name="aSource" />. <br />
            The default value is 1.
        </param>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ACos(XSharp.__Usual)">
      <summary>
            Returns the arc cosine of a specified numeric expression.
        </summary>
      <param name="nExpression">

            Specifies a numeric expression whose arc cosine ACOS( ) returns. The value of nExpression can range from –1 through +1. The value returned by ACOS( ) ranges from 0 through pi (3.141592). The number of decimal places ACOS( ) returns is determined by SET DECIMALS.
            Use RTOD( ) to convert radians to degrees.
        </param>
      <returns>
            Numeric
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ACot(XSharp.__Usual)">
      <summary>
            Calculate the arc cotangent of a number.
        </summary>
      <param name="nNum">Any numeric value.</param>
      <returns>
            A number between -PI/2 and PI/2, representing the angle, in radians, whose cotangent is equal to <paramref name="nNum" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ADel(XSharp.__Array,System.UInt32)">
      <summary>
            Delete an array element.
        </summary>
      <param name="aTarget">The array to delete an element from.</param>
      <param name="dwPosition">The position of the element to delete.</param>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ADel``1(XSharp.__ArrayBase{``0},System.UInt32)">
      <summary>
            Delete an array element.
        </summary>
      <param name="aTarget">The array to delete an element from.</param>
      <param name="dwPosition">The position of the element to delete.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ADim(XSharp.__Array)">
      <summary>Calculate the # of dimensions in an array</summary>
      <param name="a"></param>
      <returns>Number of dimensions in an array</returns>
    </member>
    <member name="M:XSharp.RT.Functions.ADimPic(XSharp.__Array)">
      <summary>Calculate a string that represents the dimensions in an array</summary>
      <param name="a"></param>
      <returns>String that displays the dimensions in an array</returns>
    </member>
    <member name="M:XSharp.RT.Functions.ADir(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Fill a series of arrays with directory information.
            Note:<br />
            ADir() is a compatibility function and therefore not recommended.<br />
            It is superseded by the Directory() function, which returns all file information in a multidimensional array.
        </summary>
      <param name="cFileSpec">
            The file specification for the directory search.<br />
            Besides a file name, this specification may include an optional drive, directory, and extension.<br />
            The file name and extension may include the standard wildcard characters (* and ?).<br />
            If you do not specify a drive and directory, this function uses the SetDefault() setting.
        </param>
      <param name="acFileNames">
            The array to fill with the file names matching <paramref name="cFileSpec" />.<br />
            Each element will contain the file name and extension as a string, in all uppercase letters.
        </param>
      <param name="anSizes">
            The array to fill with the sizes of the corresponding files in <paramref name="acFileNames" />.
        </param>
      <param name="adDates">
            The array to fill with the dates of the corresponding files in <paramref name="acFileNames" />.
        </param>
      <param name="acTimes">
            The array to fill with the times of the corresponding files in <paramref name="acFileNames" />, in the form hh:mO:ss.
        </param>
      <param name="acAttributes">
            The array to fill with attributes of the corresponding files in <paramref name="acFileNames" />.<br />
            If <paramref name="acAttributes" /> is specified, hidden, system, and directory files are included as well as normal files.<br />
            If <paramref name="acAttributes" /> is not specified, only normal files are included.
        </param>
      <returns>
            The number of files matching the directory skeleton described in <paramref name="cFileSpec" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEval(XSharp.__Array,XSharp.ICodeblock)">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block or is ignored — to assign the return value to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEval(XSharp.__Array,XSharp.ICodeblock,XSharp.__Usual)">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block or is ignored — to assign the return value to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEval(XSharp.__Array,XSharp.ICodeblock,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block or is ignored — to assign the return value to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEval``1(XSharp.__ArrayBase{``0},System.Action{``0})">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block or is ignored — to assign the return value to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEval``1(XSharp.__ArrayBase{``0},System.Action{``0},System.UInt32)">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block or is ignored — to assign the return value to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEval``1(XSharp.__ArrayBase{``0},System.Action{``0},System.UInt32,System.UInt32)">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block or is ignored — to assign the return value to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalA(XSharp.__Array,XSharp.ICodeblock)">
      <summary>
            Execute a code block for each element in an array and assign the return value to each element in the array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end. <br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalA(XSharp.__Array,XSharp.ICodeblock,XSharp.__Usual)">
      <summary>
            Execute a code block for each element in an array and assign the return value to each element in the array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end. <br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalA(XSharp.__Array,XSharp.ICodeblock,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Execute a code block for each element in an array and assign the return value to each element in the array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end. <br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalA``1(XSharp.__ArrayBase{``0},System.Func{``0,``0})">
      <summary>
            Execute a code block for each element in an array and assign the return value to each element in the array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end. <br />
            The default is all elements to the end of the array.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aArray" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalA``1(XSharp.__ArrayBase{``0},System.Func{``0,``0},System.UInt32)">
      <summary>
            Execute a code block for each element in an array and assign the return value to each element in the array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end. <br />
            The default is all elements to the end of the array.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aArray" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalA``1(XSharp.__ArrayBase{``0},System.Func{``0,``0},System.UInt32,System.UInt32)">
      <summary>
            Execute a code block for each element in an array and assign the return value to each element in the array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end. <br />
            The default is all elements to the end of the array.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aArray" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalOld(XSharp.__Array,XSharp.ICodeblock)">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block is ignored.<br />
            To assign the return value of the code block to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalOld(XSharp.__Array,XSharp.ICodeblock,XSharp.__Usual)">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block is ignored.<br />
            To assign the return value of the code block to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AEvalOld(XSharp.__Array,XSharp.ICodeblock,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Execute a code block for each element in an array.
        </summary>
      <param name="aArray">The array to traverse.</param>
      <param name="cbBlock">The code block to execute.</param>
      <param name="nStart">
            The starting element<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aArray" />.<br />
            The return value of the code block is ignored.<br />
            To assign the return value of the code block to each element in the array, use the AEvalA() function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AFields(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Fill arrays with the structure of the current database file.
            Note:<br />
            AFields() is a compatibility function and therefore not recommended.<br />
            It is superseded by DBStruct(), which does not require the existence of any arrays prior to invocation and returns a multidimensional array containing the current database file structure.
        </summary>
      <param name="acFieldNames">The array to fill with field names.</param>
      <param name="acTypes">
            The array to fill with the type of fields in <paramref name="acFieldNames" />.
        </param>
      <param name="anWidths">
            The array to fill with the widths of fields in <paramref name="acFieldNames" />.
        </param>
      <param name="anDecimals">
            The array to fill with the number of decimals defined for fields in <paramref name="acFieldNames" />.<br />
            If the field type is not numeric, the system assigns 0 to <paramref name="anDecimals" />.
        </param>
      <returns>
            The number of fields or the length of the shortest array argument, whichever is less.<br />
            If no arguments are specified, or if there is no file in use in the current work area, AFields() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AFill(XSharp.__Array,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Fill array elements with a specified value.
        </summary>
      <param name="aTarget">The array to fill.</param>
      <param name="uValue">The value to place in each array element.</param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AIns(XSharp.__Array,System.UInt32)">
      <summary>
            Insert an element into an array and assign it a NIL value.
        </summary>
      <param name="aTarget">The array into which the element will be inserted.</param>
      <param name="dwPosition">The position at which the element will be inserted.</param>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AIns``1(XSharp.__ArrayBase{``0},System.UInt32)">
      <summary>
            Insert an element into an array and assign it a NIL value.
        </summary>
      <param name="aTarget">The array into which the element will be inserted.</param>
      <param name="dwPosition">The position at which the element will be inserted.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ALen(XSharp.__Array)">
      <summary>
            Return the number of elements in an array.
        </summary>
      <param name="aTarget">The array to count.</param>
      <returns>
            The number of elements in the array.<br />
            If the array is empty, ALen() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ALen``1(XSharp.__ArrayBase{``0})">
      <summary>
            Return the number of elements in an array.
        </summary>
      <param name="aTarget">The array to count.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            The number of elements in the array.<br />
            If the array is empty, ALen() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Alias(XSharp.__Usual)">
      <summary>
            Return the alias of a specified work area as a string.
        </summary>
      <param name="uWorkArea">
            Any work area name or number.<br />
            If not specified, the alias of the current work area is returned.
        </param>
      <returns>
            If there is no database file in use, Alias() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Alias0">
      <summary>
            Return the alias of the current work area as a string.
        </summary>
      <returns>
            If there is no database file in use, Alias0() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Alias0Sym">
      <summary>
            Return the alias of the current work area as a symbol.
        </summary>
      <returns>
            If there is no database file in use for the current work area, Alias0Sym() returns a NULL_SYMBOL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AllowCollectThread"></member>
    <member name="M:XSharp.RT.Functions.Ansi2OemBuff(XSharp.__Psz,XSharp.__Psz,System.UInt32)">
      <summary>
            Convert a specified number of ANSI characters in a source buffer to a buffer of corresponding OEM characters.
        </summary>
      <param name="pszTarget">A pointer to the buffer that will contain the converted string.</param>
      <param name="pszSource">A pointer to the buffer that contains the string to convert.</param>
      <param name="dwCount">The number of characters to convert.</param>
      <returns>
            A pointer to the buffer that contains the converted string.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AReplicate(XSharp.__Usual,System.UInt32)">
      <summary>
            To create an array and fill its elements with a default value.
        </summary>
      <param name="xFill">The value with which to fill the array.</param>
      <param name="nElements">The size of the array.</param>
      <returns>
            An array <paramref name="nElements" /> elements long, each element containing <paramref name="xFill" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Array">
      <summary>
            Create an uninitialized array with the specified number of elements and dimensions.
        </summary>
      <param name="wElementList">
            A comma-separated list representing the number of elements in each dimension.<br />
            If more than one element number is specified, a multidimensional array is created with the number of dimensions equal to the number of arguments in <paramref name="wElementList" />.
        </param>
      <returns>
            An array of specified dimensions.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Array(XSharp.__Usual[])">
      <summary>
            Create an uninitialized array with the specified number of elements and dimensions.
        </summary>
      <param name="wElementList">
            A comma-separated list representing the number of elements in each dimension.<br />
            If more than one element number is specified, a multidimensional array is created with the number of dimensions equal to the number of arguments in <paramref name="wElementList" />.
        </param>
      <returns>
            An array of specified dimensions.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayBuild">
      <summary>
            Create an empty array.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayCreate(System.UInt32)">
      <summary>
            Create an uninitialized, one-dimensional array.
        </summary>
      <param name="dwElements">The number of elements in the array.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayCreate``1(System.UInt32)">
      <summary>
            Create an uninitialized, one-dimensional array.
        </summary>
      <param name="dwElements">The number of elements in the array.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayDeProtect(XSharp.__Array)">
      <summary>
            Removes write protection from an entire array.
        </summary>
      <param name="aTarget">The array to deprotect.</param>
      <returns>
            TRUE if the array was successfully deprotected; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayDeProtect``1(XSharp.__ArrayBase{``0})">
      <summary>
            Removes write protection from an entire array.
        </summary>
      <param name="aTarget">The array to deprotect.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            TRUE if the array was successfully deprotected; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayGet(XSharp.__Array,System.UInt32)">
      <summary>
            Read an array element.
        </summary>
      <param name="aTarget">The array to read.</param>
      <param name="dwElement">The number of the element to read.</param>
      <returns>
            The value held by the element.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayGet``1(XSharp.__ArrayBase{``0},System.UInt32)">
      <summary>
            Read an array element.
        </summary>
      <param name="aTarget">The array to read.</param>
      <param name="dwElement">The number of the element to read.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            The value held by the element.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayInit(System.UInt32,XSharp.__Usual[]@)">
      <summary>
            Create an initialized array.
        </summary>
      <param name="wElements">The number of elements.</param>
      <param name="aValues">Data to initialize array with</param>
      <returns>
            An initialized array with the specified number of elements and referenced values in each element.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayNew">
      <summary>
            Create an uninitialized array with the specified number of elements and dimensions.
        </summary>
      <param name="wElementList">
            A comma-separated list representing the number of elements in each dimension.<br />
            If more than one element number is specified, a multidimensional array is created with the number of dimensions equal to the number of arguments in <paramref name="wElementList" />.
        </param>
      <returns>
            An array of specified dimensions.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayNew``1(System.Int32)">
      <summary>
            Create an uninitialized array with the specified number of elements and dimensions.
        </summary>
      <param name="wElementList">
            A comma-separated list representing the number of elements in each dimension.<br />
            If more than one element number is specified, a multidimensional array is created with the number of dimensions equal to the number of arguments in <paramref name="wElementList" />.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            An array of specified dimensions.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayNew``1(System.UInt32)">
      <summary>
            Create an uninitialized array with the specified number of elements and dimensions.
        </summary>
      <param name="wElementList">
            A comma-separated list representing the number of elements in each dimension.<br />
            If more than one element number is specified, a multidimensional array is created with the number of dimensions equal to the number of arguments in <paramref name="wElementList" />.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            An array of specified dimensions.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayNew(XSharp.__Usual[])">
      <summary>
            Create an uninitialized array with the specified number of elements and dimensions.
        </summary>
      <param name="wElementList">
            A comma-separated list representing the number of elements in each dimension.<br />
            If more than one element number is specified, a multidimensional array is created with the number of dimensions equal to the number of arguments in <paramref name="wElementList" />.
        </param>
      <returns>
            An array of specified dimensions.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayProtect(XSharp.__Array)">
      <summary>
            Protect an array from change in all functions except the one in which it was declared.
        </summary>
      <param name="aTarget">The array to protect.</param>
      <returns>
            TRUE if the array was successfully protected; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayProtect``1(XSharp.__ArrayBase{``0})">
      <summary>
            Protect an array from change in all functions except the one in which it was declared.
        </summary>
      <param name="aTarget">The array to protect.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            TRUE if the array was successfully protected; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayPut(XSharp.__Array,System.UInt32,XSharp.__Usual)">
      <summary>
            Write a value to an array element.
        </summary>
      <param name="aTarget">The array to write to.</param>
      <param name="dwElement">The number of the array element to receive the value.</param>
      <param name="uValue">The value to write to the array element.</param>
      <returns>
            The value assigned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayPut``1(XSharp.__ArrayBase{``0},System.UInt32,``0)">
      <summary>
            Write a value to an array element.
        </summary>
      <param name="aTarget">The array to write to.</param>
      <param name="dwElement">The number of the array element to receive the value.</param>
      <param name="uValue">The value to write to the array element.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            The value assigned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayStore(XSharp.__Array,XSharp.__Usual*,System.UInt32)">
      <summary>
            Store an array to a buffer.
        </summary>
      <param name="aSource">The array to be stored to a buffer.</param>
      <param name="Buff">A pointer to the buffer.</param>
      <param name="dwLen">The length of the buffer.</param>
      <returns>
            The number of bytes stored to the buffer.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArrayStore``1(XSharp.__ArrayBase{``0},``0*,System.UInt32)">
      <summary>
            Store an array to a buffer.
        </summary>
      <param name="aSource">The array to be stored to a buffer.</param>
      <param name="Buff">A pointer to the buffer.</param>
      <param name="dwLen">The length of the buffer.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            The number of bytes stored to the buffer.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArraySwap(XSharp.__Array,System.UInt32,XSharp.__Usual)">
      <summary>
            Replace an array element with a new value and return the old value.
        </summary>
      <param name="aTarget">The array whose element will be replaced with a new value.</param>
      <param name="dwElement">The number of the element to be replaced.</param>
      <param name="uNewValue">The new value.</param>
      <returns>
            The value that was replaced by <paramref name="uNewValue" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ArraySwap``1(XSharp.__ArrayBase{``0},System.UInt32,``0)">
      <summary>
            Replace an array element with a new value and return the old value.
        </summary>
      <param name="aTarget">The array whose element will be replaced with a new value.</param>
      <param name="dwElement">The number of the element to be replaced.</param>
      <param name="uNewValue">The new value.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            The value that was replaced by <paramref name="uNewValue" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan(XSharp.__Array,XSharp.__Usual)">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan(XSharp.__Array,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan(XSharp.__Array,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan``1(XSharp.__ArrayBase{``0},System.Func{``0,System.Boolean})">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <param name="act">A lambda expression that will be evaluated for every element in the array.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan``1(XSharp.__ArrayBase{``0},System.Func{``0,System.Boolean},System.Int32)">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <param name="act">A lambda expression that will be evaluated for every element in the array.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan``1(XSharp.__ArrayBase{``0},System.Func{``0,System.Boolean},System.Int32,System.Int32)">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan``1(XSharp.__ArrayBase{``0},``0)">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan``1(XSharp.__ArrayBase{``0},``0,System.Int32)">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScan``1(XSharp.__ArrayBase{``0},``0,System.Int32,System.Int32)">
      <summary>
            Scan an array until a value is found or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScan() returns the position of the first element for which the code block returns TRUE.<br />
            Otherwise, AScan() returns the position of the first matching element.<br />
            AScan() returns 0 if no match is found
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScanBin(XSharp.__Array,XSharp.__Usual)">
      <summary>
            Scan a sorted array until a value is found or a code block returns 0.
        </summary>
      <param name="aTarget">The sorted array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.<br />
            If <paramref name="uSearch" /> is a code block, it should return a numeric value that indicates the outcome of the comparison: a positive value indicates that <paramref name="uSearch" /> is greater than the current array element, a 0 stands for equality, and a negative value indicates that <paramref name="uSearch" /> is less than the current array element.
        </param>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScanBin() returns the position of the element if the code block returned a value of zero.<br />
            Otherwise, AScanBin() returns the position of a matching element.<br />
            If multiple occurrences of the same element exist, the returned match is not necessarily the lowest numbered element since AScanBin() uses a binary search algorithm.<br />
            AScanBin() returns 0 if no match is found.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScanBinExact(XSharp.__Array,XSharp.__Usual)">
      <summary>
            Scan a sorted array until there is an exact match or a code block returns 0.
        </summary>
      <param name="aTarget">The sorted array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.<br />
            If <paramref name="uSearch" /> is a code block, it should return a numeric value that indicates the outcome of the comparison: a positive value indicates that <paramref name="uSearch" /> is greater than the current array element, a 0 stands for equality, and a negative value indicates that <paramref name="uSearch" /> is less than the current array element.
        </param>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScanBinExact() returns the position of the element if the code block returned 0.<br />
            Otherwise, AScanBinExact() returns the position of an exact-matching element.<br />
            If multiple occurrences of the same element exist, the returned exact match is not necessarily the lowest numbered element since AScanBinExact() uses a binary search algorithm.<br />
            AScanBinExact() returns 0 if no exact match is found.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScanExact(XSharp.__Array,XSharp.__Usual)">
      <summary>
            Scan an array until there is an exact match or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScanExact() returns the position of the element if the code block returned TRUE.<br />
            Otherwise, AScanExact() returns the position of the first exact-matching element.<br />
            AScanExact() returns 0 if no exact match is found.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScanExact(XSharp.__Array,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Scan an array until there is an exact match or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScanExact() returns the position of the element if the code block returned TRUE.<br />
            Otherwise, AScanExact() returns the position of the first exact-matching element.<br />
            AScanExact() returns 0 if no exact match is found.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AScanExact(XSharp.__Array,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Scan an array until there is an exact match or a code block returns TRUE.
        </summary>
      <param name="aTarget">The array to scan.</param>
      <param name="uSearch">
            The value to scan for.<br />
            Unless this argument is a code block, it must match the data type of the elements in <paramref name="aTarget" />.
        </param>
      <param name="nStart">
            The starting element.<br />
            A negative value starts from the end.<br />
            If <paramref name="nCount" /> is positive, the default value is 1; if <paramref name="nCount" /> is negative, the default value is the length of the array.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            A negative value starts from the end.<br />
            The default is all elements to the end of the array.
        </param>
      <returns>
            If <paramref name="uSearch" /> is a code block, AScanExact() returns the position of the element if the code block returned TRUE.<br />
            Otherwise, AScanExact() returns the position of the first exact-matching element.<br />
            AScanExact() returns 0 if no exact match is found.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ASend(XSharp.__Array,System.String,XSharp.__Usual[])">
      <summary>
            Invoke a method for every element in an array of objects.
        </summary>
      <param name="aTarget">The array to process.</param>
      <param name="symMethod">The method name, specified without parentheses.</param>
      <param name="MethodArgList">
            A comma-separated list of arguments to pass to <paramref name="symMethod" />.
        </param>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AsHexString(XSharp.__Usual)">
      <summary>
            Convert a value to a hexadecimal string.
        </summary>
      <param name="uValue">A value of any type.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ASin(XSharp.__Usual)">
      <summary>
            Returns in radians the arc sine of a numeric expression.
        </summary>
      <param name="nExpression">

            Specifies the numeric expression whose arc sine ASIN( ) returns. The value of nExpression can range from +1 through –1, and the value ASIN( ) returns can range from –pi/2 through +pi/2 ( –1.57079 to 1.57079). The number of decimal places in the display of the result can be specified with SET DECIMALS.
        </param>
      <returns>
            Numeric
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ASize(XSharp.__Array,System.UInt32)">
      <summary>
            Grow or shrink an array.
        </summary>
      <param name="aTarget">The array to grow or shrink.</param>
      <param name="dwLength">The new size of the array.</param>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ASize``1(XSharp.__ArrayBase{``0},System.UInt32)">
      <summary>
            Grow or shrink an array.
        </summary>
      <param name="aTarget">The array to grow or shrink.</param>
      <param name="dwLength">The new size of the array.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ASort(XSharp.__Array,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Sort an array.
        </summary>
      <param name="aTarget">The array to sort.</param>
      <param name="nStart">
            The starting element.<br />
            The default value is 1.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            The default is all elements to the end of the array.
        </param>
      <param name="cbOrder">
            A code block used to determine the sort order.<br />
            This argument is used to change the sorting order to descending or dictionary order.<br />
            Each time it is evaluated, two elements from the target array are passed as arguments.<br />
            The code block returns TRUE if the elements are in sorted order.  See the examples below.<br />

            	The default sorting order is ascending:<br />

            		Elements with low values are sorted toward the beginning of the array (the first element).<br />

            		Elements with high values are sorted toward the end of the array (the last element)
        </param>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ASort``1(XSharp.__ArrayBase{``0},System.Func{``0,``0,System.Boolean})">
      <summary>
            Sort an array.
        </summary>
      <param name="aTarget">The array to sort.</param>
      <param name="nStart">
            The starting element.<br />
            The default value is 1.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            The default is all elements to the end of the array.
        </param>
      <param name="cbOrder">
            A code block used to determine the sort order.<br />
            This argument is used to change the sorting order to descending or dictionary order.<br />
            Each time it is evaluated, two elements from the target array are passed as arguments.<br />
            The code block returns TRUE if the elements are in sorted order.  See the examples below.<br />

            	The default sorting order is ascending:<br />

            		Elements with low values are sorted toward the beginning of the array (the first element).<br />

            		Elements with high values are sorted toward the end of the array (the last element)
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ASort``1(XSharp.__ArrayBase{``0},System.Int32,System.Int32,System.Func{``0,``0,System.Boolean})">
      <summary>
            Sort an array.
        </summary>
      <param name="aTarget">The array to sort.</param>
      <param name="nStart">
            The starting element.<br />
            The default value is 1.
        </param>
      <param name="nCount">
            The number of elements to process from <paramref name="nStart" />.<br />
            The default is all elements to the end of the array.
        </param>
      <param name="cbOrder">
            A code block used to determine the sort order.<br />
            This argument is used to change the sorting order to descending or dictionary order.<br />
            Each time it is evaluated, two elements from the target array are passed as arguments.<br />
            The code block returns TRUE if the elements are in sorted order.  See the examples below.<br />

            	The default sorting order is ascending:<br />

            		Elements with low values are sorted toward the beginning of the array (the first element).<br />

            		Elements with high values are sorted toward the end of the array (the last element)
        </param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AsPadr(XSharp.__Usual,System.UInt32)">
      <summary>
            Convert a value to a right-padded string.
        </summary>
      <param name="uValue">The value to be converted.</param>
      <param name="wLen">The length of the padded string.</param>
      <returns>
            A right-padded string of length <paramref name="wLen" /> containing the converted value.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AsString(XSharp.__Usual)">
      <summary>
            Convert a value to a string.
        </summary>
      <param name="uValue">The value to be converted.</param>
      <returns>
            A string containing the converted value.<br />
            The converted string is dynamically allocated.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.AsSymbol(XSharp.__Usual)">
      <summary>
            Convert a string or a PSZ to a symbol.
        </summary>
      <param name="uValue">
            The value to be converted.<br />
            Possible data types for <paramref name="uValue" /> are STRING, PSZ, or SYMBOL.
        </param>
      <returns>
            The converted value as a symbol.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ATail(XSharp.__Array)">
      <summary>
            Return the highest numbered element of an array.
        </summary>
      <param name="aTarget">The array.</param>
      <returns>
            The contents of the last array element.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ATail``1(XSharp.__ArrayBase{``0})">
      <summary>
            Return the highest numbered element of an array.
        </summary>
      <param name="aTarget">The array.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            The contents of the last array element.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ATan(XSharp.__Usual)">
      <summary>
            Calculate the arc tangent of a number.
        </summary>
      <param name="nNum">Any numeric value.</param>
      <returns>
            A number between -PI/2 and PI/2, representing the angle, in radians, whose tangent is equal to <paramref name="nNum" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Atan2(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
        </summary>
      <param name="nX">Any numeric value.</param>
      <param name="nY">Any numeric value.</param>
      <returns>
            Returns the angle whose tangent is the quotient of two specified numbers.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ATrueDel(XSharp.__Array,System.UInt32)">
      <summary>
            Delete an array element.
        </summary>
      <param name="aTarget">The array to delete an element from.</param>
      <param name="dwPosition">The position of the element to delete.</param>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ATrueDel``1(XSharp.__ArrayBase{``0},System.UInt32)">
      <summary>
            Delete an array element.
        </summary>
      <param name="aTarget">The array to delete an element from.</param>
      <param name="dwPosition">The position of the element to delete.</param>
      <typeparam name="T">The type of the array elements</typeparam>
      <returns>
            A reference to <paramref name="aTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Between(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Determine if a value is between two other values.
        </summary>
      <param name="uValue">
            A value of any type to compare to <paramref name="uMin" /> and <paramref name="uMax" />.
        </param>
      <param name="uMin">
            The minimum value to compare with.<br />
            This must be of the same type as <paramref name="uValue" /> except that numerics of different types are allowed.
        </param>
      <param name="uMax">
            TThe maximum value to compare with. 
            This must be of the same type as <paramref name="uValue" /> except that numerics of different types are allowed.
        </param>
      <returns>
            TRUE if the value is greater than or equal to the minimum and less than or equal to the maximum otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Bin2Date(System.String)">
      <summary>
            Convert a string containing a 32-bit binary date to a date data type.
        </summary>
      <param name="cString">A 32-bit binary date represented as a string — least significant byte first.  Only the first 4 bytes are used by the function; all others are ignored.</param>
      <returns>
            A date value that corresponds to the date specified in <paramref name="cString" />.<br />
            If <paramref name="cString" /> is not a valid binary date, Bin2Date() returns a NULL_DATE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Bin2F(System.String)">
      <summary>
            Convert a string containing a 80-bit floating point number to a float value.
        </summary>
      <param name="cFloat">An 80-bit floating point number represented as a string — least significant byte first.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Bin2Logic(XSharp.__Psz)">
      <summary>
            Convert a string containing an 8-bit logical into a logical value.
        </summary>
      <param name="pszLogical">An 8-bit logical represented as a string.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBDirectExport(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Export the contents of a binary large object (BLOB) pointer to a file.
            Note:<br />
            A BLOB file (.DBV or .FPT) is used for storing memo field information, as an alternative to the standard .DBT file mechanism supported by some RDDs.<br />
            It is a more powerful and efficient mechanism for storing and retrieving large amounts of data than using .DBT files.  X# supplies the DBFCDX driver, which uses the BLOB file storage mechanism by default, and the DBFBLOB driver, which you can use as an inherited driver with other RDDs.
        </summary>
      <param name="nPointer">
            A pointer to the BLOB data.<br />
            This pointer can be obtained using BLOBDirectPut(), BLOBDirectExport(), or DBFieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />).
        </param>
      <param name="cTargetFile">
            The name of the target file where the BLOB data will be written, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.  No default extension is assumed.<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is written to without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.
        </param>
      <param name="kMode">
            A constant defining the copy mode, as shown in the table below:<br /><list><listheader><term>Constant</term><description>Description</description></listheader><item><term>BLOB_EXPORT_APPEND</term><description>Appends to the file</description></item><item><term>BLOB_EXPORT_OVERWRITE</term><description>Overwrites the file — this is the default</description></item></list></param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBDirectGet(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Retrieve data stored in a BLOB file without referencing a specific field.
        </summary>
      <param name="nPointer">
            A pointer to the BLOB data.<br />
            This pointer can be obtained using BLOBDirectPut(), BLOBDirectImport(), or DBFieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />).
        </param>
      <param name="nStart">
            The starting position in <paramref name="nPointer" />.<br />
            If <paramref name="nStart" /> is positive, the starting position is relative to the leftmost character in <paramref name="nPointer" />.<br />
            If <paramref name="nStart" /> is negative, it is relative to the rightmost character in <paramref name="nPointer" />.<br />
            If <paramref name="nStart" /> is omitted, it is assumed to be 1.
        </param>
      <param name="nCount">
            The number of bytes of data to retrieve, beginning at <paramref name="nStart" />.<br />
            If <paramref name="nCount" /> is larger than the amount of data stored, excess data is ignored.<br />
            If omitted, BLOBDirectGet() retrieves to the end of the data.
        </param>
      <returns>
            The data retrieved from the BLOB file.<br />
            The data type of the return value depends on the actual data stored.<br />
            Use ValType() or UsualType() to determine the data type.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBDirectImport(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Import a file into a BLOB file and return a pointer to the data.
        </summary>
      <param name="nOldPointer">
            A pointer to the BLOB data which will be released after the import.<br />
            This pointer can be obtained using BLOBDirectPut(), BLOBDirectImport(), or DBFieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />).  Passing 0 disables the release of data.<br />

            	If specified, BLOBDirectImport() releases the space associated with <paramref name="nOldPointer" /> for reuse by other data.<br />
            Therefore, it is illegal to use <paramref name="nOldPointer" /> with any of the BLOB functions after passing it as an argument to this function.<br />
            Use the function's return value to refer to the newly stored data.
        </param>
      <param name="cSourceFile">
            The name of the file from which to read the BLOB data, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.  No default extension is assumed.<br /><br />

            	This function attempts to open <paramref name="cSourceFile" /> in shared mode.<br />
            If the file does not exist, a runtime error is raised.<br />
            If the file is successfully opened, the operation proceeds.<br />
            If access is denied because, for example, another process has exclusive use of the file, NetErr() is set to TRUE.
        </param>
      <returns>
            A numeric pointer to the BLOB image stored in <paramref name="cSourceFile" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBDirectPut(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Put data in a BLOB file without referencing a specific field.
        </summary>
      <param name="nOldPointer">
            A reference to previously stored BLOB data.<br />
            This reference can be obtained using BLOBDirectPut(), BLOBDirectImport(), or DBFieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />).<br />
            If other than 0, the data referenced by <paramref name="nOldPointer" /> is replaced by <paramref name="uBLOB" />; otherwise, <paramref name="uBLOB" /> is added to the current contents of the BLOB file.<br /><br />

            	Important!<br />
            If specified, BLOBDirectPut() releases the space associated with <paramref name="nOldPointer" /> for reuse by other data.<br />
            Therefore, it is illegal to use <paramref name="nOldPointer" /> with any of the BLOB functions after passing it as an argument to this function.<br />
            Use the function's return value to refer to the newly stored data.
        </param>
      <param name="uBLOB">
            The data you want to put into the BLOB file.  <paramref name="uBLOB" /> can be any X# usual data type, except code block and object.
        </param>
      <returns>
            A numeric pointer to the <paramref name="uBLOB" /> data.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBExport(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Copy the contents of a BLOB, identified by its memo field number, to a file.
        </summary>
      <param name="nFieldPos">The position of the field in the database file structure.</param>
      <param name="cTargetFile">
            The name of the target file where the BLOB data will be written, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.  No default extension is assumed.<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is written to without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.
        </param>
      <param name="kMode">
            A constant defining the copy mode, as shown in the table below:<br /><list><listheader><term>Constant</term><description>Description</description></listheader><item><term>BLOB_EXPORT_APPEND</term><description>Appends to the file</description></item><item><term>BLOB_EXPORT_OVERWRITE</term><description>Overwrites the file — this is the default</description></item></list></param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBGet(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Get the contents of a BLOB, identified by its memo field number.
        </summary>
      <param name="nFieldPos">The position of the field in the database file structure.</param>
      <param name="nStart">
            The starting position in the memo field of the BLOB data.<br />
            If <paramref name="nStart" /> is positive, the starting position is relative to the leftmost character in <paramref name="nFieldPos" />.<br />
            If <paramref name="nStart" /> is negative, it is relative to the rightmost character in <paramref name="nFieldPos" />.<br />
            If <paramref name="nStart" /> is omitted, it is assumed to be 1.
        </param>
      <param name="nCount">
            The number of bytes of data to retrieve, beginning at <paramref name="nStart" />.<br />
            If <paramref name="nCount" /> is larger than the amount of data stored, excess data is ignored.<br />
            If omitted, BLOBGet() retrieves to the end of the data.
        </param>
      <returns>
            The BLOB data retrieved from the memo field.<br />
            The data type of the return value depends on the actual data stored.<br />
            Use ValType() or UsualType() to determine the data type.<br />
            If the indicated field is not a memo field, BLOBGet() returns NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBImport(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Read the contents of a file as a BLOB, identified by a memo field number.
        </summary>
      <param name="nFieldPos">The position of the field in the database file structure.</param>
      <param name="cSourceFile">
            The name of the file from which to read the BLOB data, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.  No default extension is assumed.<br />

            	This function attempts to open <paramref name="cSourceFile" /> in shared mode.<br />
            If the file does not exist, a runtime error is raised.<br />
            If the file is successfully opened, the operation proceeds.<br />
            If access is denied because, for example, another process has exclusive use of the file, NetErr() is set to TRUE.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBRootGet">
      <summary>
            Retrieve the data from the root area of a BLOB file.
        </summary>
      <returns>
            The data retrieved from the root of the BLOB file.<br />
            The data type of the return value depends on the actual data stored.<br />
            Use ValType() or UsualType() to determine the data type.  Note that BLOBRootGet() returns NIL if the root reference has never been written to with BLOBRootPut().
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBRootLock">
      <summary>
            Obtain a lock on the root area of a BLOB file.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBRootPut(XSharp.__Usual)">
      <summary>
            Store data in the root area of a BLOB file.
        </summary>
      <param name="uBLOB">
            The data you want to put into the BLOB file's root area.  <paramref name="uBLOB" /> can be any X# usual data type, except code block and object.
        </param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.BLOBRootUnlock">
      <summary>
            Release the lock on a BLOB file's root area.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Bof">
      <summary>
            Determine when beginning-of-file is encountered.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE after an attempt to skip backward beyond the first logical record in a database file or if the database file contains no records; otherwise, FALSE.<br />
            If there is no database file open in the work area, BOF() returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Bof(XSharp.__Usual)">
      <summary>
            Determine when beginning-of-file is encountered.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE after an attempt to skip backward beyond the first logical record in a database file or if the database file contains no records; otherwise, FALSE.<br />
            If there is no database file open in the work area, BOF() returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.CanBreak">
      <summary>
            Check if a BEGIN SEQUENCE...END construct is active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.CDoW(XSharp.__Date)">
      <summary>
            Extract the name of the day of the week from a date.
        </summary>
      <param name="dDate">The date from which to extract the day of the week.</param>
      <returns>
            The name of the day of the week, where the first letter is uppercase and the rest of the string is lowercase.<br />
            For an invalid or NULL_DATE, CDoW() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Ceil(XSharp.__Usual)">
      <summary>
            Round a number up to the next highest integer.
        </summary>
      <param name="nNumber">The number to round.</param>
      <returns>
            The integer part (no decimals) of the nearest number that is greater than or equal to <paramref name="nNumber" />.  Since both <paramref name="nNumber" /> and the return value are data type USUAL, you are not limited to the size of an integer.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.CheckInstanceOf(System.Object,System.String)">
      <summary>
            Determine if an object is an instance of a particular class.
        </summary>
      <param name="oObject">The object to check for.</param>
      <param name="symClassName">
            The class that <paramref name="oObject" /> may be an instance of.
        </param>
      <returns>
            TRUE if <paramref name="oObject" /> is an instance of <paramref name="symClassName" />; otherwise, an error is generated.  FALSE is returned if you choose to ignore the error.
            If <paramref name="oObject" /> is a NULL_OBJECT, a FALSE is returned but no error is generated.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ClassCount">
      <summary>
            Return the number of classes available to your application.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ClassList">
      <summary>
            Return an array of symbols corresponding to the classes available to your application.
        </summary>
      <returns>
            An array of all class names as a symbol.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ClassName(System.Object)">
      <summary>
            Get the class name of an object.
        </summary>
      <param name="oObject">An object whose class name you want to get.</param>
      <returns>
            The class to which <paramref name="oObject" /> belongs.<br />
            If <paramref name="oObject" /> is not an instance of a class, a NULL_SYMBOL is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ClassTree(System.Object)">
      <summary>
            Get the class hierarchy of an object.
        </summary>
      <param name="oObject">An object whose class hierarchy you want to get.</param>
      <returns>
            An array of class names from which <paramref name="oObject" /> has been derived.<br />
            The last element of the array contains the root class from which subsequent classes in the array inherit.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ClassTreeClass(System.String)">
      <summary>
            Get the class hierarchy of a class.
        </summary>
      <param name="symClass">A symbol representing the class name whose class hierarchy you want to get.</param>
      <returns>
            An array of class names from which <paramref name="oObject" /> has been derived.<br />
            The last element of the array contains the root class from which subsequent classes in the array inherit.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.cls">
      <summary>
            Clear the terminal window and position the cursor at row and column 0.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.CMonth(XSharp.__Date)">
      <summary>
            Extract the name of the month from a date.
        </summary>
      <param name="dDate">The date from which to extract the month of the date.</param>
      <returns>
            The name of the month, where the first letter is uppercase and the rest of the string is lowercase.<br />
            For an invalid or NULL_DATE, CMonth() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Col">
      <summary>
            Return the current column position of the cursor in the terminal window.
        </summary>
      <returns>
            The column in which the cursor is currently located.<br />
            This value can range from 0 to MaxCol().
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Collect">
      <summary>
            Call the garbage collector if a watermark is reached.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.CollectCount">
      <summary>
            Count the number of garbage collections performed by the system.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.CollectForced">
      <summary>
            Call the garbage collector.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ConcatAtom(XSharp.__Symbol,XSharp.__Symbol)">
      <summary>
            Concatenate two Symbols.
            </summary>
      <param name="s1" />
      <param name="s2" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ConcatAtom3(XSharp.__Symbol,XSharp.__Symbol,XSharp.__Symbol)">
      <summary>
            Concatenate three Symbols.
            </summary>
      <param name="s1" />
      <param name="s2" />
      <param name="s3" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ConcatAtom4(XSharp.__Symbol,XSharp.__Symbol,XSharp.__Symbol,XSharp.__Symbol)">
      <summary></summary>
      <param name="s1" />
      <param name="s2" />
      <param name="s3" />
      <param name="s4" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ConcatAtom5(XSharp.__Symbol,XSharp.__Symbol,XSharp.__Symbol,XSharp.__Symbol,XSharp.__Symbol)">
      <summary></summary>
      <param name="s1" />
      <param name="s2" />
      <param name="s3" />
      <param name="s4" />
      <param name="s5" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ConDate(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Format a set of numbers representing a year, month, and day as a date.
        </summary>
      <param name="dwYear">
            A valid year.<br />
            If the century digits are not specified, the century is determined by the rules of SetEpoch().
        </param>
      <param name="dwMonth">A number from 1 through 12 representing a valid month.</param>
      <param name="dwDay">
            A number representing a valid day of <paramref name="dwMonth" />.
        </param>
      <returns>
            The date that corresponds to the passed arguments.<br />
            If any of the arguments specified do not represent a valid year, month, or day, a NULL_DATE is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Cos(XSharp.__Usual)">
      <summary>
            Calculate the cosine of a number.
        </summary>
      <param name="nNum">An angle in radians.</param>
      <returns>
            The cosine of the specified angle.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Cot(XSharp.__Usual)">
      <summary>
            Calculate the cotangent of a value.
        </summary>
      <param name="nNum">An angle in radians.</param>
      <returns>
            The cotangent of the specified angle.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.CParamCount(XSharp.Codeblock)">
      <summary>
            Return the number of arguments that a code block is expecting.
            </summary>
      <param name="uCodeBlock"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.CreateInstance(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create an object.
        </summary>
      <param name="symClassName">The name of the class for which you want to create an object.</param>
      <param name="InitArgList">
            A comma-separated list of arguments to pass to the Init() method of <paramref name="symClassName" /> (see example below).
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.CSend(System.Object,System.String,XSharp.__Usual[])">
      <summary>
            Invoke a method.
        </summary>
      <param name="oObject">The object whose method is invoked.</param>
      <param name="symMethod">The method name, specified without parentheses.</param>
      <param name="MethodArgList">
            A comma-separated list of arguments to pass to <paramref name="symMethod" />.
        </param>
      <returns>
            The return value of the method.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.CToD(System.String)">
      <summary>
            Convert a date string to date format.
        </summary>
      <param name="cDate">
            A string of numbers representing the month, day, and year,
            separated by any character other than a number.
            The month, day, and year digits must be in the format set by SetDateFormat() or SetDateCountry().
            If the century digits are not specified, the century is determined by the rules of SetEpoch().
        </param>
      <returns>
            The date value that corresponds to the numbers specified in <paramref name="cDate" />.<br />
            If <paramref name="cDate" /> is not a valid date, CToD() returns a NULL_DATE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.CToD(System.String,System.String)">
      <summary>
            Convert a date string to date format.
        </summary>
      <param name="cDate">
            A string of numbers representing the month, day, and year,
            separated by any character other than a number.
            The month, day, and year digits must be in the format set by SetDateFormat() or SetDateCountry().
            If the century digits are not specified, the century is determined by the rules of SetEpoch().
        </param>
      <param name="cDateFormat">A string representating the date format to use when converting the string to a date. Should consist of D, M and Y characters and separators.</param>
      <returns>
            The date value that corresponds to the numbers specified in <paramref name="cDate" />.<br />
            If <paramref name="cDate" /> is not a valid date, CToD() returns a NULL_DATE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.CToDAnsi(System.String)">
      <summary>
            Convert an ANSI date string to date format.
        </summary>
      <param name="cDate">
            A string in the ANSI form yyyy.mm.dd, where yy, mm, and dd represent year, month, and day respectively.  <br />

            The year, month, and day can be separated by any character other than a number.<br /><paramref name="cDate" /> is always interpreted as an ANSI string and is not dependent on SetDateFormat() or SetDateCountry().<br />

            If the century digits are not specified, the century is determined by the rules of SetEpoch().
        </param>
      <returns>
            The date value that corresponds to the numbers specified in <paramref name="cDate" />.  <br />

            If <paramref name="cDate" /> is not a valid ANSI date, CToDAnsi() returns a NULL_DATE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Date">
      <summary>
            Return the system date as a date value.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Date(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Format a set of numbers representing a year, month, and day as a date.
        </summary>
      <param name="dwYear">
            A valid year.<br />
            If the century digits are not specified, the century is determined by the rules of SetEpoch().
        </param>
      <param name="dwMonth">A number from 1 through 12 representing a valid month.</param>
      <param name="dwDay">
            A number representing a valid day of <paramref name="dwMonth" />.
        </param>
      <returns>
            The date that corresponds to the passed arguments.<br />
            If any of the arguments specified do not represent a valid year, month, or day, a NULL_DATE is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Date2Bin(XSharp.__Date)">
      <summary>
            Convert a date to a 32-bit binary date string.
        </summary>
      <param name="dValue">The date value to convert.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Day(XSharp.__Date)">
      <summary>
            Extract the number of the day of the month from a date.
        </summary>
      <param name="dDate">The date.</param>
      <returns>
            The day of the month, as a number in the range 0 to 31.  <br />

            If the day is February 29 and the year is not a leap year, Day() returns 0.  <br />

            For an invalid or NULL_DATE, Day() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbApp(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Import records from a database file.
        </summary>
      <param name="cSourceFile">
            The name of the database file from which to add records, including an optional drive, directory, and extension.  <br />

            See SetDefault() and SetPath() for file searching and creation rules.  <br />

            The default extension for database files is determined by the RDD .<br />

            	This function attempts to open <paramref name="cSourceFile" /> in shared mode.  <br />

            If the file does not exist, a runtime error is raised.<br />
            If the file is successfully opened, the operation proceeds.  <br />

            If access is denied because, for example, another process has exclusive use of the file, NetErr() is set to TRUE.
        </param>
      <param name="acFields">
            The list of fields to append from <paramref name="cSourceFile" />.  <br />

            The default is all fields.<br />

            Only fields with the same names and types in both files are appended.  <br />

            If fields with the same name do not match in data type, a runtime error is raised.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <param name="cDriver">
            The name of the RDD that will service the work area.  <br />

            If not specified, the default RDD as determined by RDDSetDefault() is used.
        </param>
      <param name="acRDDs">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality.<br />

                This allows you to use RDDs with special capabilities, like encryption or decryption, in different work areas with different database drivers.  <br />

                These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument).<br />
                If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence.  <br />

                If <paramref name="acRDDs" /> is omitted, no additional RDDs are assumed.
            </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbAppDelim(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Import records from a delimited text file.
        </summary>
      <param name="cSourceFile">
            The name of the delimited text file from which to add records, including an optional drive, directory, and extension.<br />

            See SetDefault() and SetPath() for file searching and creation rules.  <br />

            The default extension is .TXT.<br />

            This function attempts to open <paramref name="cSourceFile" /> in shared mode.  <br />

            If the file does not exist, a runtime error is raised.<br />
            If the file is successfully opened, the operation proceeds.<br />

            If access is denied because, for example, another process has exclusive use of the file, NetErr() is set to TRUE.
        </param>
      <param name="cDelim">
            The delimiter used to separate fields in <paramref name="cSourceFile" />.  <br />

            The default delimiter is a double quote mark.
        </param>
      <param name="acFields">
            A list of fields to copy from <paramref name="cSourceFile" />.  <br />

            The default is all fields.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbAppend(XSharp.__Usual)">
      <summary>
            Add a new record to a database file.
        </summary>
      <param name="lReleaseLocks">
            A logical data type that, if TRUE, clears all pending record locks, then appends the next record.  <br />

            If FALSE, all pending record locks are maintained, and the new record is added to the end of the lock list.  <br />

            The default value is TRUE.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.  <br />

            If successfully added, each field in the record is set to the empty value for its data type, and the new record becomes the current record.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbAppSdf(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Import records from an SDF file.
        </summary>
      <param name="cSourceFile">
            The name of the SDF file from which to add records, including an optional drive, directory, and extension.<br />

            See SetDefault() and SetPath() for file searching and creation rules.  <br />

            The default extension is .TXT.<br />

            This function attempts to open <paramref name="cSourceFile" /> in shared mode.  <br />

            If the file does not exist, a runtime error is raised.<br />
            If the file is successfully opened, the operation proceeds.<br />
            If access is denied because, for example, another process has exclusive use of the file, NetErr() is set to TRUE.
        </param>
      <param name="acFields">
            A list of fields to copy from <paramref name="cSourceFile" />.<br />
            The default is all records.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbAutoLock">
      <summary>Automatically lock a record in the FoxPro dialect </summary>
    </member>
    <member name="M:XSharp.RT.Functions.DbAutoUnLock">
      <summary>Automatically unlock a record in the FoxPro dialect </summary>
    </member>
    <member name="M:XSharp.RT.Functions.DbBlobInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)"></member>
    <member name="M:XSharp.RT.Functions.DbBuffRefresh">
      <summary>Refresh the buffer for the current workarea, discarding any changes that were made.</summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbBuffRefresh(XSharp.__Usual)"></member>
    <member name="M:XSharp.RT.Functions.DbClearFilter">
      <summary>
            Clear a logical filter condition.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbClearFilter(XSharp.__Usual)">
      <summary>
            Clear a logical filter condition.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbClearIndex(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Remove orders from the order list in a work area and close associated index files.
        </summary>
      <param name="uOrder">
            The name of the order to clear or a number representing its position in the order list.  <br />

            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  <br />

            If not specified, all orders in the specified index file (or the entire work area, if no index file is specified) are cleared.  <br />

            Invalid values are ignored.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).  <br />

            Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.  <br />

            Use it alone to close only those orders associated with the specified file.<br />

            If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DBClearOrderCondition">
      <summary>
            Clear the condition and scope for an order.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbClearRelation">
      <summary>
            Clear any active relations.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbClearRelation(XSharp.__Usual)">
      <summary>
            Clear any active relations.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbClearScope(XSharp.__Usual)">
      <summary>Clears the top and/or bottom scope. </summary>
      <param name="nScope">An optional constant that indicates which scope needs to be set.<br /><span><list type="table"><listheader><term>DEFINE</term><description>Description</description></listheader><item><term>SCOPE_TOP</term><description>The top scope.</description></item><item><term>SCOPE_BOTTOM</term><description>The bottom scope.</description></item><item><term>SCOPE_BOTH</term><description>The top and also the bottom scope. This is the <em>default</em>.</description></item></list></span></param>
      <returns>TRUE when the scope was cleared succesfully, otherwise FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCloseAll">
      <summary>
            Close all files in all work areas.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCloseArea">
      <summary>
            Close all files in a work area.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCloseArea(XSharp.__Usual)">
      <summary>
            Close all files in a work area.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCommit">
      <summary>
            Flush all pending updates in one work area.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCommit(XSharp.__Usual)">
      <summary>
            Flush all pending updates in one work area.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCommitAll">
      <summary>
            Flush all pending updates in all work areas.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbContinue">
      <summary>
            Resume a pending locate condition.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbContinue(XSharp.__Usual)">
      <summary>
            Resume a pending locate condition.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCopy(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Export records to a new database file.
        </summary>
      <param name="cTargetFile">
            The name of the target file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD.<br />
            For text files, it is .TXT.<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.  <br />

            	DBCreate() creates the specified file in ANSI or OEM character set format, based on the SetAnsi() setting.  (For more information, refer to the SetAnsi() function.)
        </param>
      <param name="acFields">
            A list of fields to copy to <paramref name="cTargetFile" />.<br />
            The default is all fields.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <param name="cDriver">
            The name of the RDD that will service the work area.<br />
            If not specified, the default RDD as determined by RDDSetDefault() is used.
        </param>
      <param name="acRDDs">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality.<br />

                This allows you to use RDDs with special capabilities, like encryption or decryption, in different work areas with different database drivers.  <br />

                These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument).<br />
                If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence.  <br />

                If <paramref name="acRDDs" /> is omitted, no additional RDDs are assumed.
            </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCopyDelim(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Export records to a new delimited text file.
        </summary>
      <param name="cTargetFile">
            The name of the target file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />
            For text files, it is .TXT.<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.
        </param>
      <param name="cDelim">
            The delimiter used to separate fields in <paramref name="cTargetFile" />.<br />
            The default delimiter is a double quote mark.
        </param>
      <param name="acFields">
            A list of fields to copy to <paramref name="cTargetFile" />.<br />
            The default is all fields.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCopySDF(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Export records to a new SDF file.
        </summary>
      <param name="cTargetFile">
            The name of the target file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />
            For text files, it is .TXT.<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.
        </param>
      <param name="acFields">
            A list of fields to copy to <paramref name="cTargetFile" />.<br />
            The default is all fields.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCopyStruct(System.String,XSharp.__Array)">
      <summary>
            Create an empty database file with field definitions from another database file.
        </summary>
      <param name="cTargetFile">
            The name of the target database file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.  <br />

            	DBCopyStruct() creates the specified file in ANSI or OEM character set format, based on the SetAnsi() setting.  (For more information, refer to the SetAnsi() function.)
        </param>
      <param name="acStruct">
            A one-dimensional array of field names to copy to the new database file.<br />
            The default is all fields.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCopyXStruct(System.String)">
      <summary>
            Copy the field definitions in a database file structure to a structure-extended file as data.
        </summary>
      <param name="cTargetFile">
            The name of the target structure-extended database file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.  <br />

            	DBCreate() creates the specified file in ANSI or OEM character set format, based on the SetAnsi() setting.  (For more information, refer to the SetAnsi() function.)
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCreate(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create a database file from a database structure array.
        </summary>
      <param name="cTargetFile">
            The name of the new database file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.  <br />

            	DBCreate() creates the specified file in ANSI or OEM character set format, based on the SetAnsi() setting.  (For more information, refer to the SetAnsi() function.)
        </param>
      <param name="aStruct">
            An array containing field descriptions in the format returned by DBStruct().<br />
            This array defines the structure for the new database file.
        </param>
      <param name="cDriver">
            The name of the RDD that will service the work area.<br />
            If not specified, the default RDD as determined by RDDSetDefault() is used.
        </param>
      <param name="lNew">
            TRUE opens the database file in a new work area (first available).  FALSE opens it in the current work area.  <paramref name="lNew" /> is useful only when <paramref name="lOpen" /> has a value of TRUE. The default is FALSE.
        </param>
      <param name="cAlias">
            The alias to be associated with the work area where the file is opened.  Within a single application, X# will not accept duplicate aliases.  <paramref name="cAlias" /> is useful only when <paramref name="lOpen" /> has a value of TRUE.<br />
            The default alias is the eight-letter database file name .
        </param>
      <param name="cDelim">
            The delimiter for fields within a delimited database file.<br />
            If you are using one of the supplied RDDs for processing .DBF files, the delimiter should be a NULL_STRING, which is the default if the<br />

            	argument is omitted.
        </param>
      <param name="lOpen">
            TRUE specifies that an existing database file be opened; FALSE specifies that that a new database file be opened.<br />
            The default is FALSE.<br />
            This can be used to open existing SDF and delimited files, which do not have a structure in the header — in which case, <paramref name="aStruct" /> should be used.
        </param>
      <param name="acRDDs">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality.<br />

                This allows you to use RDDs with special capabilities, like encryption or decryption, in different work areas with different database drivers.  <br />

                These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument).<br />
                If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence.  <br />

                If <paramref name="acRDDs" /> is omitted, no additional RDDs are assumed.
            </param>
      <returns>
            TRUE if the requested actions are successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCreateIndex(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create an index file and add an order to it.
        </summary>
      <param name="cIndexFile">
            The name of the target index file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension is determined by the RDD and can be obtained using DBOrderInfo(DBOI_INDEXEXT).<br />

            	In RDDs that support production indexes, the production index file is assumed if <paramref name="cIndexFile" /> is not specified.<br />

            	If <paramref name="cIndexFile" /> does not exist, it is created.<br />

            	If <paramref name="cIndexFile" /> exists, DBCreateIndex() must first obtain exclusive use of the file.<br />
            If successful, the file is overwritten without warning or error.<br />
            If the attempt is unsuccessful because, for example, the file is open by another process, NetErr() is set to TRUE.
        </param>
      <param name="cKeyValue">
            The order key expression specified as a string.<br />
            This is the key expression that is stored in the index file and used for such purposes as locating key values and recreating the order.<br />

            	Although <paramref name="cKeyValue" /> is optional, it is highly recommended that you specify this argument.  Without it, the order will be properly created using <paramref name="cbKeyValue" />, but the key expression will be stored in the index file as a NULL_STRING, rendering the order unusable for subsequent access.
        </param>
      <param name="cbKeyValue">
            The order key expression specified as a code block.<br />
            This code block is used to initially create the order.<br />
            If you do not supply <paramref name="cbKeyValue" />, it is macro-compiled from <paramref name="cKeyValue" /> (for example, {||&amp;<paramref name="cKeyValue" />}).<br />

            	The data type of the key expression and all other limitations, including the length of the key and the key expression, are determined by the RDD.
        </param>
      <param name="lUnique">
            TRUE creates a unique order by including only those records with unique key values; FALSE uses all records in the database file.<br />
            If <paramref name="lUnique" /> is omitted, the SetUnique() setting is used.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbCreateOrder(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create or replace an order in an index file.
        </summary>
      <param name="cOrder">
            The name of the order to be created.<br />
            For single-order index files, the file name without an extension or path, is the default order name.<br />
            For multiple-order index files, the order name is required.
        </param>
      <param name="cIndexFile">
            The name of the target index file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension is determined by the RDD and can be obtained using DBOrderInfo(DBOI_INDEXEXT).<br />

            	In RDDs that support production indexes , the production index file (that is, one with the same name as the database file) is assumed if <paramref name="cIndexFile" /> is not specified.<br />

            	If <paramref name="cIndexFile" /> does not exist, it is created.<br />

            	If <paramref name="cIndexFile" /> exists, the INDEX command must first obtain exclusive use of the file.<br />
            If the attempt is unsuccessful because, for example, the file is open by another process, NetErr() is set to TRUE.  <br />

            	If the attempt is successful and the RDD specifies that index files can contain only a single order, the current contents of the file is overwritten with the new order.<br />
            If the RDD specifies that index files can contain multiple orders, the order is added to <paramref name="cIndexFile" /> if it does not already exist; otherwise it is replaced.
        </param>
      <param name="cKeyValue">
            The order key expression specified as a string.<br />
            This is the key expression that is stored in the index file and used for such purposes as locating key values and recreating the order.<br />

            	Although <paramref name="cKeyValue" /> is optional, it is highly recommended that you specify this argument.  Without it, the order will be properly created using <paramref name="cbKeyValue" />, but the key expression will be stored in the index file as a NULL_STRING, rendering the order unusable for subsequent access.
        </param>
      <param name="cbKeyValue">
            The order key expression specified as a code block.<br />
            This code block is used to initially create the order.<br />
            If you do not supply <paramref name="cbKeyValue" />, it is macro-compiled from <paramref name="cKeyValue" /> (for example, {||&amp;<paramref name="cKeyValue" />}).<br />

            	The data type of the key expression and all other limitations, including the length of the key and the key expression, are determined by the RDD.
        </param>
      <param name="lUnique">
            TRUE creates a unique order by including only those records with unique key values; FALSE uses all records in the database file.<br />
            If <paramref name="lUnique" /> is omitted, the SetUnique() setting is used.Note that keys from deleted records are also included in the index, and may hide keys from non-deleted records.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbDelete">
      <summary>
            Mark the current record for deletion.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbDeleteOrder(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Remove an order from an open index file.
        </summary>
      <param name="uOrder">
            The name of the order to be removed or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.<br />
            If the order cannot be found, a runtime error is raised.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbDriver">
      <summary>
            Return the default RDD for the application.
        </summary>
      <returns>
            The name of the RDD that will be used to activate and manage applications when no driver is explicitly specified.<br />
            If this RDD is not available to the application, the call has no effect.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbEval(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Evaluate a code block for each record that matches a specified scope and/or condition.
        </summary>
      <param name="cbExecute">The code block to execute for each record that matches the scope and conditions.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DBF">
      <summary>
            Return the name of the alias.
            Note:  DBF() is a compatibility function and is no longer recommended.<br />
            It is superseded by Alias0().  See Alias0() for more information.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The alias of the work area as a string.<br />
            If there is no active database file in the work area, DBF() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DBF(XSharp.__Usual)">
      <summary>
            Return the name of the alias.
            Note:  DBF() is a compatibility function and is no longer recommended.<br />
            It is superseded by Alias0().  See Alias0() for more information.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The alias of the work area as a string.<br />
            If there is no active database file in the work area, DBF() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbFieldInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return and optionally change information about a field.
        </summary>
      <param name="kInfoType">
            Specifies the type of information.<br />
            The constants are described in the Constants section below.  Note, however, that not all constants are supported for all RDDs.<br />

            	Important!  DBS_USER is a constant that returns the minimum value that third-party RDD developers can use for defining new <paramref name="kInfoType" /> parameters.  Values less than DBS_USER are reserved for Computer Associates development.
        </param>
      <param name="nFieldPos">
            The position of the field in the database file structure or a numeric pointer to a BLOB.  Only certain <paramref name="kInfoType" /> constants designed to work with BLOB fields — all noted in the Constants section below — allow specifying the field using a pointer; all others require specifying the field by its position.
        </param>
      <param name="uNewSetting">
            If specified, this parameter is used to change the value of a setting.<br />
            The data type (and whether <paramref name="uNewSetting" /> can be specified), depends on the <paramref name="kInfoType" /> constant and is documented in the Constants section below.<br /><br />

            	DBS_ALIAS	Returns and optionally changes an alternate name (or alias) by which a field can be referenced (by default, same as DBS_NAME).<br />
            Using the <paramref name="uNewSetting" /> argument, you can specify a string that you can subsequently use to access the indicated field.<br />

            	DBS_BLOB_DIRECT_LEN		Returns the length of data in a BLOB as an unsigned long integer, without referencing a particular memo field.<br />
            For strings, the return value is the length of the string in bytes; for arrays, it is the number of elements in the first dimension; for all other data types, it returns -1.  With this constant, you must specify the BLOB using a numeric pointer obtained from BLOBDirectPut(), BLOBDirectImport(), or DBFieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />).<br />

            	DBS_BLOB_DIRECT_TYPE		To determine the data type of BLOB data, without reference to a particular memo field, use DBFieldInfo(DBS_BLOB_DIRECT_TYPE, ...).  With this constant, you must specify the BLOB using a numeric pointer obtained from BLOBDirectPut(), BLOBDirectImport(), or DBFieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />).<br />

            	See DBS_BLOB_TYPE for a table of possible return values.<br />

            	DBS_BLOB_LEN	Returns the length of the BLOB data in a memo field as an unsigned long integer.<br />
            For strings, the return value is the length of the string in bytes; for arrays, it is the number of elements in the first dimension; for all other data types, it returns -1.<br />

            	Note:DBFieldInfo(DBS_BLOB_LEN, ...) has a performance advantage over the Len() function.<br />

            	DBS_BLOB_POINTER		Returns a numeric pointer to the BLOB data associated with a memo field.<br />

            	DBS_BLOB_TYPE	Unlike memo fields maintained in .DBT files, BLOB files allow you to store many different types of data in memo fields.  However, the standard functions for determining data types, such as ValType(), simply treat BLOB fields as regular memo fields.<br />
            To determine the actual type of BLOB data stored in a memo field, use DBFieldInfo(DBS_BLOB_TYPE, ...).  <br />

            	The data type of the return value is string and can be interpreted using this table:<br />

            	Returns	Meaning	<br />

            	?	Blank (empty/uninitialized field)	<br />

            	A	Array	<br />

            	C	String	<br />

            	D	Date	<br />

            	E	Error	<br />

            	L	Logical	<br />

            	N	Numeric	<br />

            	U	Undefined (NIL was stored)	<br />

            	DBS_DEC	Returns the number of decimal places for the field.<br />

            	DBS_LEN	Returns the length of the field.<br />

            	DBS_NAME	Returns the name of the field.<br />

            	DBS_PROPERTIES	Returns the number of properties defined for a field.<br />

            	DBS_TYPE	Returns the data type of the field.
        </param>
      <returns>
            If <paramref name="uNewSetting" /> is not specified, DBFieldInfo() returns the current setting.<br />
            If <paramref name="uNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DBFileCopy(System.IntPtr,System.String,System.String)"></member>
    <member name="M:XSharp.RT.Functions.DbFilter">
      <summary>
            Return a filter.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The filter condition defined in a work area.<br />
            If no filter has been set, DBFilter() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbFilter(XSharp.__Usual)">
      <summary>
            Return a filter.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The filter condition defined in a work area.<br />
            If no filter has been set, DBFilter() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbGetSelect">
      <summary>
            Return the work area number.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            A number that indicates the workarea number.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbGoBottom">
      <summary>
            Move to the last logical record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbGoBottom(XSharp.__Usual)">
      <summary>
            Move to the last logical record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbGoto(XSharp.__Usual)">
      <summary>
            Move to a record specified by record number.
        </summary>
      <param name="uRecID">
            The record number to go to.<br />
            If <paramref name="uRecID" /> does not exist, the work area is positioned to LastRec() + 1, and both EOF() and BOF() return TRUE.
        </param>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbGoto(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Move to a record specified by record number.
        </summary>
      <param name="uRecID">
            The record number to go to.<br />
            If <paramref name="uRecID" /> does not exist, the work area is positioned to LastRec() + 1, and both EOF() and BOF() return TRUE.
        </param>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbGoTop">
      <summary>
            Move to the first logical record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbGoTop(XSharp.__Usual)">
      <summary>
            Move to the first logical record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbInfo(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return and optionally change information about a database file open in a work area.
        </summary>
      <param name="kInfoType">
            Specifies the type of information.<br />
            The constants are described in the Constants section below.  Note, however, that not all constants are supported for all RDDs.<br />

            	Important!  DBI_USER is a constant that returns the minimum value that third-party RDD developers can use for defining new <paramref name="kInfoType" /> parameters.  Values less than DBI_USER are reserved for Computer Associates development.
        </param>
      <param name="uNewSetting">
            If specified, this parameter is used to change the value of a setting.<br />
            The data type (and whether <paramref name="uNewSetting" /> can be specified), depends on the <paramref name="kInfoType" /> constant and is documented in the Constants section below.<br /><br />

            	DBI_ALIAS	Returns the alias name of the work area as a string.<br />

            	DBI_BLOB_HANDLE	Returns an integer representing the DOS file handle for a BLOB file.<br />
            The constant is most often used in conjunction with DBFieldInfo(DBS_BLOB_LEN, ...) and DBFieldInfo(DBS_BLOB_POINTER, ...) to directly access BLOB fields using low-level functions, such as FRead().<br />

            	DBI_BLOB_INTEGRITY		Tests a BLOB file for the integrity of its internal tables and returns a logical value indicating the success (TRUE) or failure (FALSE) of the integrity check.<br />
            This should not generally be necessary, but it is handy if the file's integrity is in question for any reason.<br />
            This function does not test the integrity between the .DBF and the BLOB file.<br />

            	If the integrity check fails, you can run DBInfo(DBI_BLOB_RECOVER), which will automatically correct the BLOB file's tables, however, it will abandon some space within the file that would otherwise be reused.<br />

            	Important!  DBInfo(DBI_BLOB_INTEGRITY) is a disk intensive operation and may slow down processing of the work area significantly, especially on a busy network.<br />

            	DBI_BLOB_RECOVER	Recovers a damaged BLOB file by correcting its internal tables and returns NIL.  You should run this function only if DBInfo(DBI_BLOB_INTEGRITY) returns FALSE.  Note that after running DBInfo(DBI_BLOB_RECOVER), the BLOB file loses some size efficiency.<br />

            	DBI_BOF	Returns a logical value indicating the work area's beginning-of-file status (see BOF()).<br />

            	DBI_CANPUTREC	Returns a logical value indicating whether the work area supports putting records.<br /><br />

            	DBI_CHILDCOUNT	Returns the number of relations set from this work area.<br />

            	BI_DB_VERSION	Returns the version number of the host RDD (CAVORDDB.DLL or CAVORDD.DLL).<br />

            	DBI_DBFILTER	Returns the filter expression as a string (see DBFilter()).<br />

            	DBI_EOF	Returns a logical value indicating the work area's end-of-file status (see EOF()).<br />

            	DBI_FCOUNT	Returns the number of fields (see FCount()).<br />

            	DBI_FILEHANDLE	Returns an integer representing the DOS file handle for this database file.<br />

            	DBI_FOUND	Returns a logical value indicating the success or failure of the last seek operation in the work area (see Found()).<br />

            	DBI_FULLPATH	Returns the full path name of opened database file.<br />

            	DBI_GETDELIMITER	Returns the default delimiter.<br />

            	DBI_GETHEADERSIZE<br />

            	Returns the header size of the file (see Header()).<br />

            	DBI_GETLOCKARRAY	Returns the array of locked records.<br />

            	DBI_GETRECSIZE	Returns the record size of the file (see RecSize()).<br />

            	DBI_GETSCOPE	Returns the locate condition as a code block.<br />

            	DBI_ISANSI	Returns the ANSI flag of the database file (TRUE for ANSI and FALSE for OEM).<br />

            	DBI_ISDBF	Returns a logical value indicating whether the RDD provides support for the .DBF file format.<br />

            	DBI_ISFLOCK	Returns the file lock status.<br />

            	DBI_LASTUPDATE	Returns the last date on which the file was updated (see LUpdate()).<br />

            	DBI_LOCKCOUNT	Returns the number of locked records.<br />

            	DBI_LOCKOFFSET	Returns the current locking offset as a numeric value.<br />

            	DBI_MEMOBLOCKSIZE<br />

            	Returns the block size for the memo file associated with this database.<br />

            	DBI_MEMOEXT	Returns the default extension for the memo file associated with this database.<br />

            	DBI_MEMOHANDLE	Returns an integer representing the DOS file handle for the memo file associated with this database file.<br />

            	DBI_RDD_LIST	Returns the _RDDLIST structure containing the list of RDDs used for the current workarea.<br />

            	DBI_RDD_VERSION	Returns the version number of the RDD for this database.<br />

            	DBI_SETDELIMITER	Sets the default delimiter.<br />

            	DBI_SHARED	Returns the shared flag value.<br />

            	DBI_TABLEEXT	Returns the database file extension.<br />

            	DBI_VALIDBUFFER	Returns a logical value indicating whether the current buffer is valid.
        </param>
      <returns>
            If <paramref name="uNewSetting" /> is not specified, RDDInfo() returns the current setting.<br />
            If <paramref name="uNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbJoin(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create a new database file by merging records/fields from two work areas.
        </summary>
      <param name="cAlias">
            The alias identifier for the work area to join with.<br />
            If there is no open database associated with <paramref name="cAlias" />, a runtime error is raised.
        </param>
      <param name="cTargetFile">
            The name of the target database file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.
        </param>
      <param name="acFields">
            The projection of fields from both work areas into the new database file.<br />
            To specify fields in the secondary work area, reference them with the alias operator (-&gt;).<br />
            If <paramref name="acFields" /> is not specified, all fields from the source database file are included in the target database file.
        </param>
      <param name="cbForCondition">
        <span>
            A code block that defines a condition that each record within the scope must meet in order to be processed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbJoinAppend(System.UInt32,XSharp._JoinList)">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbLocate(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Search for the first record that matches the specified condition and scope.
        </summary>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbMemoExt(XSharp.__Usual)">
      <summary>This returns the memo extension of the file in the current workarea. For example DBT or FPT.</summary>
      <returns>The memo extension of the file (if any). When no file is open than the default memo extension for the default RDD is returned.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbMemoField(XSharp.__Usual)">
      <summary>
            Return the memo field pointer of a DBF record.
        </summary>
      <param name="uField">
            The name, number, or symbol representing the desired memo field.<br />
            If omitted, defaults to the first memo field in the database, if any.
        </param>
      <returns>
            The contents of the specified memo field within the DBF record, if successful; otherwise, NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbOrderInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return and optionally change information about orders and index files.
        </summary>
      <param name="kInfoType">
            Specifies the type of information.<br />
            The constants are listed below.  Note, however, that not all constants are supported for all RDDs.<br />

            	Important!  DBOI_USER is a constant that returns the minimum value that third-party RDD developers can use for defining new <paramref name="kInfoType" /> parameters.  Values less than DBOI_USER are reserved for Computer Associates development.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <param name="uOrder">
            The name of the order about which you want to obtain information or a number representing its position in the order list.  (For single-order index files, the order name is the eight-letter index file name.)<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.<br />

            	If no index file or order is specified, the controlling order is assumed.
        </param>
      <param name="uNewSetting">
            If specified, this parameter is used to change the value of a setting.<br />
            The data type (and whether <paramref name="uNewSetting" /> can be specified), depends on the <paramref name="kInfoType" /> constant and is documented in the Constants section below.<br />

            	DBOI_BAGEXT	Returns the default order bag file extension as a string. This is similar to DBOI_INDEXEXT except it applies only to those RDD's supporting multiple orders such as DBFCDX.<br />

            	DBOI_BAGNAME	Returns the name of the specified order bag file as a string. This is similar to DBOI_INDEXNAME except it applies only to those RDD's supporting multiple orders such as DBFCDX.<br />

            	DBOI_CONDITION	Returns the for condition of the specified order as a string.<br />

            	DBOI_CUSTOM	Returns and optionally sets the logical flag indicating whether the specified order is custom built (for RDDs that support custom built orders).  Note that although you can turn the custom built flag on for a standard order by specifying TRUE for the <paramref name="uNewSetting" /> argument, you cannot turn a custom built order into a standard order.  Specifying FALSE for <paramref name="uNewSetting" /> is the same as not specifying the argument at all — both return the current setting.<br />

            	DBOI_EXPRESSION	Returns the order key expression of the specified order as a string.<br /><br />

            	DBOI_FULLPATH	Returns the full path of the specified index file as a string.<br />

            	DBOI_HPLOCKING	Returns a logical flag indicating whether the specified index file uses the high performance index locking schema (see IndexHPLock() function).<br />

            	DBOI_INDEXEXT	Returns the default index file extension as a string.<br />

            	DBOI_INDEXNAME	Returns the name of the specified index file as a string.<br />

            	DBOI_ISCOND	Returns a logical flag that determines whether the specified order was defined using a for condition.<br />

            	DBOI_ISDESC	Returns the logical flag that determines if the specified order is descending.<br />
            For drivers that support dynamically setting the descending flag at runtime, specify the new value as a logical, using DBOrderInfo(DBOI_ISDESC, [<paramref name="cIndexFile" />], [<paramref name="cOrder" /> | <paramref name="nPosition" />], <paramref name="lNewSetting" />).<br />
            The current setting is returned before it is changed.<br />

            	DBOI_KEYCOUNT	Returns the number of keys in the specified order.<br />

            	DBOI_KEYDEC	Returns the number of decimals in the key of the specified order.<br />

            	DBOI_KEYSINCLUDED<br />

            	Returns the number of keys included in the specified order so far.<br />
            This is primarily useful for conditional orders.<br />
            It can be used during the status display process (with the EVAL clause of the INDEX command).<br />

            	DBOI_KEYSIZE	Returns the size of the key in the specified order as a number.<br />

            	DBOI_KEYTYPE	Returns the data type of the key in the specified order as a string.<br />

            	DBOI_KEYVAL	Returns the key value of the current record in the specified order.<br />

            	DBOI_LOCKOFFSET	Returns the locking offset (see NewIndexLock() function) for the specified index file as a numeric value.<br />

            	DBOI_NAME	Returns the name of the specified order as a string.<br />

            	DBOI_NUMBER	Returns the numeric position of the specified order in the order list.<br />

            	DBOI_ORDERCOUNT<br />

            	Returns the number of orders defined in the specified index file.<br />

            	DBOI_POSITION	Returns the logical record number of the current record within the specified order.<br />

            	DBOI_RECNO	Returns the physical record number of the current record within the specified order.<br />

            	DBOI_SCOPEBOTTOM<br />

            	Returns the bottom boundary of the scope for the specified order.<br />

            	DBOI_SCOPETOP	Returns the top boundary of the scope for the specified order.<br />

            	DBOI_SETCODEBLOCK<br />

            	Returns the key for the specified order as a code block.<br />

            	DBOI_UNIQUE	Returns a logical flag indicating whether the specified order has the unique attribute set.
        </param>
      <returns>
            If <paramref name="uNewSetting" /> is not specified, DBOrderInfo() returns the current setting.<br />
            If <paramref name="uNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbPack">
      <summary>
            Remove all records marked for deletion from a database file, rebuild all active orders, and recover all physical space occupied by the deleted records.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbPack(XSharp.__Usual)">
      <summary>
            Remove all records marked for deletion from a database file, rebuild all active orders, and recover all physical space occupied by the deleted records.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbRecall">
      <summary>
            Restore the current record if it has been marked for deletion.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbRecall(XSharp.__Usual)">
      <summary>
            Restore the current record if it has been marked for deletion.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbRecordInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Retrieve field definition information about a record.
        </summary>
      <param name="kInfoType">
            Determines what type of information is retrieved.<br />
            The constants are listed below.
        </param>
      <param name="uRecID">
            The ID of the record that you want information on.<br />
            If omitted, the current record is reported on.
        </param>
      <param name="uNewValue">This parameter is reserved for RDDs that allow you to change the information rather than just retrieve it.  None of the supplied RDDs support this argument.  Either omit the argument or specify it as NIL.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbReindex">
      <summary>
            Rebuild all orders in the order list of a work area.
        </summary>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbRelation(XSharp.__Usual)">
      <summary>
            Return the linking expression of a specified relation.
        </summary>
      <param name="nRelation">
            The position of the desired relation in the list of current work area relations.<br />
            The relations are numbered according to the order in which they were defined by relation setting.
        </param>
      <returns>
            The linking expression defined to <paramref name="nRelation" />.<br />
            If there is no relation set for <paramref name="nRelation" />, DBRelation() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbRLock(XSharp.__Usual)">
      <summary>
            Lock a record in a shared database file, optionally retaining previous record locks.
        </summary>
      <param name="uRecId">
            The ID (usually a record number) of the record to be locked.<br />
            If specified, record locks held by the current process are retained.<br />
            If not specified, all locks held by the current process are released and the current record is assumed.
        </param>
      <returns>
            TRUE if the record lock is obtained; otherwise, FALSE.<br />
            An attempt to lock a record in an empty database returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbRLockList">
      <summary>
            Get a list of locked records.
        </summary>
      <returns>
            An array with the numbers of the currently locked records.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbRSelect(XSharp.__Usual)">
      <summary>
            Return the work area number of a relation.
        </summary>
      <param name="nRelation">
            The position of the desired relation in the list of work area relations.<br />
            The relations are numbered according to the order in which they were defined by relation setting.
        </param>
      <returns>
            The work area number of the specified relation.<br />
            If there is no relation set for <paramref name="nRelation" />, DBRSelect() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbRUnLock(XSharp.__Usual)">
      <summary>
            Release all or specified record locks.
        </summary>
      <param name="uRecID">
            A unique value guaranteed by the structure of the data file to reference a specific item in a data source (database).  In a database file, <paramref name="uRecID" /> is the record number.  In other data formats, <paramref name="uRecID" /> is the unique primary key value.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbScope(XSharp.__Usual)">
      <summary>Checks if a scope is set in a work area.</summary>
      <param name="uScope">An optional constant that indicates which scope needs to be set.<br /><span><list type="table"><listheader><term>DEFINE</term><description>Description</description></listheader><item><term>SCOPE_TOP</term><description>The top scope.</description></item><item><term>SCOPE_BOTTOM</term><description>The bottom scope.</description></item><item><term>SCOPE_BOTH</term><description>The top and also the bottom scope. This is the <em>default</em>.</description></item></list></span><br /></param>
      <returns>
        <span>
      The return value depends on the parameter that is passed in:<br /><list type="table"><listheader><term>Parameter</term><description>Return value</description></listheader><item><term>no parameter</term><description>Returns .T. (true) if a scope is defined, and .F. when no scope is defined.</description></item><item><term>SCOPE_TOP</term><description>Returns the top scope value, or NIL if no top scope is set.</description></item><item><term>SCOPE_BOTTOM</term><description>Returns the bottom scope value, or NIL if no bottom scope is set.</description></item><item><term>SCOPE_BOTH</term><description>Returns an array with 2 elements with the Top scope in element 1 and the Bottom scope in element 2. 
          When a scope is not set then the value NIL is stored in the array</description></item></list></span>
      </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSeek(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Move to the record having the specified key value in the controlling order.
        </summary>
      <param name="uKey">Specifies the key value associated with the desired record.</param>
      <param name="lSoftSeek">
            Determines how the work area is positioned if the specified key value is not found: TRUE performs a soft seek; FALSE does not.<br />
            If <paramref name="lSoftSeek" /> is omitted, the current SetSoftSeek() setting is used.
        </param>
      <param name="lLast">
            TRUE seeks the last occurrence of the specified key value.  FALSE, the default, seeks the first occurrence.  <paramref name="lLast" /> only applies to CDX indexes.
        </param>
      <returns>
            TRUE if the specified key value was found; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSelect(XSharp.__Usual)">
      <summary>
            Select a new work area and retrieve the current work area.
        </summary>
      <param name="nNew">The work area number for the new work area.</param>
      <returns>
            The work area number for the old work area.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSelectArea(XSharp.__Usual)">
      <summary>
            Change the current work area.
        </summary>
      <param name="uArea">A number that specifies the work area to be selected. or the alias of the work area to be selected.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetDriver(XSharp.__Usual)">
      <summary>
            Return and optionally change the default RDD driver for the application.
            Note:  DBSetDriver() is a compatibility function and is no longer recommended.<br />
            It is superseded by the RDDSetDefault() function.  See RDDSetDefault() for more information.
        </summary>
      <param name="cNewSetting">
            The name of the RDD that will be used to activate and manage applications when no driver is explicitly specified.<br />
            If this RDD is not available to the application, the call has no effect.
        </param>
      <returns>
            If <paramref name="cNewSetting" /> is not specified, DBSetDriver() returns the current default RDD.<br />
            If <paramref name="cNewSetting" /> is specified, the previous default RDD is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetFilter(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a filter condition.
        </summary>
      <param name="cbCondition">A code block that expresses the filter condition in executable form.</param>
      <param name="cCondition">
            An optional character value that expresses the filter condition in textual form.<br />
            If <paramref name="cCondition" /> is omitted, the DBFilter() function will return an empty string for the work area.
        </param>
      <returns>
            TRUE if the current record meets the filter condition; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetFound(System.Boolean)">
      <summary>
            Set the found flag.
        </summary>
      <param name="lFnd">The new setting for the found flag: TRUE or FALSE</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetIndex(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Open an index file and add all its orders to the order list in a work area.
        </summary>
      <param name="uOrder">Order in the index file to activate. When not specified then the first order in the file becomes active.</param>
      <param name="cIndexFile">
            The name of the index files to open, including an optional drive, directory, and extension for each.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension is determined by the RDD and can be obtained using DBOrderInfo(DBOI_INDEXEXT).<br />

            	If <paramref name="cIndexFile" /> does not exist, a runtime error is raised.<br />
            If it exists, this function attempts to open the file in the same mode as the corresponding database file.<br />
            If access is denied because, for example, another process is using the file and this one is asking for exclusive use, NetErr() is set to TRUE.<br />
            Otherwise, the file open is successful.<br />

            	Concurrency conflicts with index files are rare since they should be used with only one database file.<br />
            If a concurrency problem arises, it will normally be when you attempt to open the database file.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetOrder(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the controlling order for a work area.
        </summary>
      <param name="uOrder">
            The name of the new controlling order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Specifying a value of 0 has the special effect of returning the database file to its natural order.  Specifying an invalid value will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetOrderCondition(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the condition and scope to use in creating the next order.
        </summary>
      <param name="cForCondition">
            A string that specifies the for condition for the order.<br />
            This string is returned by DBOrderInfo(DBOI_CONDITION, [<paramref name="cIndexFile" />], <paramref name="cOrder" />).<br />
            If you do not need this information, you can specify a NULL_STRING.
        </param>
      <param name="cbForCondition">
            A code block that defines a condition (called the for condition) that each record within the scope must meet in order to be processed.<br />
            If a record does not meet the specified condition, it is ignored and the next record is processed.  Duplicate key values are not added to the index file when a for condition is used.<br />
            The default is NIL.<br />

            	This condition (not <paramref name="cForCondition" />) is the one that is actually used to create the order.<br />
            Unlike the while condition and other scoping information, the for condition is stored as part of the index file and is used when updating or rebuilding the order with DBReindex().<br />
            Any limitations on the for condition are determined by the RDD.
        </param>
      <param name="lAll">
            A value of TRUE specifies a scope of all records.<br />
            Use FALSE if you want to indicate other record scoping conditions (that is, <paramref name="nNext" />, <paramref name="nRecord" />, or <paramref name="lRest" />).<br />
            The default is FALSE.
        </param>
      <param name="cbWhileCondition">
        <span>
            A code block that defines another condition that each record must meet in order
            to be processed.
            As soon as a record is encountered that causes the condition to fail, the operation
            terminates.<br />

            If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

            You define the scope using one of these three, mutually exclusive arguments.<br />
            The default is all records.
        </span>
        <br />

            The while condition is used only to create the order.<br />
            It is not stored in the index file and not used for updating or reindexing purposes.<br />
            The default is NIL.
        </param>
      <param name="cbEval">
            A code block that is evaluated at intervals specified by <paramref name="nInterval" />.<br />
            This is useful in producing a status bar or odometer that monitors the ordering progress.<br />
            The return value of <paramref name="cbEval" /> must be a logical value.<br />
            If <paramref name="cbEval" /> returns FALSE, indexing halts.<br />
            The default is NIL.
        </param>
      <param name="nInterval">
            A numeric expression that determines the number of times <paramref name="cbEval" /> is evaluated.<br />
            This argument offers a performance enhancement by evaluating the condition at intervals instead of for every record processed.<br />
            To step through every record, you can specify a value of 0.<br />
            The default is 0.
        </param>
      <param name="nStart">
            The starting record number.<br />
            To start at the beginning of the file, specify a value of 0.<br />
            The default is 0.<br />

            	You define the scope using one of these three, mutually exclusive arguments (use 0 or FALSE for the others).<br />
            The default is all records.  Record scoping information is used only to create the order.<br />
            It is not stored in the index file and not used for index updates and reindexing purposes.
        </param>
      <param name="nNext">
            The number of records to process, starting at <paramref name="nStart" />.  Specify 0 to ignore this argument.
        </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
            TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
        </param>
      <param name="lDescend">
            Specifies whether the keyed pairs be sorted in decreasing or increasing order of value.  TRUE results in descending order.  FALSE results in ascending order.<br />
            The default is FALSE.
        </param>
      <param name="lAdditive">
            Specifies whether open orders should remain open while the new order is being created.  TRUE specifies that they should remain open.  FALSE specifies that all open order should be closed.<br />
            The default is FALSE.
        </param>
      <param name="lCurrent">
            Specifies whether only records in the controlling order — and within the current range as specified by OrdSetScope() — will be included in this order.  TRUE specifies that the controlling order and range should be used to limit the scope of the newly created order.  FALSE specifies that all records in the database file are included in the order.<br />
            The default is FALSE.
        </param>
      <param name="lCustom">
            Specifies whether the new order will be a custom built order (for RDDs that this feature).  TRUE specifies that a custom built order will be created.<br />
            A custom built order is initially empty, giving you complete control over order maintenance.<br />
            The system does not automatically add and delete keys from a custom built order.  Instead, you explicitly add and delete keys using OrdKeyAdd() and OrdKeyDel().  FALSE specifies a standard, system-maintained order.<br />
            The default is FALSE.
        </param>
      <param name="lNoOptimize">
            Specifies whether the FOR condition will be optimized (for RDDs that support this feature).  TRUE optimizes the FOR condition, and FALSE does not.<br />
            The default is FALSE.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetRelation(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Relate a specified work area to the current work area.
        </summary>
      <param name="xAlias">The number of the child work area., or the alias of the child work area.</param>
      <param name="cbKey">A code block that expresses the relational expression in executable form.</param>
      <param name="cKey">
            An optional character value that expresses the relational expression in textual form.<br />
            If <paramref name="cKey" /> is supplied, it must be equivalent to <paramref name="cbKey" />.<br />
            If <paramref name="cKey" /> is omitted, DBRelation() returns a NULL_STRING for the relation.
        </param>
      <param name="cName">An optional name for the relation. Defaults to ParentName + "_" + ChildName.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetScope(System.Int32,XSharp.__Usual)">
      <summary>Sets scope values.</summary>
      <param name="nScope">A constant that indicates which scope needs to be set.<br /><span><list type="table"><listheader><term>DEFINE</term><description>Description</description></listheader><item><term>SCOPE_TOP</term><description>The top scope.</description></item><item><term>SCOPE_BOTTOM</term><description>The bottom scope.</description></item><item><term>SCOPE_BOTH</term><description>The top and also the bottom scope. This is the <em>default</em>.</description></item></list></span></param>
      <param name="uValue">The value that needs to be set.
            The type of the value must match the type of the index expression.</param>
      <returns>TRUE when the scope was set succesfully and when the record pointer has been successfully moved to the first record in the scope, otherwise FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSetSelect(XSharp.__Usual)">
      <summary>
            Select a new work area.
        </summary>
      <param name="nNewArea">The number of the new work area.</param>
      <returns>
            The newly selected work area.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSkip(XSharp.__Usual)">
      <summary>
            Move the record pointer relative to the current record.
        </summary>
      <param name="nRecords">
            The number of logical records to move, relative to the current record.<br />
            A positive value means to skip forward, and a negative value means to skip backward.<br />
            If <paramref name="nRecords" /> is omitted, a value of 1 is assumed.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSort(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Copy records to a database file in sorted order.
        </summary>
      <param name="cTargetFile">
            The name of the target database file to write the sorted records, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.
        </param>
      <param name="acFields">The sort keys, specified as an array of field names.  You may optionally add, after the field name, /A (to sort in dictionary order), /C (to ignore capitalization), or /D (to sort in descending order). The default setting is /A.</param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <param name="lDesc">Should the default sort order be Descending</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbStruct">
      <summary>
            Create an array containing the structure of a database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The structure of the database file in an array whose length is equal to the number
            of fields in the database file.<br />
            Each element of the array is a subarray containing information for one field.<br />
            The subarrays have the following format:
            Constant	Attribute	
            DBS_NAME	cName	
            DBS_TYPE	cType	
            DBS_LEN	nLength	
            DBS_DEC	nDecimals	
            DBS_ALIAS	cAlias	
            If there is no database file in use in the work area, DBStruct() will generate
            a runtime error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbStruct(XSharp.__Usual)">
      <summary>
            Create an array containing the structure of a database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The structure of the database file in an array whose length is equal to the number
            of fields in the database file.<br />
            Each element of the array is a subarray containing information for one field.<br />
            The subarrays have the following format:
            Constant	Attribute	
            DBS_NAME	cName	
            DBS_TYPE	cType	
            DBS_LEN	nLength	
            DBS_DEC	nDecimals	
            DBS_ALIAS	cAlias	
            If there is no database file in use in the work area, DBStruct() will generate
            a runtime error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbSymSelect(XSharp.__Usual)">
      <summary>
            Select a new work area by specifying its alias as a symbol.
        </summary>
      <param name="symAlias">The alias of the work area you want to select.</param>
      <returns>
            The number of the new work area selected.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbTotal(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Summarize records by key value to a database file.
        </summary>
      <param name="cTargetFile">
            The name of the target database file to write the totaled records, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.
        </param>
      <param name="cbKey">A key expression specified as a code block.</param>
      <param name="acFields">The fields to be totaled specified as an array of strings.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbTrans(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Transfer records to an open database file.
        </summary>
      <param name="wTarget">The work area number of the destination file.</param>
      <param name="aStruct">
            An array containing field descriptions in the format returned by DBStruct().<br />
            This array contains the structure of the source file.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbUnLock">
      <summary>
            Release all locks for a work area.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbUnLock(System.Int32)">
      <summary>
            Release all locks for a work area.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbUnLockAll">
      <summary>
            Release all locks for all work areas.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbUpdate(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Replace fields in the current work area with values from another work area, based on the specified key expression.
        </summary>
      <param name="cAlias">
            The alias identifier for the source work area used to update records in the current work area.<br />
            If there is no open database file associated with the specified alias, a runtime error is raised.
        </param>
      <param name="cbKey">A code block defining the expression that defines matching records in the source work area.</param>
      <param name="lRand">
            Random access flag.<br />
            If TRUE, the current work area must be ordered (using an index order) by <paramref name="cbKey" /> but the source work area records can be in any order.<br />
            If FALSE, both the current work area and the source work area must be ordered (logically or physically) by Eval(<paramref name="cbKey" />).
        </param>
      <param name="cbReplace">A code block defining how fields in the current work area should be replaced.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbUseArea(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Open a database file.
        </summary>
      <param name="lNewArea">
            Specifies whether the file is to be opened in a new work area.  TRUE selects the lowest numbered unoccupied work area as the current work area before the use operation.<br />
            If <paramref name="lNewArea" /> is FALSE or omitted, the current work area is used (if the work area is occupied, it is closed first).
        </param>
      <param name="cDriver">
            The name of the RDD that will service the work area.<br />
            If not specified, the default RDD as determined by RDDSetDefault() is used.
        </param>
      <param name="cDataFile">
            The name of the database file to open, including an optional drive, directory, and extension.<br />
            If the database file has a corresponding memo file, it is also opened.<br />
            The default extension for database and memo files is determined by the RDD.<br />

            	If the database file or its corresponding memo file does not exist, a runtime error is raised.  See SetDefault() and SetPath() for file searching and creation rules.
        </param>
      <param name="cAlias">
            An identifier name to associate with the work area when <paramref name="cDataFile" /> is opened.<br />
            If not specified, the alias defaults to the database file name.  Duplicate alias names are not allowed within a single application.
        </param>
      <param name="lShared">
            TRUE attempts to open <paramref name="cDataFile" /> for shared use.  FALSE attempts to open <paramref name="xcDataFile" /> for exclusive (non-shared) use, denying all other processes access until the database file is closed.If <paramref name="lShared" /> is omitted, the current SetExclusive() setting determines whether shared access is allowed.  However, it is highly recommended that you specify the open mode as part of the USE command rather than relying on SetExclusive() to determine it for you.
        </param>
      <param name="lReadOnly">
            TRUE attempts to open <paramref name="cDataFile" /> with a read-only attribute, prohibiting updates to the work area.  FALSE attempts to open <paramref name="cDataFile" /> with a read-write attribute, allowing updates.<br />
            If <paramref name="lReadOnly" /> is omitted, the default value is FALSE.<br />
            If <paramref name="cDataFile" /> cannot be accessed using the indicated attribute, a runtime error is raised.
        </param>
      <param name="aStruct">
            An array containing field descriptions in the format returned by DBStruct().<br />

            	This argument does not apply to DBF files.<br />
            It is intended for use with file formats that do not store field descriptions.<br />
            For example, if you use an RDD that supports SDF or delimited files, you can use this argument to define the file structure, which can then be used with other commands or functions to access the field descriptions.  Here is an example of this argument:<br /><code language="X#">
                	{"First", "C", 35, 0};<br />

                	{"Last", "C", 35, 0};<br />

                	{"Birthday", "D", 8, 0}}<br />

                	? First					// Return: Josie
            </code></param>
      <param name="cDelim">
            The delimiter for fields within a delimited database file.<br />
            If you are using one of the supplied RDDs for processing .DBF files , the delimiter should be a NULL_STRING, which is the default if the argument is omitted.
        </param>
      <param name="acRDDs">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality.<br />

                This allows you to use RDDs with special capabilities, like encryption or decryption, in different work areas with different database drivers.  <br />

                These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument).<br />
                If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence.  <br />

                If <paramref name="acRDDs" /> is omitted, no additional RDDs are assumed.
            </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbZap">
      <summary>
            Remove all records from open files.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DbZap(XSharp.__Usual)">
      <summary>
            Remove all records from open files.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DebOut(XSharp.__Usual[])">
      <summary>
            Write information to the Debug Terminal Program
            </summary>
      <param name="args">List of values to display on the debug terminal</param>
    </member>
    <member name="M:XSharp.RT.Functions.Default(XSharp.__Usual@,XSharp.__Usual)">
      <summary>
            Assign a default value to a NIL argument.
        </summary>
      <param name="uVar">
            The variable to which the default value will be assigned.  <paramref name="uVar" /> must be passed by reference to the Default() function.
        </param>
      <param name="uDefault">The default value to assign.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Deleted">
      <summary>
            Return the deleted status of the current record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE if the current record is marked for deletion; otherwise, FALSE.<br />
            If there is no database file in use in the work area, Deleted() returns FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Deleted(XSharp.__Usual)">
      <summary>
            Return the deleted status of the current record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE if the current record is marked for deletion; otherwise, FALSE.<br />
            If there is no database file in use in the work area, Deleted() returns FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Descend(XSharp.__Usual)">
      <summary>
            Create a descending order key value.
        </summary>
      <param name="uValue">Any valid expression of string, date, logical, or numeric type.  Memo type is treated in the same way as string type.</param>
      <returns>
            An inverted expression of the same data type as the <paramref name="uValue" />, except for dates which return a numeric value.<br />
            If <paramref name="uValue" /> is Chr(0), Descend() returns Chr(0).
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DescendA(XSharp.__Usual@)">
      <summary>
            Create a descending order key value.
        </summary>
      <param name="uValue">Any valid expression of string, date, logical, or numeric type.  Memo type is treated in the same way as string type.</param>
      <returns>
            An inverted expression of the same data type as the <paramref name="uValue" />, except for dates which return a numeric value.<br />
            If <paramref name="uValue" /> is Chr(0), Descend() returns Chr(0).
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DirChange(XSharp.__Psz)">
      <summary>
            Change the current Windows directory.
        </summary>
      <param name="pszDir">The name of the directory to change to, including the drive.</param>
      <returns>
            0 if successful; -1 if there is an argument error; otherwise, the DOS error code.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Directory(System.String,XSharp.__Usual)">
      <summary>
            Create an array of directory and file information.
        </summary>
      <param name="cFileSpec">
            The file specification for the search.  Besides a file name, this specification can include an optional drive, directory, and extension.<br />
            The file name and extension can include the standard wildcard characters (* and ?).<br />
            If you do not specify a drive and directory, the Windows defaults are used.
        </param>
      <param name="uAttributes">
            Specifies inclusion of files with special attributes in the returned information.  <paramref name="uAttributes" /> can be a string or a numeric.  When specified as a string it can contain one or more of the characters listed in the table below.  When specified as a numeric it can contain one or more of the constants listed in the following table:<br /><list type="table"><listheader><term>Character</term><description>Constant	Description</description></listheader><item><term>D</term><description>FA_DIRECTORY	Directory</description></item><item><term>H</term><description>FC_HIDDEN	Hidden</description></item><item><term>S</term><description>FC_SYSTEM	System</description></item><item><term>V</term><description>FA_VOLUME	Volume label</description></item></list>
            To specify more than one constant, you can either add attributes together using the + operator, or use the _Or() operator, as in this example: _Or(FC_SYSTEM, FC_HIDDEN).<br />
            To specify more than one string, simply concatenate them, as in "SH."<br /><paramref name="uAttributes" /> specifies a criterion to satisfy in addition to any "visible" files that match the <paramref name="cFileSpec" />.  Visible files do not include directories, volumes, or hidden or system files — all other files are visible, regardless of the status of their read or archive attributes.<br />
            To include only visible files, omit this argument.<br />

            Note:To specify volume labels only, to the exclusion of all other files, specify FA_VOLUME or "V" as the sole <paramref name="uAttributes" /> argument.
        </param>
      <returns>
            An array of subarrays, with each subarray containing information about each file matching <paramref name="cFileSpec" />.<br />
            The subarray elements are referenced as follows (see example below):
            <list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>F_ATTR</term><description>File attributes (as a string)</description></item><item><term>F_DATE</term><description>Date of last update (as a date)</description></item><item><term>F_NAME</term><description>Name of file (as a string)</description></item><item><term>F_SIZE</term><description>Size of file (as a numeric)</description></item><item><term>F_TIME</term><description>Time of last update (as a string)</description></item></list>
            If no files are found matching <paramref name="cFileSpec" /> or if <paramref name="cFileSpec" /> is an illegal path or file specification, Directory() returns an empty array.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DirMake(XSharp.__Psz)">
      <summary>
            Create a directory.
        </summary>
      <param name="pszNewDir">
            The name of the directory to create, including an optional drive.<br />
            If you do not specify a drive, the Windows default is used.
        </param>
      <returns>
            0 if successful; -1 if there is an argument error; otherwise, the DOS error code.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DirRemove(XSharp.__Psz)">
      <summary>
            Remove a directory.
        </summary>
      <param name="pszDirName">
            The name of the directory to erase, including an optional drive.<br />
            If you do not specify a drive, the Windows default is used.
        </param>
      <returns>
            0 if successful; -1 if there is an argument error; otherwise, the DOS error code.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DiskChange(XSharp.__Psz)">
      <summary>
            Change the current disk drive.
        </summary>
      <param name="pszDrive">The letter of the disk drive to change.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DoError(System.String,System.Int32)"></member>
    <member name="M:XSharp.RT.Functions.DoW(XSharp.__Date)">
      <summary>
            Extract the number of the day of the week from a date.
        </summary>
      <param name="dDate">The date.</param>
      <returns>
            The day of the week as a number from 1 to 7, where 1 is Sunday, 2 is Monday, and so on.<br />
            For an invalid or NULL_DATE, DoW() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DToC(XSharp.__Date)">
      <summary>
            Convert a date to a string.
        </summary>
      <param name="dDate">The date value to convert.</param>
      <returns>
            A string representation of <paramref name="dDate" />, formatted in the current date format.<br />
            A NULL_DATE returns a string of spaces equal in length to the current date format.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DToR(XSharp.__Usual)">
      <summary>
            Converts degrees to radians.
        </summary>
      <param name="nExpression">

            Specifies the numeric expression whose value you want to convert to radians. An angle expressed in a degree:minute:second format should be converted to its decimal equivalent.
        </param>
      <returns>
            Numeric
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.DToS(XSharp.__Date)">
      <summary>
            Convert a date value to a string formatted as yyyymmdd.
        </summary>
      <param name="dDate">The date value to convert.</param>
      <returns>
            An 8-character string in the format yyyymmdd.<br />
            If <paramref name="dDate" /> is a NULL_DATE, a string of eight spaces is returned.<br />
            The return value is not affected by the current date format.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(System.Boolean)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(System.DateTime)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(System.Int32)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(System.Object)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(System.String)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(System.UInt32)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(System.Void*)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty``1(``0)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty``1(``0[])">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(XSharp.__Array)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty``1(XSharp.__ArrayBase{``0})">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(XSharp.__Currency)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(XSharp.__Date)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(XSharp.__Float)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(XSharp.__Psz)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(XSharp.__Symbol)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            The value to check for 'emptyness'
        </param>
      <param name="oObject">
            The value to check for 'emptyness'
        </param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Empty(XSharp.__Usual)">
      <summary>
            Determine if the result of an expression is empty.
        </summary>
      <param name="uValue">
            An expression of any data type.<br />
            The criteria for determining whether a value is considered empty depends on the data type of <paramref name="uValue" />, according to the following rules:<br /><list type="table"><listheader><term>Data Type</term><description>Contents</description></listheader><item><term>Array</term><description>NULL_ARRAY or empty array</description></item><item><term>Code block</term><description>NULL_CODEBLOCK</description></item><item><term>Date</term><description>NULL_DATE</description></item><item><term>Logic</term><description>FALSE</description></item><item><term>NIL</term><description>NIL</description></item><item><term>VOID</term><description>TRUE</description></item><item><term>Numeric</term><description>0</description></item><item><term>Object</term><description>NULL_OBJECT</description></item><item><term>PSZ</term><description>NULL_PSZ</description></item><item><term>PTR</term><description>NULL_PTR </description></item><item><term>String</term><description>Spaces, tabs, carriage return/line feed, or NULL_STRING</description></item><item><term>Symbol</term><description>NULL_SYMBOL</description></item></list></param>
      <returns>
            TRUE if the expression results in an empty value; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.EmptyField(System.UInt32)">
      <summary>
            Determine if field number n in the current workarea is empty.
        </summary>
      <param name="n">The field number in the current workarea.</param>
      <returns>
            TRUE if the field is empty; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.EmptyPSZ(XSharp.__Psz)">
      <summary></summary>
      <param name="PSZValue" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.EmptyRecord">
      <summary>
            Determine if the current record in the current workarea is empty.
        </summary>
      <returns>
            TRUE if the record is empty; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.EmptyString(System.String)"></member>
    <member name="M:XSharp.RT.Functions.EmptyUsual(System.UInt32)">
      <summary>
            Return the empty value of a specified data type.
        </summary>
      <param name="kType">
            The data type whose empty value is desired.<br />
            The constants defining all X# data types are listed in the table below.
        </param>
      <returns>
            The empty value of the data type specified by <paramref name="kType" />.<br />
            These values are as follows:
            <list type="table"><listheader><term><paramref name="kType" /></term><description>Empty Value</description></listheader><item><term>ARRAY</term><description>NULL_ARRAY or empty array</description></item><item><term>BYTE, DWORD</term><description>0</description></item><item><term>FLOAT, INT</term><description>0</description></item><item><term>LONGINT, REAL4</term><description>0</description></item><item><term>
                        REAL8, SHORTINT
                    </term><description>0</description></item><item><term>WORD</term><description>0</description></item><item><term>CODEBLOCK</term><description>NULL_CODEBLOCK</description></item><item><term>DATE</term><description>NULL_DATE</description></item><item><term>LOGIC</term><description>FALSE</description></item><item><term>OBJECT</term><description>NULL_OBJECT</description></item><item><term>PSZ</term><description>NULL_PSZ</description></item><item><term>PTR</term><description>NULL_PTR </description></item><item><term>STRING</term><description>Spaces, tabs, carriage return/line feed, or NULL_STRING</description></item><item><term>SYMBOL</term><description>NULL_SYMBOL</description></item><item><term>USUAL</term><description>
                        NIL
                    </description></item><item><term>VOID</term><description>NIL</description></item></list></returns>
    </member>
    <member name="M:XSharp.RT.Functions.EnableArrayIndexCheck(System.Boolean)">
      <summary>Suppress Array Index check to be compatible with Visual Objects</summary>
      <param name="lCheck">TRUE to enable the array index checks. </param>
      <returns>The previous setting of the flag</returns>
    </member>
    <member name="M:XSharp.RT.Functions.EnableLBOptimizations(System.Boolean)"></member>
    <member name="M:XSharp.RT.Functions.EnforceNumeric(XSharp.__Usual@)">
      <summary>
            Make sure a variable is a numeric.
        </summary>
      <param name="u">
            The variable to check.<br />
            If <paramref name="u" /> is NIL, a value of 0 is assigned to it.
            If <paramref name="u" /> is not passed by reference and is not a numeric, the error system aborts the program.
            If <paramref name="u" /> is passed by reference but is not a numeric, the error system is called up and a value of 0 is assigned to <paramref name="u" />.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.EnforceType(XSharp.__Usual,System.UInt32)">
      <summary>
            Make sure a variable is of a certain type.
        </summary>
      <param name="u">
            The variable to check.<br />
            If <paramref name="u" /> is NIL and is passed by reference, the EmptyUsual() of the
            data type specified by <paramref name="dwType" /> is assigned to it.<br />
            If <paramref name="u" /> is not passed by reference and is not of the
            data type specified by <paramref name="dwType" />, the error system aborts the program.<br />
            If <paramref name="u" /> is passed by reference but
            is not of the data type specified by <paramref name="dwType" />, the error system is called up and the EmptyUsual() of the data type
            specified by <paramref name="dwType" /> is assigned to <paramref name="u" />.
        </param>
      <param name="dwType">The data type to enforce.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.EnforceType(XSharp.__Usual@,System.UInt32)">
      <summary>
            Make sure a variable is of a certain type.
        </summary>
      <param name="u">
            The variable to check.<br />
            If <paramref name="u" /> is NIL and is passed by reference, the EmptyUsual() of the
            data type specified by <paramref name="dwType" /> is assigned to it.<br />
            If <paramref name="u" /> is not passed by reference and is not of the
            data type specified by <paramref name="dwType" />, the error system aborts the program.<br />
            If <paramref name="u" /> is passed by reference but
            is not of the data type specified by <paramref name="dwType" />, the error system is called up and the EmptyUsual() of the data type
            specified by <paramref name="dwType" /> is assigned to <paramref name="u" />.
        </param>
      <param name="dwType">The data type to enforce.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Eof">
      <summary>
            Determine when end-of-file is encountered.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE when an attempt is made to move the record pointer beyond the last logical record in a database file or if the database file contains no records; otherwise, FALSE.<br />
            If there is no database file open in the work area, EOF() returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Eof(XSharp.__Usual)">
      <summary>
            Determine when end-of-file is encountered.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE when an attempt is made to move the record pointer beyond the last logical record in a database file or if the database file contains no records; otherwise, FALSE.<br />
            If there is no database file open in the work area, EOF() returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ErrorBlock">
      <summary>
            Return and optionally change the code block that is executed when a runtime error occurs.
        </summary>
      <param name="cbNewSetting">The code block to execute whenever a runtime error occurs.</param>
      <returns>
            If <paramref name="cbNewSetting" /> is not specified, ErrorBlock() returns the current setting.<br />
            If <paramref name="cbNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ErrorBlock(XSharp.Codeblock)">
      <summary>
            Return and optionally change the code block that is executed when a runtime error occurs.
        </summary>
      <param name="cbNewSetting">The code block to execute whenever a runtime error occurs.</param>
      <returns>
            If <paramref name="cbNewSetting" /> is not specified, ErrorBlock() returns the current setting.<br />
            If <paramref name="cbNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ErrorExec(System.Exception)"></member>
    <member name="M:XSharp.RT.Functions.ErrorSys"></member>
    <member name="M:XSharp.RT.Functions.Eval(System.Object,XSharp.__Usual[])">
      <summary>
            Evaluate a code block or an objects Eval() method.
            </summary>
      <param name="obj">Object or block to evaluate</param>
      <param name="args">List of arguments</param>
      <returns>Result of the evaluation</returns>
    </member>
    <member name="M:XSharp.RT.Functions.Eval(XSharp.__Usual,XSharp.__Usual[])">
      <summary>
            Evaluate a code block or an objects Eval() method.
            </summary>
      <param name="uCodeBlock">Block to evaluate</param>
      <param name="args">List of arguments</param>
      <returns>Result of the evaluation</returns>
    </member>
    <member name="M:XSharp.RT.Functions.Eval(XSharp.ICodeblock,XSharp.__Usual[])">
      <summary>
            Evaluate a code block
            </summary>
      <param name="block">Block to evaluate</param>
      <param name="args">List of arguments</param>
      <returns>Result of the evaluation</returns>
    </member>
    <member name="M:XSharp.RT.Functions.Evaluate(System.String)">
      <summary>
            Evaluate an expression contained in a string.
        </summary>
      <param name="cString">The string containing the expression to evaluate.</param>
      <returns>
            The value of the expression.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Evaluate(System.String,System.Boolean)">
      <summary>
            Evaluate an expression contained in a string.
        </summary>
      <param name="cString">The string containing the expression to evaluate.</param>
      <param name="lAllowSingleQuotes">Should single quotes be allowed as string delimiters.</param>
      <returns>
            The value of the expression.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ExecScript(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Enables you to run multiple lines of code from variables, tables, and other text at runtime.
        </summary>
      <param name="cExpression">
            Represents the text, a variable, type string, or memo to be executed as code.
        </param>
      <param name="eParameter1">
            Optional. Specify parameters passed to a script that has a PARAMETERS or LPARAMETERS statement in first line.
        </param>
      <param name="eParameter2">
            Optional. Specify parameters passed to a script that has a PARAMETERS or LPARAMETERS statement in first line.
        </param>
      <param name="eParameterN">
            Optional. Specify parameters passed to a script that has a PARAMETERS or LPARAMETERS statement in first line.
        </param>
      <returns>
            The return value is the value returned by the script in cExpression. If the script returns no value, X# returns NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ExecScriptFast(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Enables you to run multiple lines of code from variables, tables, and other text at runtime.
        </summary>
      <param name="cExpression">
            Represents the text, a variable, type string, or memo to be executed as code.
        </param>
      <param name="eParameter1">
            Optional. Specify parameters passed to a script that has a PARAMETERS or LPARAMETERS statement in first line.
        </param>
      <param name="eParameter2">
            Optional. Specify parameters passed to a script that has a PARAMETERS or LPARAMETERS statement in first line.
        </param>
      <param name="eParameterN">
            Optional. Specify parameters passed to a script that has a PARAMETERS or LPARAMETERS statement in first line.
        </param>
      <returns>
            The return value is the value returned by the script in cExpression. If the script returns no value, X# returns NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Exp(XSharp.__Usual)">
      <summary>
            Calculate the numeric value of a natural logarithm.
        </summary>
      <param name="nExponent">The power to which e is to be raised.</param>
      <returns>
            A floating point number that is equivalent to the value e raised to <paramref name="nExponent" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.F2Bin(XSharp.__Float)">
      <summary>
            Convert a float to a string containing an 80-bit floating point number.
        </summary>
      <param name="fValue">The value to convert.</param>
      <returns>
            A string representing a floating point number.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Fact(System.UInt32)">
      <summary>
            Calculate the factorial of a number.
        </summary>
      <param name="wValue">A positive number.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.FCount">
      <summary>
            Return the number of fields in the current database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            If there is no database file open, FCount() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FCount(XSharp.__Usual)">
      <summary>
            Return the number of fields in the current database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            If there is no database file open, FCount() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldBlock(System.String)">
      <summary>
            Return a set-get code block for a field that is identified by its name.
        </summary>
      <param name="cFieldName">
            The name of the field to which the set-get block will refer.  When executed with an argument, the code block created by this function assigns the value of the argument to <paramref name="cFieldName" />.<br />
            If omitted, the code block retrieves the value of <paramref name="cFieldName" />.
        </param>
      <returns>
            A runtime code block (implemented as an object) that, when evaluated, sets (assigns) or gets (retrieves) the value of the given field.<br />
            If <paramref name="cFieldName" /> does not exist in the current work area, FieldBlock() returns NULL_OBJECT.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldBlockSym(XSharp.__Symbol)">
      <summary>
            Return a set-get code block for a field that is identified by a symbol.
        </summary>
      <param name="symFieldName">
            A symbol that is the name of the field to which the set-get block will refer.  When executed with an argument, the code block created by this function assigns the value of the argument to <paramref name="symFieldName" />.<br />
            If omitted, the code block retrieves the value of <paramref name="symFieldName" />.
        </param>
      <returns>
            A runtime code block (implemented as an object) that, when evaluated, sets (assigns) or gets (retrieves) the value of the given field.<br />
            If <paramref name="symFieldName" /> does not exist in the current work area, FieldBlockSym() returns NULL_OBJECT.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldGet(XSharp.__Usual)">
      <summary>
            Get the contents of a field that is identified by its position.
        </summary>
      <param name="nFieldPos">The position of the field in the database file structure for the current work area.</param>
      <returns>
            The value of the specified field.<br />
            If <paramref name="nFieldPos" /> does not correspond to the position of any
            field in the current database file, FieldGet() will generate a runtime error. Only in the Xbase++ dialect a NIL will be returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldGetAlias(XSharp.__Symbol,XSharp.__Symbol)">
      <summary>
            Get the contents of a field that is identified by a work area alias and the field name.
        </summary>
      <param name="symAlias">The work area alias.</param>
      <param name="symFieldName">The field name.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldGetArea(System.UInt32,XSharp.__Symbol)">
      <summary>
            Get the contents of a field that is identified by its work area and a symbol.
        </summary>
      <param name="dwWorkArea">
            The work area in which <paramref name="symFieldName" /> is located.
        </param>
      <param name="symFieldName">A symbol that corresponds to the field name.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldGetBytes(XSharp.__Usual)">
      <summary>
            Get the contents of a field that is identified by its position.
        </summary>
      <param name="nFieldPos">The position of the field in the database file structure for the current work area.</param>
      <returns>
            The value of the specified field.<br />
            If <paramref name="nFieldPos" /> does not correspond to the position of any
            field in the current database file, FieldGet() will generate a runtime error. Only in the Xbase++ dialect a NIL will be returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldGetSelect(XSharp.__Usual,XSharp.__Symbol)">
      <summary>
            Get the contents of a field that is identified by a work area alias and the field name.
        </summary>
      <param name="symAlias">The work area alias.</param>
      <param name="symFieldName">The field name.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldGetSym(XSharp.__Symbol)">
      <summary>
            Retrieve the contents of a field that is identified by its symbolic name.
        </summary>
      <param name="symField">The symbolic name of the field in the database file structure for the current work area.</param>
      <returns>
            The value of the specified field.<br />
            If <paramref name="symField" /> does not correspond to a field in the current database file, FieldGetSym() returns NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldName(System.UInt32)">
      <summary>
            Return the name of a field as a string.
        </summary>
      <param name="dwFieldPos">The position of the field in the database file structure.</param>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The name of the specified field as a string.<br />
            If <paramref name="dwFieldPos" /> does not correspond to an existing field in the database file or if no database file is open, FieldName() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldName(System.UInt32,XSharp.__Usual)">
      <summary>
            Return the name of a field as a string.
        </summary>
      <param name="dwFieldPos">The position of the field in the database file structure.</param>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The name of the specified field as a string.<br />
            If <paramref name="dwFieldPos" /> does not correspond to an existing field in the database file or if no database file is open, FieldName() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPos(System.String)">
      <summary>
            Return the position of a field.
        </summary>
      <param name="cFieldName">The name of the field.</param>
      <param name="nArea">
            Specifies the work area number for the table.
        </param>
      <returns>
            The position of the specified field within the list of fields associated with the work area.<br />
            If the work area has no field with the specified name, FieldPos() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPos(System.String,System.UInt32)">
      <summary>
            Return the position of a field.
        </summary>
      <param name="cFieldName">The name of the field.</param>
      <param name="nArea">
            Specifies the work area number for the table.
        </param>
      <returns>
            The position of the specified field within the list of fields associated with the work area.<br />
            If the work area has no field with the specified name, FieldPos() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPosSym(XSharp.__Symbol)">
      <summary>
            Return the position of a field that is identified by a symbol.
        </summary>
      <param name="sFieldName">A symbol that corresponds to the name of the field.</param>
      <returns>
            The position of the specified field within the list of fields associated with the work area.<br />
            If the work area has no field with the specified name, FieldPosSym() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPut(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the value of a field identified by its position.
        </summary>
      <param name="nFieldPos">The position of the field in the database file structure.</param>
      <param name="uNewValue">
            The value to assign to the field.<br />
            The data type of this expression must match the data type of the field.
        </param>
      <returns>
            The value assigned to the field.
            If <paramref name="nFieldPos" /> does not correspond to the position of any field in the database file, FieldPut() will generate an error.
            The exception to this is the XBase++ dialect where an invalid <paramref name="nFieldPos" /> will not generate an exception but will return NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPutAlias(XSharp.__Symbol,XSharp.__Symbol,XSharp.__Usual)">
      <summary>
            Set the value of a field identified by its work area alias and field name.
        </summary>
      <param name="symAlias">
            The alias of the work area in which <paramref name="symField" /> is located.
        </param>
      <param name="symField">The field name.</param>
      <param name="uNewValue">
            The value to assign to the field.<br />
            The data type of this expression must match the data type of the field.
        </param>
      <returns>
            The value assigned to the field.<br />
            If <paramref name="symField" /> does not correspond to any field in the work area specified by <paramref name="symAlias" />, FieldPutAlias() returns NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPutArea(System.UInt32,XSharp.__Symbol,XSharp.__Usual)">
      <summary>
            Set the value of a field identified by its work area number and field name.
        </summary>
      <param name="dwWorkArea">
            The work area in which <paramref name="symField" /> is located.
        </param>
      <param name="symField">The field name.</param>
      <param name="uNewValue">
            The value to assign to the field.<br />
            The data type of this expression must match the data type of the field.
        </param>
      <returns>
            The value assigned to the field.<br />
            If <paramref name="symField" /> does not correspond to any field in the work area specified by <paramref name="dwWorkArea" />, FieldPutArea() returns NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPutBytes(XSharp.__Usual,System.Byte[])">
      <summary>Write an array of bytes direct to the workarea buffer.</summary>
      <param name="nFieldPos">The position OF the FIELD IN the database file structure.</param>
      <param name="aBytes">The value to write to the field</param>
      <returns>
             The value assigned TO the field.
             IF <paramref name="nFieldPos" /> does not correspond to the position of any field in the database file, FieldPutBytes() will generate an error.
             </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPutSelect(XSharp.__Usual,XSharp.__Symbol,XSharp.__Usual)">
      <summary>
            Set the value of a field identified by its work area alias and field name.
        </summary>
      <param name="symAlias">
            The alias of the work area in which <paramref name="symField" /> is located.
        </param>
      <param name="symField">The field name.</param>
      <param name="uNewValue">
            The value to assign to the field.<br />
            The data type of this expression must match the data type of the field.
        </param>
      <returns>
            The value assigned to the field.<br />
            If <paramref name="symField" /> does not correspond to any field in the work area specified by <paramref name="symAlias" />, FieldPutAlias() returns NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldPutSym(XSharp.__Symbol,XSharp.__Usual)">
      <summary>
            Set the value of a field that is identified by its symbolic name.
        </summary>
      <param name="symField">The symbolic name of the field in the database file structure for the current work area.</param>
      <param name="uNewValue">
            The value to assign to the field.<br />
            The data type of this expression must match the data type of the field.
        </param>
      <returns>
            The value assigned to the field.<br />
            If <paramref name="symField" /> does not correspond to a field in the current database file, FieldPutSym() returns NIL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldSym(System.UInt32)">
      <summary>
            Return the name of a field as a symbol.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <param name="dwFieldPos">The position of the field in the database file structure.</param>
      <returns>
            The name of the specified field as a symbol.<br />
            If <paramref name="dwFieldPos" /> does not correspond to an existing field in a database file or if no database file is open, FieldSym() returns NULL_SYMBOL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldSym(System.UInt32,XSharp.__Usual)">
      <summary>
            Return the name of a field as a symbol.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <param name="dwFieldPos">The position of the field in the database file structure.</param>
      <returns>
            The name of the specified field as a symbol.<br />
            If <paramref name="dwFieldPos" /> does not correspond to an existing field in a database file or if no database file is open, FieldSym() returns NULL_SYMBOL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldWBlock(System.String,XSharp.__Usual)">
      <summary>
            Return a set-get code block for a field, specified as a string, in a specified work area.
        </summary>
      <param name="cFieldName">The name of the field.</param>
      <param name="dwWorkArea">The work area number where the field resides.</param>
      <returns>
            A runtime code block (implemented as an object) that, when evaluated, sets (assigns) or gets (retrieves) the value of <paramref name="cFieldName" /> in the work area designated by <paramref name="dwWorkArea" />.<br />
            If <paramref name="cFieldName" /> does not exist in the specified work area, FieldWBlock() returns NULL_OBJECT.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FieldWBlockSym(XSharp.__Symbol,System.UInt32)">
      <summary>
            Return a set-get code block for a field, specified as a symbol, in a specified work area.
        </summary>
      <param name="symFieldname">The name of the field.</param>
      <param name="dwWorkArea">The work area number where the field resides.</param>
      <returns>
            A runtime code block (implemented as an object) that, when evaluated, sets (assigns) or gets (retrieves) the value of <paramref name="symFieldName" /> in the work area designated by <paramref name="dwWorkArea" />.<br />
            If <paramref name="symFieldName" /> does not exist in the specified work area, FieldWBlockSym() returns NULL_OBJECT.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FindClass(System.String)">
      <summary>
            Find a class in the referenced assemblies
            </summary>
      <param name="cClassName">Classname to find</param>
      <returns>System.Type object or NULL </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Float2Long(XSharp.__Usual)">
      <summary></summary>
      <param name="f"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.FloatFormat(XSharp.__Float,System.Int32,System.Int32)">
      <summary>
            Set the display format for a floating point numeric.
        </summary>
      <param name="fValue">Any numeric value.</param>
      <param name="iLen">
            The desired length of the display of <paramref name="fValue" />, including decimal digits, decimal point, and sign.<br />
            A value of -1 means that only significant digits to the left of the decimal point will be displayed (any left padding will be suppressed).
        </param>
      <param name="iDec">
            The desired number of decimal digits in the display of <paramref name="fValue" />.<br />
            A value of -1 means that only significant digits to the right of the decimal point will be displayed (any right padding will be suppressed).
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Flock">
      <summary>
            Lock an opened and shared database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if the lock succeeded; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Flock(XSharp.__Usual)">
      <summary>
            Lock an opened and shared database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <returns>
            TRUE if the lock succeeded; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Floor(XSharp.__Usual)">
      <summary>
            Round a number down to the next lowest integer.
        </summary>
      <param name="nNum">The number to round.</param>
      <returns>
            The nearest integer that is less than or equal to <paramref name="nNum" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Found">
      <summary>
            Determine if the previous search operation succeeded.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE if the last search was successful; otherwise, FALSE.  Found() will also return FALSE if there is no database open in the work area.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Found(XSharp.__Usual)">
      <summary>
            Determine if the previous search operation succeeded.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE if the last search was successful; otherwise, FALSE.  Found() will also return FALSE if there is no database open in the work area.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FParamCount(System.String)">
      <summary>Return the number of local arguments that a function is expecting.</summary>
      <param name="symFunction">The name of the function to examine.</param>
      <returns>The number of arguments that a method is expecting.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.Frac(XSharp.__Float)">
      <summary>
            Return the fractional portion of a number.
        </summary>
      <param name="fValue">The number whose fractional portion you want to return.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.FRead(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>
            Read characters from a file into an allocated buffer.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="ptrBufferVar">
            Pointer to an allocated buffer used to store data read from the specified file.<br />
            The length of this variable must be greater than or equal to <paramref name="dwBytes" />.
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FRead(System.IntPtr,XSharp.__Usual@,System.UInt32)">
      <summary>
            Read characters from a file into a buffer variable that is passed by reference.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="cBufferVar">
            A variable used to store data read from the specified file.<br />
            If the length of <paramref name="cBufferVar" /> is less than <paramref name="dwBytes" />, a new string whose length is the minimum of <paramref name="dwBytes" /> and the remaining bytes in the file is allocated.  <paramref name="cBufferVar" /> must be passed by reference and, therefore, must be prefaced by the pass-by-reference operator (@).
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FRead3(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>
            Read characters from a file into an allocated buffer.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="ptrBufferVar">
            Pointer to an allocated buffer used to store data read from the specified file.<br />
            The length of this variable must be greater than or equal to <paramref name="dwBytes" />.
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FRead4(System.IntPtr,System.IntPtr,System.UInt32,System.Boolean)">
      <summary>
            Read characters from a file into an allocated buffer.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="ptrBufferVar">
            Pointer to an allocated buffer used to store data read from the specified file.<br />
            The length of this variable must be greater than or equal to <paramref name="dwBytes" />.
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <param name="lAnsi">If FALSE an OEM to ANSI conversion is made.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FReadLine(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Read a line from an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="nMax">
            The maximum number of characters to read per line.  FReadLine() will read until a hard carriage return (Chr(13)) is reached, end-of-file is encountered,  or <paramref name="nMax" /> characters are read.<br />
            The default value for <paramref name="nMax" /> is 256.
        </param>
      <returns>
            The line read.  When the end-of-file is reached, FReadLine() returns a NULL_STRING and FError() is set to 257.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FReadText3(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>
            Read characters from a file into a buffer variable that is passed by reference.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="cBufferVar">
            A variable used to store data read from the specified file.<br />
            If the length of <paramref name="cBufferVar" /> is less than <paramref name="dwBytes" />, a new string whose length is the minimum of <paramref name="dwBytes" /> and the remaining bytes in the file is allocated.  <paramref name="cBufferVar" /> must be passed by reference and, therefore, must be prefaced by the pass-by-reference operator (@).
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <param name="pData">A block of memory to store the data read from the specified file. The length of this variable must be greater than or equal to the number of bytes in the next parameter.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FSeek(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the file pointer to a new position.
        </summary>
      <param name="ptrHandle">The handle of the open file.</param>
      <param name="nOffset">
            The number of bytes to move the file pointer, from the position defined by <paramref name="nOrigin" />.<br />
            It can be a positive or negative number.<br />
            A positive number moves the pointer forward in the file, and a negative number moves the pointer backward.<br />
            If <paramref name="nOrigin" /> is the end-of-file, <paramref name="nOffset" /> must be 0 or negative.
        </param>
      <param name="kOrigin">
            One of the following constants indicating the starting location of the file pointer, telling where to start searching the file:<br /><list type="table"><listheader><term>Constant</term><description>Seeks from</description></listheader><item><term>FS_END</term><description>End-of-file   </description></item><item><term>FS_RELATIVE</term><description>Current pointer position  </description></item><item><term>FS_SET</term><description>Beginning-of-file </description></item></list></param>
      <returns>
            The new position of the file pointer, relative to the beginning of the file (position 0).  (The original position of the file pointer does not matter.)
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FWrite(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Write a string to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="nBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.<br />
            If omitted, the entire contents of <paramref name="cBuffer" /> is written.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="nBytes" />, the operation was successful.<br />
            If the return value is less than <paramref name="nBytes" /> or 0, this means that the length of <paramref name="cBuffer" /> is less than <paramref name="nBytes" />, or the disk is full, or another error has occurred.  FError() can be used to determine the specific error.  When a disk full error occurs, FError() is set to 256.
            FWrite() and FWrite3 are assumed to handle raw binary data and are not dependent upon the status of SetAnsi().  FWriteText() and FWrite4(), on the other hand, are dependent upon SetAnsi().
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FWrite3(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>
            Write the contents of a buffer to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="ptrBuffer">A pointer to the buffer to write.</param>
      <param name="dwBytes">
            The number of bytes in <paramref name="ptrBuffer" /> to write, beginning at the current file pointer position.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="dwBytes" />, the operation was successful.<br />
            If the return value is less than <paramref name="dwBytes" /> or 0, this means that the length of <paramref name="ptrBuffer" /> is less than <paramref name="dwBytes" />, or the disk is full, or another error has occurred.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FWriteLine(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Write a string, a carriage-return character, and a linefeed character to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="nBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.<br />
            If <paramref name="nBytes" /> is not specified, the value of SLen(<paramref name="cBuffer" />) is used.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="nBytes" /> + 2, the operation was successful.<br />
            If the return value is less than <paramref name="nBytes" /> + 2 or 0, this means that the length of  <paramref name="cBuffer" /> was less than <paramref name="nBytes" />, or the disk is full, or another error has occurred.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.FWriteText(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Write a string to an open file, with SetAnsi() dependency.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="nBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.<br />
            If omitted, the entire contents of <paramref name="cBuffer" /> is written.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="nBytes" />, the operation was successful.<br />
            If the return value is less than <paramref name="nBytes" /> or 0, this means that the length of <paramref name="cBuffer" /> is less than <paramref name="nBytes" />, or the disk is full, or another error has occurred.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.GetColor"></member>
    <member name="M:XSharp.RT.Functions.GetRTFullPath">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.GetThreadCount">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.GetTickCountLow">
      <summary>
            Get the number of 1/10000 seconds that have elapsed since Windows was started.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Header">
      <summary>
            Return the length of the database file header.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The number of bytes in the header of the database file.<br />
            If no database file is in use, Header() returns a 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Header(XSharp.__Usual)">
      <summary>
            Return the length of the database file header.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The number of bytes in the header of the database file.<br />
            If no database file is in use, Header() returns a 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.InCollect">
      <summary>
            Check whether the application is in a garbage collection phase.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.IndexCount">
      <summary>Returns the # of open indexes in the current workarea</summary>
    </member>
    <member name="M:XSharp.RT.Functions.IndexExt">
      <summary>
            Return the default index file extension for a work area as defined by its RDD.
        </summary>
      <returns>
            A string indicating the default index file extension for a work area as defined by its RDD.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IndexHPLock(XSharp.__Usual)">
      <summary>
            Return and optionally change the setting that determines whether to use the High Performance (HP) locking schema for newly created .NTX files.
        </summary>
      <param name="lNewSetting">
            TRUE uses the HP locking schema.  FALSE uses the standard locking schema as defined by NewIndexLock().<br />
            The initial default is FALSE, which can be changed using the HPLock entry (1 means TRUE and 0 means FALSE) in the X# section of WIN.INI.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, IndexHPLock() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IndexKey(XSharp.__Usual)">
      <summary>
            Return the key expression of a specified order.
        </summary>
      <param name="nPosition">
            The position of the order in the order list of the work area.<br />
            A value of 0 specifies the controlling order, without regard to its actual position in the list.
        </param>
      <returns>
            The key expression of the specified order.<br />
            If there is no corresponding order or if no database file is open, IndexKey() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IndexOrd">
      <summary>
            Return the position of the controlling order within the order list.
        </summary>
      <returns>
            The position of the controlling order.<br />
            A value of 0 indicates either that no database file is open or that there is no controlling order and records are being accessed in natural order.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.InList(XSharp.__Usual,XSharp.__Usual[])">
      <summary>
            Indicate whether the first expression in a series is repeated later in the series.
        </summary>
      <param name="uValue">
            The value that is looked up in the list. This can be any data type.
        </param>
      <param name="uValueList">
            A list of expressions separated by commas.<br />
            These expressions should be the same data type as the expression in <paramref name="uValue" /><br />
            If one or more of these expressions are not the same type as the first expression, 
            a runtime error may happening indicating a data type mismatch.
        </param>
      <returns>
            TRUE if the first expression matches any of the other listed expressions; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.InListExact(XSharp.__Usual,XSharp.__Usual[])">
      <summary>
            Indicate whether the first expression in a series is repeated later in the series.
        </summary>
      <param name="uValue">
            The value that is looked up in the list. This can be any data type.
        </param>
      <param name="uValueList">
            A list of expressions separated by commas.<br />
            These expressions should be the same data type as the expression in <paramref name="uValue" /><br />
            If one or more of these expressions are not the same type as the first expression, 
            a runtime error may happening indicating a data type mismatch.
        </param>
      <returns>
            TRUE if the first expression matches any of the other listed expressions; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Integer(XSharp.__Usual)">
      <summary>
            Truncate or floor a number with decimal digits to a whole number.
        </summary>
      <param name="nValue">The number to truncate or floor.</param>
      <returns>
            The whole number to the left of the decimal point.  Since both <paramref name="uValue" /> and the return value are data type USUAL, you are not limited to the size of an integer.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsAccess(System.Object,System.String)">
      <summary>
            Check whether a particular access method can be sent to an object.
        </summary>
      <param name="oObject">An object.</param>
      <param name="symAccess">The access method name.</param>
      <returns>
            TRUE if the specified access method is defined for the class of the specified object; otherwise, FALSE.
            <br />



            This example checks if x and y of CLASS MyClass are true instance variables or if they are overridden by an access:
            <code language="X#">
                CLASS MyClass
                	EXPORT x
                ACCESS y CLASS MyClass
                FUNCTION Start()
                	LOCAL o AS MyClass
                	o := MyClass{}
                ?IsAccess(o,#x)			// FALSE
                ?IsAccess(o,#y)			// TRUE
            </code></returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsArray(XSharp.__Usual)">
      <summary>
            Determine if a value is an array.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is an array; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsAssign(System.Object,System.String)">
      <summary>
            Check whether a particular assign method can be sent to an object.
        </summary>
      <param name="oObject">An object.</param>
      <param name="symAssign">The assign method name.</param>
      <returns>
            TRUE if the specified assign method is defined for the class of the specified object; otherwise, FALSE.
            <br />



            This example checks if x and y of CLASS MyClass are true instance variables or if they are overridden by an assign:
            <code language="X#">
                CLASS MyClass
                	EXPORT x
                ASSIGN y(a) CLASS MyClass
                FUNCTION Start()
                	LOCAL o AS MyClass
                	o := MyClass{}
                ?IsAssign(o,#x)			// FALSE
                ?IsAssign(o,#y)			// TRUE
            </code></returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsBinary(XSharp.__Usual)">
      <summary>
            Determine if a value is a Binary.
            </summary>
      <param name="uVal">The value to examine.</param>
      <returns>TRUE if the value is a Binary data type; otherwise, FALSE. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsByRef(XSharp.__Usual)">
      <summary>
            Determine if a value is passed by reference
            </summary>
      <param name="uVal">The value to examine.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsClass(System.String)">
      <summary>
            Determine if a class exists.
        </summary>
      <param name="symClassName">The symbol of the class to examine.</param>
      <returns>
            TRUE if the class exists; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsClassOf(System.String,System.String)">
      <summary>
            Determine if one class is a subclass of another class.
        </summary>
      <param name="symClassName">The symbol of the class to examine.</param>
      <param name="symSuperClassName">The symbol of the superclass to examine.</param>
      <returns>
            TRUE if <paramref name="symClassName" /> inherits from <paramref name="symSuperClassName" />; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsCodeBlock(XSharp.__Usual)">
      <summary>
            Determine if a value is a code block.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is a code block; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsCurrency(XSharp.__Usual)">
      <summary>
            Determine if a value is a Currency.
            </summary>
      <param name="uVal">The value to examine.</param>
      <returns>TRUE if the value is a Currency data type; otherwise, FALSE. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsDate(XSharp.__Usual)">
      <summary>
            Determine if a value is a DATE.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is a DATE data type; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsDateTime(XSharp.__Usual)">
      <summary>
            Determine if a value is a DateTime.
            </summary>
      <param name="uVal">The value to examine.</param>
      <returns>TRUE if the value is a DATETIME data type; otherwise, FALSE. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsDecimal(XSharp.__Usual)">
      <summary>
            Determine if a value is a Decimal.
            </summary>
      <param name="uVal">The value to examine.</param>
      <returns>TRUE if the value is a Decimal data type; otherwise, FALSE. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsFloat(XSharp.__Usual)">
      <summary>
            Determine if a value is a FLOAT.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is the FLOAT data type; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsFractional(XSharp.__Usual)">
      <summary>
            Determine if a value is a Decimal or a Float
            </summary>
      <param name="uVal">The value to examine.</param>
      <returns>TRUE if the value is a Decimal, Currency or Float data type; otherwise, FALSE. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsInstanceOf(System.Object,System.String)">
      <summary>
            Determine if an object is an instance of a class.
        </summary>
      <param name="oObject">The object to check for.</param>
      <param name="symClassName">A symbolic representation of the class.</param>
      <returns>
            TRUE if <paramref name="oObject" /> is an instance of <paramref name="symClassName" />; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsInstanceOfUsual(XSharp.__Usual,System.String)">
      <summary>
            Determine if an object inside a USUAL is an instance of a class.
        </summary>
      <param name="uObject">A USUAL type containing the object to check for.</param>
      <param name="symClassName">A symbolic representation of the class.</param>
      <returns>
            TRUE if <paramref name="uObject" /> is an instance of <paramref name="symClassName" />; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsInt64(XSharp.__Usual)">
      <summary>
            Determine if a value is a INT64.
            </summary>
      <param name="uVal">The value to examine.</param>
      <returns>TRUE if the value is a INT64 data type; otherwise, FALSE. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsInteger(XSharp.__Usual)">
      <summary>
            Determine if a value is an integer (LONG or INT64).
            </summary>
      <param name="uVal">The value to examine.</param>
      <returns>TRUE if the value is a LONG or INT64 data type; otherwise, FALSE. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsLogic(XSharp.__Usual)">
      <summary>
            Determine if a value is a logical.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is the LOGIC data type; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsLong(XSharp.__Usual)">
      <summary>
            Determine if a value is a LONGINT.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is the LONGINT data type; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsMethod(System.Object,System.String)">
      <summary>
            Check whether a particular method can be sent to an object.
        </summary>
      <param name="oObject">An object.</param>
      <param name="symMethod">The method name, specified without parentheses.</param>
      <returns>
            TRUE if the specified method is defined for the class of the specified object; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsMethodClass(System.String,System.String)">
      <summary>
            Check whether a particular method can be sent to a class.
        </summary>
      <param name="symClass">A class name as symbol.</param>
      <param name="symMethod">The method name, specified without parentheses.</param>
      <returns>
            TRUE if the specified method is defined for the class of the specified object; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsMethodUsual(XSharp.__Usual,System.String)">
      <summary>
            Check whether a particular method can be sent to an object inside a USUAL.
        </summary>
      <param name="uObject">A USUAL containing an object.</param>
      <param name="symMethod">The method name, specified without parentheses.</param>
      <returns>
            TRUE if the specified method is defined for the class of the specified object; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsNil(XSharp.__Usual)">
      <summary>
            Determine if a value is NIL.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is NIL; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsNumeric(XSharp.__Usual)">
      <summary>
            Determine if a value is a numeric.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is a numeric; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsObject(XSharp.__Usual)">
      <summary>
            Determine if a value is an object.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is an object; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsPtr(XSharp.__Usual)">
      <summary>
            Determine if a value is a pointer.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is a pointer; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsString(XSharp.__Usual)">
      <summary>
            Determine if a value is a string.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is a string; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IsSymbol(XSharp.__Usual)">
      <summary>
            Determine if a value is a symbol.
        </summary>
      <param name="uValue">The value to examine.</param>
      <returns>
            TRUE if the value is a symbol; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IVarGet(System.Object,System.String)">
      <summary>
            Return the contents of an exported instance variable.
        </summary>
      <param name="oObject">The object containing the exported instance variable.</param>
      <param name="symInstanceVar">The exported instance variable to get.</param>
      <returns>
            The value of <paramref name="symInstanceVar" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IVarGetInfo(System.Object,System.String)">
      <summary>
            Get information about how a particular instance variable (or access method) was declared.
        </summary>
      <param name="oObject">The object containing the instance variable.</param>
      <param name="symInstanceVar">The instance variable that you want information about.</param>
      <returns>
            A numeric value that can be interpreted as follows:
            wIvarInfo	Description	
            0	Not found	
            1	INSTANCE declaration	
            2	EXPORT declaration	
            3	ACCESS declaration	
            Note:  PROTECT and HIDDEN variables cannot be tested with this function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IVarGetSelf(System.Object,System.String)">
      <summary>
            Return the contents of an instance variable.
        </summary>
      <param name="oObject">The object containing the instance variable.</param>
      <param name="symInstanceVar">The instance variable to get.</param>
      <returns>
            The value of <paramref name="symInstanceVar" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IvarList(System.Object)">
      <summary>
            Store all instance variables of an object into an array.
        </summary>
      <param name="oObject">The object containing the instance variable to store.</param>
      <returns>
            An array of symbols containing the name of all instance variables and access methods of <paramref name="oObject" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IvarListClass(System.String)">
      <summary>
            Store all instance variables of a class into an array.
        </summary>
      <param name="symClass">The class containing the instance variable to store.</param>
      <returns>
            An array of symbols containing the name of all instance variables and access methods of <paramref name="symClass" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IVarPut(System.Object,System.String,XSharp.__Usual)">
      <summary>
            Assign a value to an exported instance variable.
        </summary>
      <param name="oObject">The object containing the exported instance variable.</param>
      <param name="symInstanceVar">The exported instance variable to assign a value to.</param>
      <param name="uValue">The value to assign to the exported instance variable.</param>
      <returns>
            The value assigned to <paramref name="symInstanceVar" /> (<paramref name="uValue" />).
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IVarPutInfo(System.Object,XSharp.__Symbol)">
      <summary>
            Get information about how a particular instance variable (or assign method) was declared.
        </summary>
      <param name="oObject">The object containing the instance variable.</param>
      <param name="symInstanceVar">The instance variable that you want information about.</param>
      <returns>
            A numeric value that can be interpreted as follows:
            wIvarInfo	Description	
            0	Not found	
            1	INSTANCE declaration	
            2	EXPORT declaration	
            3	ASSIGN declaration	
            Note:  PROTECT and HIDDEN variables cannot be tested with this function.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.IVarPutSelf(System.Object,System.String,XSharp.__Usual)">
      <summary>
            Assign a value to an instance variable.
        </summary>
      <param name="oObject">The object containing the instance variable.</param>
      <param name="symInstanceVar">The instance variable to assign a value to.</param>
      <param name="uValue">The value to assign to the instance variable.</param>
      <returns>
            The value assigned to <paramref name="symInstanceVar" /> (<paramref name="uValue" />).
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.JCDOW(XSharp.__Date)">
      <summary></summary>
      <param name="d"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.JCMONTH(XSharp.__Date)">
      <summary></summary>
      <param name="d"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.JCYEAR(XSharp.__Date)">
      <summary></summary>
      <param name="d"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.LastRec">
      <summary>
            Return the number of the last record in a database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The number of physical records in a database file.  Filtering or deleted settings have no effect on the return value.  LastRec() returns 0 if there is no database file in use.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.LastRec(XSharp.__Usual)">
      <summary>
            Return the number of the last record in a database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The number of physical records in a database file.  Filtering or deleted settings have no effect on the return value.  LastRec() returns 0 if there is no database file in use.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Len(XSharp.__Usual)">
      <summary>
            Return the length of a string or an array.
        </summary>
      <param name="uValue">
            The string or array to measure.  In a string, each byte counts as 1, including an embedded null character (Chr(0)).<br />
            A NULL_STRING counts as 0.  In an array, each element counts as 1.
        </param>
      <returns>
            The length of <paramref name="uValue" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.LOG(XSharp.__Usual)">
      <summary>
            Calculate the natural logarithm of a numeric value.
        </summary>
      <param name="nValue">A number greater than 0 to convert to its natural logarithm.</param>
      <returns>
            The natural logarithm of <paramref name="nValue" />.<br />
            If <paramref name="nValue" /> is less than or equal to 0, Log() generates a numeric overflow.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Log10(XSharp.__Usual)">
      <summary>
            Calculate the common logarithm of a numeric value.
        </summary>
      <param name="nValue">A number greater than 0 to convert to its common logarithm.</param>
      <returns>
            The common logarithm of <paramref name="nValue" />.<br />
            If <paramref name="nValue" /> is less than or equal to 0, Log10() generates a run-time error.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.LUpdate">
      <summary>
            Return the date a database file was last modified and closed.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The date of last change.<br />
            If there is no database file in use, LUpdate() returns a NULL_DATE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.LUpdate(XSharp.__Usual)">
      <summary>
            Return the date a database file was last modified and closed.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The date of last change.<br />
            If there is no database file in use, LUpdate() returns a NULL_DATE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MAssign(System.String,XSharp.__Usual)">
      <summary>
            Perform an assignment to a variable whose name is stored in a specified string.
        </summary>
      <param name="cExp">
            The string containing the variable name you want to assign <paramref name="uValue" /> to.
        </param>
      <param name="uValue">The value to assign.</param>
      <returns>
            The assigned value.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Max(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the larger of 2 values.
        </summary>
      <param name="uValue1">The first value to compare.</param>
      <param name="uValue2">
            The second value to compare.<br />
            This must be of the same type as <paramref name="uValue1" /> except that numerics of different types are allowed.
        </param>
      <returns>
            The larger of the 2 arguments.<br />
            The value returned is the same type as the larger argument.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MaxAtom">
      <summary>
            Determine the number of Symbols in the atom table.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MCompile(System.String)">
      <summary>
            Macro compile a string.
        </summary>
      <param name="cString">The string to compile.</param>
      <returns>
            The string in a macro-compiled form.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MCompile(System.String,System.Boolean)">
      <summary>
            Macro compile a string.
        </summary>
      <param name="cString">The string to compile.</param>
      <param name="lAllowSingleQuotes">Should single quotes be allowed as string delimiters</param>
      <returns>
            The string in a macro-compiled form.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Mem2String(System.IntPtr,System.UInt32)">
      <summary>
            Extract a substring of a certain size from the left of a buffer.
        </summary>
      <param name="ptrSource">Pointer to the buffer from which to extract the substring.</param>
      <param name="dwCount">
            The number of bytes, from the left, to extract from <paramref name="ptrSource" />.
        </param>
      <returns>
            A substring of the specified number of bytes.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemAlloc(System.UInt32)">
      <summary>
            Allocate a static memory buffer of a specified size.
        </summary>
      <param name="wBytes">The number of bytes to allocate.</param>
      <returns>
            A pointer to the allocated space if there is sufficient memory available; otherwise, it returns a NULL_PTR.  You should always check the return value for a successful allocation.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemAtSpecial(System.IntPtr,System.UInt32)">
      <summary>
            Get the location of the first special console character in a buffer.
        </summary>
      <param name="ptrBuffer">A pointer to a buffer.</param>
      <param name="dwCount">
            The number of bytes in <paramref name="ptrBuffer" /> to check.
        </param>
      <returns>
            The location of the first special console character within the specified portion of <paramref name="ptrBuffer" />.<br />
            If a special console character does not exist, MemAtSpecial() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemByte(System.IntPtr,System.Byte,System.UInt32)">
      <summary>
            Get a pointer to a byte in a memory buffer.
        </summary>
      <param name="ptrBuffer">A pointer to the memory buffer to examine.</param>
      <param name="bChar">The byte value to match.</param>
      <param name="dwCount">
            The number of bytes in <paramref name="ptrBuffer" /> to examine.
        </param>
      <returns>
            A pointer to the first occurrence of <paramref name="bChar" /> within the first <paramref name="dwCount" /> bytes of <paramref name="ptrBuffer" />.<br />
            If <paramref name="bChar" /> is not matched, MemChr() returns a NULL_PTR.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemCAlloc(System.UInt32,System.UInt32)">
      <summary>
            Allocate static memory buffers of a specified size.
        </summary>
      <param name="wItems">The number of items to allocate memory for.</param>
      <param name="wBytes">The number of bytes to allocate for each item.</param>
      <returns>
            A pointer to the allocated space if there is sufficient memory available; otherwise, a NULL_PTR.  You should always check the return value from MemCAlloc() for a successful allocation.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemChr(System.IntPtr,System.Byte,System.UInt32)">
      <summary>
            Get a pointer to a matching character value in a memory buffer.
        </summary>
      <param name="ptrBuffer">A pointer to the memory buffer to examine.</param>
      <param name="dwChar">Word representation of the character to match.</param>
      <param name="dwCount">
            The number of characters in <paramref name="ptrBuffer" /> to examine.
        </param>
      <returns>
            A pointer to the first occurrence of <paramref name="dwChar" /> within the first <paramref name="dwCount" /> characters of <paramref name="ptrBuffer" />.<br />
            If <paramref name="dwChar" /> is not matched, MemChr() returns a NULL_PTR.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemClear(System.IntPtr,System.UInt32)">
      <summary>
            Fill a memory buffer with null characters.
        </summary>
      <param name="ptrDest">A pointer to the memory buffer to fill.</param>
      <param name="dwCount">The number of bytes to fill.</param>
      <returns>
            A pointer to the filled memory buffer.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemComp(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>
            Compare bytes in two memory buffers.
        </summary>
      <param name="ptrFirst">A pointer to the first memory buffer.</param>
      <param name="ptrSecond">A pointer to the second memory buffer.</param>
      <param name="dwCount">The number of bytes to compare.</param>
      <returns>
            -1, 0, or 1 if the first <paramref name="dwCount" /> bytes of <paramref name="ptrFirst" /> are less than, equal to, or greater than the first <paramref name="dwCount" /> bytes of <paramref name="ptrSecond" />, respectively.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemCopy(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>
            Copy one memory buffer to another.
        </summary>
      <param name="ptrDest">A pointer to the destination memory buffer.</param>
      <param name="ptrSource">A pointer to the source string to copy.</param>
      <param name="dwCount">The number of bytes to copy.</param>
      <returns>
            A pointer to the destination memory buffer.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemCopyString(System.IntPtr,System.String,System.UInt32)">
      <summary>
            Copy one memory buffer to another and fill any remaining spaces with blanks.
        </summary>
      <param name="ptrDest">A pointer to the destination memory buffer.</param>
      <param name="cSource">The source string to copy.</param>
      <param name="dwCount">The number of bytes to copy.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemDWord(System.IntPtr,System.UInt32,System.UInt32)">
      <summary>
            Get a pointer to a matching double word in a memory buffer.
        </summary>
      <param name="ptrBuffer">A pointer to the memory buffer to examine.</param>
      <param name="dwValue">The double word value to match.</param>
      <param name="dwCount">
            The number of double words in <paramref name="ptrBuffer" /> to examine.
        </param>
      <returns>
            A pointer to the first occurrence of <paramref name="dwValue" /> within the first <paramref name="dwCount" /> characters of <paramref name="ptrBuffer" />.<br />
            If <paramref name="dwValue" /> is not matched, MemDWord() returns a NULL_PTR.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemFree(System.IntPtr)">
      <summary>
            Deallocate a specified memory buffer.
        </summary>
      <param name="ptrBuffer">
            A pointer to a previously allocated memory buffer.<br />
            If an invalid pointer is specified, a message box informs you of the failed attempt.
        </param>
      <returns>
            0 if successful; otherwise, 65,535.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemGrpAlloc(System.UInt32,System.UInt32)">
      <summary>
            Allocate a new memory buffer in a group.
        </summary>
      <param name="wGroup">
            The group to which the newly allocated memory buffer will belong.<br />
            This group should have already been opened by MemGrpOpen().
        </param>
      <param name="wBytes">The number of bytes to allocate.</param>
      <returns>
            A pointer to the newly allocated space if there is sufficient memory available; otherwise, a NULL_PTR is returned.  You should always check the return value for a successful allocation.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemGrpCAlloc(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Allocate static memory buffers of a specified size.
        </summary>
      <param name="wGroup">The group to which the newly allocated memory buffer will belong. This group should have already been opened by MemGrpOpen().</param>
      <param name="wItems">The number of items to allocate memory for.</param>
      <param name="wBytes">The number of bytes to allocate for each item.</param>
      <returns>
            A pointer to the allocated space if there is sufficient memory available; otherwise, a NULL_PTR.  You should always check the return value from MemCAlloc() for a successful allocation.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemGrpClose(System.UInt32)">
      <summary>
            Close a memory group.
        </summary>
      <param name="wGroup">
            The group you want to close.<br />
            If an invalid group is specified, a message box informs you of the failed attempt to close an invalid group.
        </param>
      <returns>
            0 if successful; otherwise, 65,535.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemGrpEnum(System.UInt32,XSharp.RT.MemWalker)">
      <summary>
            Enumerate all the pointers allocated in a memory group
            </summary>
      <param name="dwGroup">The group you want to compact</param>
      <param name="pEnum">MemWalker Delegate</param>
      <returns>TRUE when all delegate calls return TRUE</returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemGrpOpen">
      <summary>
            Open up a new memory group.
        </summary>
      <returns>
            If successful, the handle of the new group; otherwise, 0.  You should always check for a valid group handle.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemInt(System.IntPtr,System.Int32,System.UInt32)">
      <summary>
            Get a pointer to a matching integer in a memory buffer.
        </summary>
      <param name="ptrBuffer">A pointer to the memory buffer to examine.</param>
      <param name="iValue">An integer to match.</param>
      <param name="dwCount">
            The number of integers in <paramref name="ptrBuffer" /> to examine.
        </param>
      <returns>
            A pointer to the first occurrence of <paramref name="iValue" /> within the first <paramref name="dwCount" /> integers of <paramref name="ptrBuffer" />.<br />
            If <paramref name="iValue" /> is not matched, MemInt() returns a NULL_PTR.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemLen(System.IntPtr)">
      <summary></summary>
      <param name="dwGroup"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemLong(System.IntPtr,System.Int32,System.UInt32)">
      <summary>
            Get a pointer to a matching long integer in a memory buffer.
        </summary>
      <param name="ptrBuffer">A pointer to the memory buffer to examine.</param>
      <param name="liValue">The long integer value to match.</param>
      <param name="dwCount">
            The number of long integers in <paramref name="ptrBuffer" /> to examine.
        </param>
      <returns>
            A pointer to the first occurrence of <paramref name="liValue" /> within the first <paramref name="dwCount" /> long integers of <paramref name="ptrBuffer" />.<br />
            If <paramref name="liValue" /> is not matched, MemLong() returns a NULL_PTR.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemLower(System.IntPtr,System.UInt32)">
      <summary></summary>
      <param name="pMemory"></param>
      <param name="dwCount"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemMove(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>
            Move one memory buffer to another.
        </summary>
      <param name="ptrDest">A pointer to the destination memory buffer.</param>
      <param name="ptrSource">A pointer to the source memory buffer.</param>
      <param name="dwCount">The number of bytes to copy.</param>
      <returns>
            A pointer to the destination memory buffer.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemoTran(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Replace carriage-return/linefeeds with a character that can be displayed.
        </summary>
      <param name="cTarget">The string that contains the carriage-return/linefeed.</param>
      <param name="cReplaceHardCR">
            The character to replace a hard carriage-return/linefeed pair with.<br />
            The default is a semicolon (;).
        </param>
      <param name="cReplaceSoftCR">
            The character to replace a soft carriage-return/linefeed pair with.<br />
            The default is a space.
        </param>
      <returns>
            A copy of <paramref name="cString" /> with the specified carriage-return/linefeed pairs replaced.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemRealloc(System.IntPtr,System.UInt32)">
      <summary>
            ReAllocate a static memory buffer of a specified size.
            </summary>
      <param name="pBuffer" />
      <param name="nSize" />
      <returns>Returns the original pointer when the nSize parameter is smaller or equal to the current size.<br /></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemSet(System.IntPtr,System.Byte,System.UInt32)">
      <summary>
            Fill a memory buffer with a specified character.
        </summary>
      <param name="ptrBuffer">A pointer to the memory buffer to fill.</param>
      <param name="bValue">The code for the character, as a number from 0 to 255.</param>
      <param name="wCount">The number of bytes to fill.</param>
      <returns>
            A pointer to the filled memory buffer.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemShort(System.IntPtr,System.Int16,System.UInt32)">
      <summary>
            Get a pointer to a matching short integer in a memory buffer.
        </summary>
      <param name="ptrBuffer">A pointer to the memory buffer to examine.</param>
      <param name="siValue">The short integer value to match.</param>
      <param name="dwCount">
            The number of short integers in <paramref name="ptrBuffer" /> to examine.
        </param>
      <returns>
            A pointer to the first occurrence of <paramref name="siValue" /> within the first <paramref name="dwCount" /> short integers of  <paramref name="ptrBuffer" />.<br />
            If <paramref name="siValue" /> is not matched, MemShort() returns a NULL_PTR.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemTotal">
      <summary>
            Report the total number of bytes used by other memory manager functions.
        </summary>
      <returns>
            The total memory consumed by memory manager functions.<br />
            This value is rounded or accurate within 4 KB increments.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemTrace">
      <summary>Retrieve memory tracing state.</summary>
    </member>
    <member name="M:XSharp.RT.Functions.MemTrace(System.Boolean)">
      <summary>Enable / disable memory tracing</summary>
    </member>
    <member name="M:XSharp.RT.Functions.MemUpper(System.IntPtr,System.UInt32)">
      <summary></summary>
      <param name="pMemory"></param>
      <param name="dwCount"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarBlock(System.String)">
      <summary>
            Return a set-get code block for a given memory variable.
        </summary>
      <param name="cMemvarName">The name of the variable referred to by the set-get block.</param>
      <returns>
            A runtime code block (implemented as an object) that, when evaluated, sets (assigns) or gets (retrieves) the value of <paramref name="cMemvarName" />.<br />
            If <paramref name="cMemvarName" /> does not exist, MemVarBlock() returns a NULL_OBJECT.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarBlockSym(XSharp.__Symbol)">
      <summary>
            Return a set-get code block for a given memory variable.
        </summary>
      <param name="symVar">The name of the variable .</param>
      <param name="cMemvarName">The name of the variable referred to by the set-get block.</param>
      <returns>
            A runtime code block (implemented as an object) that, when evaluated, sets (assigns) or gets (retrieves) the value of <paramref name="cMemvarName" />.<br />
            If <paramref name="cMemvarName" /> does not exist, MemVarBlock() returns a NULL_OBJECT.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarClear(System.String)">
      <summary>
            Release a memory variable
            </summary>
      <param name="symVar">The name of the variable you want to clear. </param>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarGet(System.String)">
      <summary>
            Return the contents of a memory variable.
        </summary>
      <param name="cVarName">The name of the memory variable.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarGetSym(XSharp.__Symbol)">
      <summary>
            Return the contents of a memory variable.
        </summary>
      <param name="symVar">The name of the variable .</param>
      <param name="cVarName">The name of the memory variable.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarPut(System.String,XSharp.__Usual)">
      <summary>
            Assign a value to a memory variable of a given name.
        </summary>
      <param name="cVarName">The name of the variable you want to create.</param>
      <param name="uValue">The value to assign to the variable.</param>
      <returns>
            The value assigned to <paramref name="uValue" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarPutSym(XSharp.__Symbol,XSharp.__Usual)">
      <summary>
            Assign a value to a memory variable of a given name.
        </summary>
      <param name="symVar">The name of the variable you want to assign to.</param>
      <param name="cVarName">The name of the variable you want to create.</param>
      <param name="uValue">The value to assign to the variable.</param>
      <returns>
            The value assigned to <paramref name="uValue" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarRelease(System.String)">
      <summary>
            Release a memory variable
            </summary>
      <param name="symVar">The name of the variable you want to release. </param>
    </member>
    <member name="M:XSharp.RT.Functions.MemVarTryGet(System.String,XSharp.__Usual@)"></member>
    <member name="M:XSharp.RT.Functions.MemWalk(XSharp.RT.MemWalker)">
      <summary>
            Walk through the memory system, checking for validity.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MemWord(System.IntPtr,System.UInt16,System.UInt32)">
      <summary>
            Get a pointer to a matching word in a memory buffer.
        </summary>
      <param name="ptrBuffer">A pointer to the memory buffer to examine.</param>
      <param name="dwValue">The word value to match.</param>
      <param name="dwCount">
            The number of words in <paramref name="ptrBuffer" /> to examine.
        </param>
      <returns>
            A pointer to the first occurrence of <paramref name="dwValue" /> within the first <paramref name="dwCount" /> words of <paramref name="ptrBuffer" />.<br />
            If <paramref name="dwValue" /> is not matched, MemWord() returns a NULL_PTR.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MethodList(System.Object)">
      <summary>
            Create a class list in the form of an array for the specified object.
        </summary>
      <param name="oClass">The object whose methods you want to list.</param>
      <returns>
            An array of symbols containing the name of all methods defined for <paramref name="symObject" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MethodListClass(System.String)">
      <summary>
            Create a class list in the form of an array for the specified class.
        </summary>
      <param name="symClass">The class whose methods you want to list.</param>
      <returns>
            An array of symbols containing the name of all methods declared for <paramref name="symClass" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MExec(XSharp.Codeblock)">
      <summary>
            Evaluate a macro-compiled string.
        </summary>
      <param name="oBlock">The macro-compiled string.</param>
      <returns>
            The value of the compiled expression.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Min(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the smaller of 2 values.
        </summary>
      <param name="dValue1">The first value to compare.</param>
      <param name="dValue2">The second value to compare.</param>
      <param name="uValue1">The first value to compare.</param>
      <param name="uValue2">
            The second value to compare.<br />
            This must be of the same type as <paramref name="uValue1" /> except that numerics of different types are allowed.
        </param>
      <returns>
            The smaller of the 2 arguments.<br />
            The value returned is the same type as the smaller argument.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MLCount(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Count the number of lines in a string.
        </summary>
      <param name="cString">The string to count.</param>
      <param name="nLineLength">
            The number of characters per line, ranging from 4 to 254.<br />
            The default line length is 79.
        </param>
      <param name="nTabSize">
            The number of characters to insert when the user presses the tab key.<br />
            The default value is 4.<br />
            If <paramref name="nTabSize" /> is greater than or equal to <paramref name="nLineLength" />, the tab size is automatically converted to <paramref name="nLineLength" /> minus 1.
        </param>
      <param name="lWrap">
            Controls whether words wrap to the next line:  TRUE if they wrap; FALSE if they do not.<br />
            The default is TRUE.
        </param>
      <returns>
            The number of lines in <paramref name="cString" />, depending on the <paramref name="nLineLength" />, the <paramref name="nTabSize" />, and whether word wrapping is on or off.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MLcToPos(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the position of a character in a formatted string.
        </summary>
      <param name="cText">A string.</param>
      <param name="nWidth">
            The length of each line after <paramref name="cText" /> is formatted.
        </param>
      <param name="nLine">The line number in the formatted text, starting from the top at 1.</param>
      <param name="nCol">The column number in the formatted text, starting from the left at 0.</param>
      <param name="nTabSize">
            The number of characters to insert when the user presses Tab.<br />
            If <paramref name="nTabSize" /> is not specified, 4 spaces are inserted.
        </param>
      <param name="lWrap">
            The word-wrap flag.<br />
            The default is TRUE.
        </param>
      <returns>
            The byte position of the character within <paramref name="cText" />, counting from 1.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MLPos(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Determine the position of a line in a string.
        </summary>
      <param name="cText">A string.</param>
      <param name="nWidth">
            The length of each line after <paramref name="cText" /> is formatted.
        </param>
      <param name="nLine">The line number in the formatted text, starting from the top at 1.</param>
      <param name="nTabSize">
            The number of characters to insert when the user presses Tab.<br />
            If <paramref name="nTabSize" /> is not specified, 4 spaces are inserted.
        </param>
      <param name="lWrap">
            The word-wrap flag.<br />
            The default is TRUE.
        </param>
      <returns>
            The character position of <paramref name="wLine" /> in <paramref name="cString" />.<br />
            If <paramref name="wLine" /> is greater than the number of lines in <paramref name="cString" />, MLPos() returns the length of <paramref name="cString" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Mod(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the remainder of one number divided by another number.
        </summary>
      <param name="nDividend">The dividend of the division operation.</param>
      <param name="nDivisor">The divisor of the division operation.</param>
      <returns>
            A number representing the remainder of <paramref name="nDividend" /> divided by <paramref name="nDivisor" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Month(XSharp.__Date)">
      <summary>
            Extract the number of the month from a date.
        </summary>
      <param name="dDate">The date.</param>
      <returns>
            A number from 0 to 12.  Specifying a NULL_DATE returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.MParamCount(System.String,System.String)">
      <summary>
            Return the number of arguments that a method is expecting.
        </summary>
      <param name="symClass">The symbol of the class containing the method to examine.</param>
      <param name="symMethod">The method name, specified without parentheses.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.MPosToLc(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the line and column position of a character in a formatted string.
        </summary>
      <param name="cText">A string.</param>
      <param name="nWidth">
            The length of each line after <paramref name="cText" /> is formatted.
        </param>
      <param name="nPos">The byte position within the formatted text, counting from 1.</param>
      <param name="nTabSize">
            The number of characters to insert when the user presses Tab.<br />
            If <paramref name="nTabSize" /> is not specified, 4 spaces are inserted.
        </param>
      <param name="lWrap">
            The word-wrap flag.<br />
            The default is TRUE.
        </param>
      <returns>
            An array containing the line and column numbers for the character at the specified position.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.NewIndexLock(XSharp.__Usual)">
      <summary>
            Return and optionally change the setting that determines whether to use the new locking offset of -1 (0xFFFFFFFF) for .NTX files.
        </summary>
      <param name="lNewSetting">
            TRUE uses the new locking offset.  FALSE uses a locking offset of 1 billion bytes.<br />

            	The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, NewIndexLock() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.NewLocks">
      <summary>
            Return the setting that determines whether to use the new locking offset of -1 (0xFFFFFFFF) for .NTX files.
            Note:  NewLocks() is a compatibility function and therefore not recommended.<br />
            It is superseded by the NewIndexLock() function, which allows you to change and retrieve the setting.  Refer to NewIndexLock() for more information.
        </summary>
      <returns>
            A logical value indicating the current status of NewIndexLock().
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.NoMethod">
      <summary>
            Identify an invalid method call.
        </summary>
      <returns>
            A NULL_SYMBOL is returned if such a method does not exist.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.NTrim(XSharp.__Usual)">
      <summary>
            Convert a numeric expression to a left-trimmed string.
        </summary>
      <param name="nNum">The expression to convert to a string.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Object2Array(System.Object)">
      <summary>
            Convert the values of an object's instance variables to an array.
        </summary>
      <param name="oObject">The object containing the instance variable to convert.</param>
      <returns>
            An array containing the contents of all instance variables of <paramref name="oObject" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Object2Float(System.Object)">
      <summary>
            Convert an object containing a numeric value to a FLOAT
            </summary>
      <param name="oValue">Object containing the numeric value to convert.</param>
      <returns>The value in the form of a float. </returns>
      <exception cref="T:System.InvalidCastException"> Thrown when the parameter oValue cannot be converted to a FLOAT.</exception>
    </member>
    <member name="M:XSharp.RT.Functions.Oem2AnsiBuff(XSharp.__Psz,XSharp.__Psz,System.UInt32)">
      <summary>
            Convert a specified number of OEM characters in a source buffer to a buffer of corresponding, if any, ANSI characters.
        </summary>
      <param name="pszTarget">A pointer to the buffer that will contain the converted string.</param>
      <param name="pszSource">A pointer to the buffer that contains the string to convert.</param>
      <param name="dwCount">The number of characters to convert.</param>
      <returns>
            A pointer to the buffer that contains the converted string.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OOPTree(System.Object)">
      <summary>
            Return a multidimensional array of all object-oriented programming symbols that constitute the class.
        </summary>
      <param name="oObject">The object whose class symbols you want to retrieve.</param>
      <returns>
            Each class occupies an array consisting of the class name, a subarray of instance variables, and a subarray of methods.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OOPTreeClass(System.String)">
      <summary>
            Return a multidimensional array of all object-oriented programming symbols that constitute the class of an object.
        </summary>
      <param name="symClass">The class name whose class symbols you want to retrieve.</param>
      <returns>
            Each class occupies an array consisting of the class name, a subarray of instance variables, and a subarray of methods.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdBagExt">
      <summary>
            Return the default index file extension for a work area as defined by its RDD.
        </summary>
      <returns>
            A string indicating the default index file extension for a work area as defined by its RDD.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdBagName(XSharp.__Usual)">
      <summary>
            Return the index file name of a specific order.
        </summary>
      <param name="uOrder">
            The name of the order whose index file name you want to obtain or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.
        </param>
      <returns>
            The name of the index file containing the order.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdCondSet(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the condition and scope for an order.
        </summary>
      <param name="cForCondition">
            A string that specifies the for condition for the order.<br />
            This string is returned by DBOrderInfo(DBOI_CONDITION, [<paramref name="cIndexFile" />], <paramref name="cOrder" />).
            If you do not need this information, you can specify a NULL_STRING.
        </param>
      <param name="cbForCondition">
        <span>
            A code block that defines a condition that each record within the scope must meet in order to be processed.
        </span>
        <br />
            &gt;
            This condition (not <paramref name="cForCondition" />) is the one that is actually used to create the order.
            Unlike the while condition and other scoping information, the for condition is stored as part of the index file and is used when updating or rebuilding the order with DBReindex().
            Any limitations on the for condition are determined by the RDD
        </param>
      <param name="lAll">
            A value of TRUE specifies a scope of all records.<br />
            Use FALSE if you want to indicate other record scoping conditions (that is, <paramref name="nNext" />, <paramref name="nRecord" />, or <paramref name="lRest" />).<br />
            The default is FALSE.
        </param>
      <param name="cbWhileCondition">
        <span>
            A code block that defines another condition that each record must meet in order
            to be processed.
            As soon as a record is encountered that causes the condition to fail, the operation
            terminates.<br />

            If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

            You define the scope using one of these three, mutually exclusive arguments.<br />
            The default is all records.
        </span>
      </param>
      <param name="cbEval">
            A code block that is evaluated at intervals specified by <paramref name="nInterval" />.<br />
            This is useful in producing a status bar or odometer that monitors the ordering progress.<br />
            The return value of <paramref name="cbEval" /> must be a logical value.<br />
            If <paramref name="cbEval" /> returns FALSE, indexing halts.<br />
            The default is NIL.
        </param>
      <param name="nInterval">
            A numeric expression that determines the number of times <paramref name="cbEval" /> is evaluated.<br />
            This argument offers a performance enhancement by evaluating the condition at intervals instead of for every record processed.<br />
            To step through every record, you can specify a value of 0.<br />
            The default is 0.
        </param>
      <param name="nStart">
            The starting record number.<br />
            To start at the beginning of the file, specify a value of 0.<br />
            The default is 0.<br />

            	You define the scope using one of these three, mutually exclusive arguments (use 0 or FALSE for the others).<br />
            The default is all records.  Record scoping information is used only to create the order.<br />
            It is not stored in the index file and not used for index updates and reindexing purposes.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <param name="lDescend">
            Specifies whether the keyed pairs be sorted in decreasing or increasing order of value.  TRUE results in descending order.  FALSE results in ascending order.<br />
            The default is FALSE.
        </param>
      <param name="lAdditive">
            Specifies whether open orders should remain open while the new order is being created.  TRUE specifies that they should remain open.  FALSE specifies that all open orders should be closed.<br />
            The default is FALSE.
        </param>
      <param name="lCurrent">
            Specifies whether only records in the controlling order — and within the current range as specified by OrdSetScope() — will be included in this order.  TRUE specifies that the controlling order and range should be used to limit the scope of the newly created order.  FALSE specifies that all records in the database file are included in the order.<br />
            The default is FALSE.
        </param>
      <param name="lCustom">
            Specifies whether the new order will be a custom built order (for RDDs that this feature).  TRUE specifies that a custom built order will be created.<br />
            A custom built order is initially empty, giving you complete control over order maintenance.<br />
            The system does not automatically add and delete keys from a custom built order.  Instead, you explicitly add and delete keys using OrdKeyAdd() and OrdKeyDel().  FALSE specifies a standard, system-maintained order.<br />
            The default is FALSE.
        </param>
      <param name="lNoOptimize">
            Specifies whether the FOR condition will be optimized (for RDDs that support this feature).  TRUE optimizes the FOR condition, and FALSE does not.<br />
            The default is FALSE.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdCount">
      <summary>Determines the number of orders for the current work area.  </summary>
      <returns>OrdCount() returns the number of open indexes as a numeric value.
            When no index is open or when no file is open in the current workarea, the return value is 0. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdCreate(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create or replace an order in an index file.
        </summary>
      <param name="cOrder">
            The name of the order to be created.<br />
            For single-order index files, the file name without an extension or path, is the default order name.<br />
            For multiple-order index files, the order name is required.
        </param>
      <param name="cIndexFile">
            The name of the target index file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension is determined by the RDD and can be obtained using DBOrderInfo(DBOI_INDEXEXT).<br />

            	In RDDs that support production indexes , the production index file (that is, one with the same name as the database file) is assumed if <paramref name="cIndexFile" /> is not specified.<br />

            	If <paramref name="cIndexFile" /> does not exist, it is created.<br />

            	If <paramref name="cIndexFile" /> exists, the INDEX command must first obtain exclusive use of the file.<br />
            If the attempt is unsuccessful because, for example, the file is open by another process, NetErr() is set to TRUE.  <br />

            	If the attempt is successful and the RDD specifies that index files can contain only a single order, the current contents of the file is overwritten with the new order.<br />
            If the RDD specifies that index files can contain multiple orders, the order is added to <paramref name="cIndexFile" /> if it does not already exist; otherwise it is replaced.
        </param>
      <param name="cKeyValue">
            The order key expression specified as a string.<br />
            This is the key expression that is stored in the index file and used for such purposes as locating key values and recreating the order.<br />

            	Although <paramref name="cKeyValue" /> is optional, it is highly recommended that you specify this argument.  Without it, the order will be properly created using <paramref name="cbKeyValue" />, but the key expression will be stored in the index file as a NULL_STRING, rendering the order unusable for subsequent access.
        </param>
      <param name="cbKeyValue">
            The order key expression specified as a code block.<br />
            This code block is used to initially create the order.<br />
            If you do not supply <paramref name="cbKeyValue" />, it is macro-compiled from <paramref name="cKeyValue" /> (for example, {||&amp;<paramref name="cKeyValue" />}).<br />

            	The data type of the key expression and all other limitations, including the length of the key and the key expression, are determined by the RDD.
        </param>
      <param name="lUnique">
            TRUE creates a unique order by including only those records with unique key values; FALSE uses all records in the database file.<br />
            If <paramref name="lUnique" /> is omitted, the SetUnique() setting is used.Note that keys from deleted records are also included in the index, and may hide keys from non-deleted records.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdDescend(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return and optionally change the descending flag of an order.
        </summary>
      <param name="uOrder">
            The name of the order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.<br />
            If omitted or NIL, the controlling order is assumed.<br />

            	Specifying an invalid value will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <param name="lNewDescend">TRUE dynamically turns on the descending flag for the order, resulting in descending order.  FALSE dynamically turns the flag off, resulting in ascending order.</param>
      <returns>
            If <paramref name="lNewDescend" /> is not specified, OrdDescend() returns the current setting.<br />
            If <paramref name="lNewDescend" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdDestroy(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Remove an order from an open index file.
        </summary>
      <param name="uOrder">
            The name of the order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.<br />
            The default is NULL_STRING.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdFor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the for condition of an order.
        </summary>
      <param name="uOrder">
            The name of the order whose for condition you want to obtain or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            A string representing the for condition of the specified order.<br />
            If the order was not created with a for condition, the return value will be a NULL_STRING.<br />
            If the RDD does not support the for condition, it can either return a NULL_STRING or cause an error, depending on the RDD.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdIsUnique(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the status of the unique flag for a given order.
        </summary>
      <param name="uOrder">
            The name of the order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.<br />
            If omitted or NIL, the controlling order is assumed.<br />

            	Specifying an invalid order will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            The status of the indicated order's unique flag as a logical value.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdKey(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the key expression of an order.
        </summary>
      <param name="uOrder">
            The name of the order whose key expression you want to obtain or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            A string representing the key expression of the specified order.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdKeyAdd(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a key to a custom built order.
        </summary>
      <param name="uOrder">
            The name of the order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.<br />
            If omitted or NIL, the controlling order is assumed.<br />

            	Specifying an invalid order, such as one that is not custom built, will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <param name="uKeyValue">
            A specific key value that you want to add for the current record.<br />
            The data type must match that of the order.<br />
            If not specified, the order's key expression is evaluated for the current record and added to the order.
        </param>
      <returns>
            TRUE if successful; otherwise FALSE.
            <br />



            From the standard RDDs only the DBFCDX RDD supports Custom Indexes. This RDD does NOT support the use of the <paramref name="uKeyValue" /> parameter. It always uses the Key Expression to calculate the Key Values to insert.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdKeyCount(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the number of keys in an order.
        </summary>
      <param name="uOrder">
            The name of the order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.<br />
            If omitted or NIL, the controlling order is assumed.<br />

            	Specifying an invalid order will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdKeyDel(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Delete a key from a custom built order.
        </summary>
      <param name="uOrder">
            The name of the order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.<br />
            If omitted or NIL, the controlling order is assumed.<br />

            	Specifying an invalid order, such as one that is not custom built, will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdKeyGoto(XSharp.__Usual)">
      <summary>
            Move to a record specified by its logical record number in the controlling order.
        </summary>
      <param name="nKeyNo">
            The logical record number.<br />
            If the value specified does not satisfy the scope or for condition for the order, the record pointer is positioned at the end-of-file.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdKeyNo(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Get the logical record number of the current record.
        </summary>
      <param name="uOrder">
            The name of the order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.<br />
            If omitted or NIL, the controlling order is assumed.<br />

            	Specifying an invalid order will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            The relative position of the current record in the specified order, as a numeric value.  OrdKeyNo() respects the scope and for condition of the order by returning zero if the record pointer is positioned on an invalid record or if EOF() is TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdKeyVal(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Get the key value of the current record from the controlling order.
        </summary>
      <returns>
            The current record's key value.<br />
            The data type of the return value is the same as the that of the key expression used to create the order.<br />
            Use ValType() or UsualType() to determine the data type.
            OrdKeyVal() returns NIL if:
            	The is no controlling order
            	The record pointer is at the end-of-file (EOF() returns TRUE)
            	There is no key defined for this record (for example, you have positioned the record pointer to a record that does not meet the order's for condition or that lies outside of its specified scope)
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdList">
      <summary>Return a list of all tag names for the current work area. </summary>
      <returns>OrdList() returns a one dimensional array holding strings with the tag names of all open indexes.
            When no index is open, an empty array is returned. </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdListAdd(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Open an index file and add specified orders to the order list in a work area.
        </summary>
      <param name="cIndexFile">
            The name of the index file to open, including an optional drive, directory, and extension for each.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension is determined by the RDD and can be obtained using DBOrderInfo(DBOI_INDEXEXT).  <br />

            	If <paramref name="cIndexFile" /> does not exist, a runtime error is raised.<br />
            If it exists and is not already open by the current process, this function attempts to open the file in the same mode as the corresponding database file.<br />
            If access is denied because, for example, another process is using the file and this one is asking for exclusive use, NetErr() is set to TRUE.<br />
            Otherwise, the file open is successful.<br />

            	Concurrency conflicts with index files are rare since they should be used with only one database file.<br />
            If a concurrency problem arises, it will normally be when you attempt to open the database file.
        </param>
      <param name="cOrder">
            The name of a specific order to add.<br />
            If not specified, all orders in the index file are added to the order list.  Invalid values are ignored.<br />

            	Important!<br />
            Using this argument can be dangerous, because the orders in <paramref name="cIndexFile" /> that are not added to the order list will not be kept up to date with changes made to the database file.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdListClear(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Remove orders from the order list in a work area and close associated index files.
        </summary>
      <param name="uOrder">
            The name of the order to clear or a number representing its position in the order list.  <br />

            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  <br />

            If not specified, all orders in the specified index file (or the entire work area, if no index file is specified) are cleared.  <br />

            Invalid values are ignored.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).  <br />

            Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.  <br />

            Use it alone to close only those orders associated with the specified file.<br />

            If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdListRebuild">
      <summary>
            Rebuild all orders in the order list of a work area.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdName(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the name of an order in the order list of a work area.
        </summary>
      <param name="uOrder">
            The name of the order whose name you want to obtain or a number representing its position in the order list.<br />
            Using the position is the preferred method since it is the name you want to obtain.  Invalid values are ignored.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            The name of the specified order.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdNumber(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the position of an order in the order list of a work area.
        </summary>
      <param name="uOrder">
            The name of the order whose position you want to obtain or a number representing its position in the order list.<br />
            Using the order name is the preferred method since it is the position you want to obtain.  Invalid values are ignored.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            A numeric value that is equal to the position of the specified order in the order list.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdScope(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set or clear the boundaries for scoping key values in the controlling order.
        </summary>
      <param name="kScope">A number specifying the top (TOPSCOPE) or bottom (BOTTOMSCOPE) boundary.</param>
      <param name="uNewValue">
            The top or bottom range of key values that will be included in the controlling order's current scope.  <paramref name="uNewValue" /> can be an expression that matches the data type of the key expression in the controlling order or a code block that returns the correct data type.<br />

            	Omitting <paramref name="uNewValue" /> or specifying it as NIL has the special effect of resetting the specified scope to its original default.<br />
            The default top range is the first logical record in the controlling order, and the default bottom range is the last logical record.
        </param>
      <returns>
            If <paramref name="uNewValue" /> is not specified, OrdScope() returns and clears the current setting.<br />
            If <paramref name="uNewValue" /> is specified, the function sets it and the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdSetFocus(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the controlling order for a work area.
        </summary>
      <param name="uOrder">
            The name of the new controlling order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Specifying a value of 0 has the special effect of returning the database file to its natural order.  Specifying an invalid value will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdSetRelation(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Relate a specified work area to the current work area.
        </summary>
      <param name="uArea">The number of the child work area or the alias of the child work area.</param>
      <param name="cbKey">A code block that expresses the relational expression in executable form.</param>
      <param name="cKey">
            An optional string value that expresses the relational expression in textual form.<br />
            If <paramref name="cKey" /> is supplied, it must be equivalent to <paramref name="cbKey" />.<br />
            If <paramref name="cKey" /> is omitted, DBRelation() returns a NULL_STRING for the relation.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.OrdSkipUnique(XSharp.__Usual)">
      <summary>
            Move the record pointer to the next or previous unique key in the controlling order.
        </summary>
      <param name="nDirection">Specifies whether the function will skip to the next or previous key.  Omitting this value or specifying it as 1 skips to the next unique key.  Specifying a negative value skips to the previous key.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Pad(XSharp.__Usual,System.Int32,System.String)">
      <summary>
            Pad character, numeric, and date values with fill characters on the right.
        </summary>
      <param name="uValue">A character, numeric, or date value to pad with a fill character.</param>
      <param name="nLength">The length of the string to return.</param>
      <param name="cFillChar">
            The character with which to pad <paramref name="uValue" />.<br />
            The default is a space character.
        </param>
      <returns>
            A string containing <paramref name="uValue" /> and padded with <paramref name="cFillChar" /> to a total length of <paramref name="nLength" />.<br />
            If the length of <paramref name="uValue" /> exceeds <paramref name="nLength" />, Pad() truncates cPaddedString to <paramref name="nLength" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Pad(XSharp.__Usual,System.UInt32,System.String)">
      <summary>
            Pad character, numeric, and date values with fill characters on the right.
        </summary>
      <param name="uValue">A character, numeric, or date value to pad with a fill character.</param>
      <param name="nLength">The length of the string to return.</param>
      <param name="cFillChar">
            The character with which to pad <paramref name="uValue" />.<br />
            The default is a space character.
        </param>
      <returns>
            A string containing <paramref name="uValue" /> and padded with <paramref name="cFillChar" /> to a total length of <paramref name="nLength" />.<br />
            If the length of <paramref name="uValue" /> exceeds <paramref name="nLength" />, Pad() truncates cPaddedString to <paramref name="nLength" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.PadC(XSharp.__Usual,System.Int32,System.String)">
      <summary>
            Pad character, numeric, and date values with fill characters on both the right and left.
        </summary>
      <param name="uValue">A character, numeric, or date value to pad with a fill character.</param>
      <param name="nLength">The length of the string to return.</param>
      <param name="cFillChar">
            The character with which to pad <paramref name="uValue" />.<br />
            The default is a space character.
        </param>
      <returns>
            A string containing <paramref name="uValue" /> and padded with <paramref name="cFillChar" /> to a total length of <paramref name="nLength" />.<br />
            If the length of <paramref name="uValue" /> exceeds <paramref name="nLength" />, Pad() truncates cPaddedString to <paramref name="nLength" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.PadC(XSharp.__Usual,System.UInt32,System.String)">
      <summary>
            Pad character, numeric, and date values with fill characters on both the right and left.
        </summary>
      <param name="uValue">A character, numeric, or date value to pad with a fill character.</param>
      <param name="nLength">The length of the string to return.</param>
      <param name="cFillChar">
            The character with which to pad <paramref name="uValue" />.<br />
            The default is a space character.
        </param>
      <returns>
            A string containing <paramref name="uValue" /> and padded with <paramref name="cFillChar" /> to a total length of <paramref name="nLength" />.<br />
            If the length of <paramref name="uValue" /> exceeds <paramref name="nLength" />, Pad() truncates cPaddedString to <paramref name="nLength" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.PadL(XSharp.__Usual,System.Int32,System.String)">
      <summary>
            Pad character, numeric, and date values with fill characters on the left.
        </summary>
      <param name="uValue">A character, numeric, or date value to pad with a fill character.</param>
      <param name="nLength">The length of the string to return.</param>
      <param name="cFillChar">
            The character with which to pad <paramref name="uValue" />.<br />
            The default is a space character.
        </param>
      <returns>
            A string containing <paramref name="uValue" /> and padded with <paramref name="cFillChar" /> to a total length of <paramref name="nLength" />.<br />
            If the length of <paramref name="uValue" /> exceeds <paramref name="nLength" />, Pad() truncates cPaddedString to <paramref name="nLength" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.PadL(XSharp.__Usual,System.UInt32,System.String)">
      <summary>
            Pad character, numeric, and date values with fill characters on the left.
        </summary>
      <param name="uValue">A character, numeric, or date value to pad with a fill character.</param>
      <param name="nLength">The length of the string to return.</param>
      <param name="cFillChar">
            The character with which to pad <paramref name="uValue" />.<br />
            The default is a space character.
        </param>
      <returns>
            A string containing <paramref name="uValue" /> and padded with <paramref name="cFillChar" /> to a total length of <paramref name="nLength" />.<br />
            If the length of <paramref name="uValue" /> exceeds <paramref name="nLength" />, Pad() truncates cPaddedString to <paramref name="nLength" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.PadR(XSharp.__Usual,System.Int32,System.String)">
      <summary>
            Pad character, numeric, and date values with fill characters on the right.
        </summary>
      <param name="uValue">A character, numeric, or date value to pad with a fill character.</param>
      <param name="nLength">The length of the string to return.</param>
      <param name="cFillChar">
            The character with which to pad <paramref name="uValue" />h.<br />
            The default is a space character.
        </param>
      <returns>
            A string containing <paramref name="uValue" /> and padded with <paramref name="cFillChar" /> to a total length of <paramref name="nLength" />.<br />
            If the length of <paramref name="uValue" /> exceeds <paramref name="nLength" />, PadR() truncates cPaddedString to <paramref name="nLength" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.PadR(XSharp.__Usual,System.UInt32,System.String)">
      <summary>
            Pad character, numeric, and date values with fill characters on the right.
        </summary>
      <param name="uValue">A character, numeric, or date value to pad with a fill character.</param>
      <param name="nLength">The length of the string to return.</param>
      <param name="cFillChar">
            The character with which to pad <paramref name="uValue" />h.<br />
            The default is a space character.
        </param>
      <returns>
            A string containing <paramref name="uValue" /> and padded with <paramref name="cFillChar" /> to a total length of <paramref name="nLength" />.<br />
            If the length of <paramref name="uValue" /> exceeds <paramref name="nLength" />, PadR() truncates cPaddedString to <paramref name="nLength" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.PaletteRGB(XSharp.__Usual,XSharp.__Usual,System.Byte)">
      <summary>
            Get a particular color from a user-defined palette.
        </summary>
      <param name="bR">The amount of red in the color, as a number from 0 to 255.</param>
      <param name="bG">The amount of green in the color, as a number from 0 to 255.</param>
      <param name="bB">The amount of blue in the color, as a number from 0 to 255.</param>
      <returns>
            The number of the color described, relative to the numbers of the other colors in the palette.<br />
            If the color described does not have a number in the palette, the next closest number is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Pause">
      <summary>
            Display a system modal dialog box to pause the current application.
        </summary>
      <returns>
            A handle for the dialog box.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.PI">
      <summary>
            Returns the numeric constant pi.
        </summary>
      <returns>
            PI( )Return Value
            Numeric
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Pow(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Raise the first argument to the numeric power specified by the second argument.
        </summary>
      <param name="nBase">The base number.</param>
      <param name="nExponent">The power to which to raise the base number.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Psz2String(XSharp.__Psz)">
      <summary>
            Convert a null-terminated string to a strongly typed string.
        </summary>
      <param name="pszString">A null-terminated string.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Psz2Usual(XSharp.__Psz)">
      <summary>
            Convert a null-terminated string to a strongly typed string.
        </summary>
      <param name="pszString">A null-terminated string.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.PszAlloc(XSharp.__Psz)">
      <summary>
            Copy a buffer pointed to by a PSZ to a newly allocated block of memory and return a new pointer to that memory.
        </summary>
      <param name="pszString">A null-terminated string.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.PszLen(XSharp.__Psz)">
      <summary>
            Copy a buffer pointed to by a PSZ to a newly allocated block of memory and return a new pointer to that memory.
        </summary>
      <param name="pszString">A null-terminated string.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.QOut">
      <summary>
            Display the results of one or more expressions in the terminal window to the console.
        </summary>
      <param name="uValueList">
            A comma-separated list of expressions of any data type to display to the console.<br />
            If QOut() is specified without arguments, a carriage return/linefeed pair is displayed.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.QOut(XSharp.__Usual)">
      <summary>
            Display the results of one or more expressions in the terminal window to the console.
        </summary>
      <param name="uValueList">
            A comma-separated list of expressions of any data type to display to the console.<br />
            If QOut() is specified without arguments, a carriage return/linefeed pair is displayed.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.QOut(XSharp.__Usual[])">
      <summary>
            Display the results of one or more expressions in the terminal window to the console.
        </summary>
      <param name="uValueList">
            A comma-separated list of expressions of any data type to display to the console.<br />
            If QOut() is specified without arguments, a carriage return/linefeed pair is displayed.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.QQOut(XSharp.__Usual)">
      <summary>
            Display the results of one or more expressions in the terminal window to the console.
        </summary>
      <param name="uValueList">
            A comma-separated list of expressions of any data type to display to the console.<br />
            If QQOut() is specified without arguments, nothing displays.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.QQOut(XSharp.__Usual[])">
      <summary>
            Display the results of one or more expressions in the terminal window to the console.
        </summary>
      <param name="uValueList">
            A comma-separated list of expressions of any data type to display to the console.<br />
            If QQOut() is specified without arguments, nothing displays.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Rand">
      <summary>
            Return a random number between 0 and 1.
        </summary>
      <param name="nSeed">
            An optional start value.<br />
            This is the point at which the random number generator is initialized.  Subsequent random numbers are then influenced by <paramref name="nSeed" />.<br />

            	If you first call Rand() without <paramref name="nSeed" />, it starts as though 100001 were specified.<br />
            If you call the function with <paramref name="nSeed" /> as 100001, it allows you to restart the generator.<br />
            Then, if you call the function several times without <paramref name="nSeed" />, it returns the "standard sequence" of numbers.<br />

            	If <paramref name="nSeed" /> is less than or equal to 0, the system time is brought into the process.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Rand(XSharp.__Usual)">
      <summary>
            Return a random number between 0 and 1.
        </summary>
      <param name="nSeed">
            An optional start value.<br />
            This is the point at which the random number generator is initialized.  Subsequent random numbers are then influenced by <paramref name="nSeed" />.<br />

            	If you first call Rand() without <paramref name="nSeed" />, it starts as though 100001 were specified.<br />
            If you call the function with <paramref name="nSeed" /> as 100001, it allows you to restart the generator.<br />
            Then, if you call the function several times without <paramref name="nSeed" />, it returns the "standard sequence" of numbers.<br />

            	If <paramref name="nSeed" /> is less than or equal to 0, the system time is brought into the process.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.RddCount">
      <summary>
            Get the number of currently loaded RDDs.
        </summary>
      <param name="kRDDType">
            The types of RDDs to count.<br />
            The types are<br />

            	Constant	Description<br />

            	RDT_FULL	Fully implemented RDDs<br />

            	RDT_TRANSFER	Transfer RDDs<br />

            	RDT_HIDDEN	Specific RDDs<br />

            	If <paramref name="kRDDType" /> is not specified, RDT_FULL + RDT_TRANSFER is assumed.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.RddInfo(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return and optionally change settings controlled directly by the RDD.
        </summary>
      <param name="kInfoType">
            Specifies the setting.<br />
            The initial default of a setting depends on the RDD.<br />

            	The constants are described in the Constants section below.  Note, however, that not all constants are supported for all RDDs.<br />

            	Important!  _SET_USER is a constant that returns the minimum value that third-party RDD developers can use for defining new <paramref name="kInfoType" /> parameters.  Values less than _SET_USER are reserved for CA development.
        </param>
      <param name="uNewSetting">
            If specified, this parameter is used to change the value of a setting.<br />
            The data type (and whether <paramref name="uNewSetting" /> can be specified), depends on the <paramref name="kInfoType" /> constant and is documented in the Constants section below.<br /><br />



            	_SET_AUTOOPEN	Returns and optionally changes the logical flag that determines whether the RDD will open production indexes automatically when a database file is opened.<br />
            A TRUE setting indicates that the production index is opened automatically.<br />

            	_SET_AUTOORDER	Returns and optionally changes the numeric setting that determines whether the production index will set a controlling order.<br />
            A setting of 1 indicates that the first order in the production index will be the controlling order.<br />
            A setting of 0 indicates that database files will be processed in natural order when the production index is initially opened.<br />

            	_SET_AUTOSHARE	Returns and optionally changes the numeric setting that determines the automatic sharing mode.<br />

            	A setting of 0 completely disables automatic sharing control.<br />
            This is primarily useful when developing network applications in a stand-alone environment.<br />

            	A setting of 1 causes the RDD to determine at runtime whether the application is running in a network environment.<br />
            If not, the RDD automatically opens all files in exclusive mode.<br />
            This allows you to write code that is network-aware, while still getting optimal performance when you application is running in single-user mode.<br />

            	A setting of 2 opens all files in exclusive mode, regardless of the current environment.<br />
            Using this mode, you can easily convert an application designed for a network environment to work as a single-user application.<br />
            This is useful if you prefer to deliver separate stand-alone and LAN versions of the application.<br />

            	_SET_BLOB_CIRCULAR_ARRAY_REF<br />

            	Returns and optionally sets the logical flag indicating whether to check for circular array references when storing and retrieving arrays to and from BLOB fields.<br />
            A FALSE setting indicates that the RDD will not check for circular references.<br />

            	The algorithm for storing/retrieving arrays uses a recursive process which will call itself indefinitely if the array has a circular reference, quickly exhausting the program's stack.  You can set RDDInfo(_SET_BLOB_CIRCULAR_ARRAY_REF, TRUE) to cause the algorithm to check for and correctly process circular references.  Note, however, that the checking takes extra time and is unnecessary unless there are circular references.<br />

            	_SET_DEFAULTRDD	Returns the name of the default RDD, specified as a string.<br />

            	_SET_HPLOCKING	Returns and optionally changes the logical flag that determines whether to use the High Performance (HP) locking schema for newly created index files.<br />
            A FALSE setting indicates that the HP locking schema is not used.<br />

            	_SET_MEMOBLOCKSIZE<br />

            	Returns and optionally changes the numeric value specifying block size (in bytes) for memo files.<br />

            	_SET_MEMOEXT	Returns and optionally changes the string value indicating the default memo file extension.<br />

            	_SET_NEWINDEXLOCK<br />

            	Returns and optionally changes the logical flag that determines the locking offset flag for newly created index files.<br />
            A FALSE setting indicates a locking offset that is compatible with Xbase applications but more restrictive than the offset that will be used if this flag is set to TRUE.<br />

            	_SET_OPTIMIZE	Returns and optionally changes the logical flag that determines whether optimization will be used when filtering records in the database files.<br />
            A TRUE setting indicates that the RDD will use the available orders in a work area to make processing a filtered database as efficient as possible.<br />

            	_SET_STRICTREAD	Returns and optionally changes the logical flag that determines whether the RDD will read records directly from disk when creating orders.<br />

            	A FALSE setting indicates that the RDD will read records directly from disk when creating orders, which is the most efficient setting.  However, if you are using a DBF RDD layer that encrypts the database file, this setting will give incorrect results because the RDD will see the encrypted value rather than the actual value of the records.  In order to use the RDD with encryption packages, use RDDInfo(_SET_STRICTREAD, TRUE).<br />
            This setting lets the DBF RDD layer read the records when creating an order.
        </param>
      <returns>
            If <paramref name="uNewSetting" /> is not specified, RDDInfo() returns the current setting.<br />
            If <paramref name="uNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RddList">
      <summary>
            Get a list of RDDs in use.
        </summary>
      <param name="kRDDType">
            The types of RDDs to include in the list.<br />
            The types are:<br />

            	Constant	Description<br />

            	RDT_FULL	Fully implemented RDDs<br />

            	RDT_TRANSFER	Transfer RDDs<br />

            	RDT_HIDDEN	Specific RDDs<br />

            	If <paramref name="kRDDType" /> is not specified, RDT_FULL + RDT_TRANSFER is assumed.
        </param>
      <returns>
            An array with the names of currently loaded RDDs.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RddName">
      <summary>
            Return an RDD name.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.RddSetDefault">
      <summary>
            Return and optionally change the default RDD for the application.
        </summary>
      <param name="cNewSetting">
            The name of the RDD that will be used to activate and manage applications when no RDD is explicitly specified.<br />
            If this RDD is not available to the application, the call has no effect.<br />
            To return the current default RDD, specify NULL_STRING.
        </param>
      <returns>
            If <paramref name="cNewSetting" /> is specified as a NULL_STRING, RDDSetDefault() returns the current default RDD.<br />
            If <paramref name="cNewSetting" /> is specified, the previous default RDD is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RddSetDefault(System.String)">
      <summary>
            Return and optionally change the default RDD for the application.
        </summary>
      <param name="cNewSetting">
            The name of the RDD that will be used to activate and manage applications when no RDD is explicitly specified.<br />
            If this RDD is not available to the application, the call has no effect.<br />
            To return the current default RDD, specify NULL_STRING.
        </param>
      <returns>
            If <paramref name="cNewSetting" /> is specified as a NULL_STRING, RDDSetDefault() returns the current default RDD.<br />
            If <paramref name="cNewSetting" /> is specified, the previous default RDD is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RddVersion(XSharp.__Usual)"></member>
    <member name="M:XSharp.RT.Functions.RecCount">
      <summary>
            Determine the number of records in a database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.RecCount(XSharp.__Usual)">
      <summary>
            Determine the number of records in a database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.RecNo">
      <summary>
            Return the current record number.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The current record number.<br />
            If the work area contains a database file with 0 records, RecNo() returns 1, BOF() and EOF() both return TRUE, and LastRec() returns 0.
            If the record pointer is moved past the last record, RecNo() returns LastRec() + 1 and EOF() returns TRUE.<br />
            If an attempt is made to move before the first record, RecNo() returns the record number of the first logical record in the database file and BOF() returns TRUE.<br />
            If no database file is open, RecNo() will return a 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RecNo(XSharp.__Usual)">
      <summary>
            Return the current record number.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The current record number.<br />
            If the work area contains a database file with 0 records, RecNo() returns 1, BOF() and EOF() both return TRUE, and LastRec() returns 0.
            If the record pointer is moved past the last record, RecNo() returns LastRec() + 1 and EOF() returns TRUE.<br />
            If an attempt is made to move before the first record, RecNo() returns the record number of the first logical record in the database file and BOF() returns TRUE.<br />
            If no database file is open, RecNo() will return a 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RecSize">
      <summary>
            Determine the record length of a database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The record length, in bytes.  RecSize() returns 0 if no database file is open.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RecSize(XSharp.__Usual)">
      <summary>
            Determine the record length of a database file.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            The record length, in bytes.  RecSize() returns 0 if no database file is open.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RegisterAxit(System.Object)">
      <summary>
            Register an object so that it receives an Axit message before being destroyed by the garbage collector.
            </summary>
      <param name="oSource"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.RLock">
      <summary>
            Lock the current record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <param name="cRecordNumberList">
            Specifies that RLOCK( ) attempts to lock multiple records.
            The character expression cRecordNumberList specifies one or more record numbers, separated by commas, that RLOCK( ) attempts to lock.
            For example, to attempt record locks on the first four records in a table, cRecordNumberList should contain 1, 2, 3, 4.
        </param>
      <returns>
            TRUE if the record lock(s) is (are) obtained; otherwise, FALSE.<br />
            If you try to lock more than one record and one of them fails then
            locks that were successful are released again.<br />
            An attempt to lock a record in an empty database returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RLock(System.String,XSharp.__Usual)">
      <summary>
            Lock the current record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <param name="cRecordNumberList">
            Specifies that RLOCK( ) attempts to lock multiple records.
            The character expression cRecordNumberList specifies one or more record numbers, separated by commas, that RLOCK( ) attempts to lock.
            For example, to attempt record locks on the first four records in a table, cRecordNumberList should contain 1, 2, 3, 4.
        </param>
      <returns>
            TRUE if the record lock(s) is (are) obtained; otherwise, FALSE.<br />
            If you try to lock more than one record and one of them fails then
            locks that were successful are released again.<br />
            An attempt to lock a record in an empty database returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RLock(XSharp.__Usual)">
      <summary>
            Lock the current record.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table on which the operation must be performed.
        </span>
      </param>
      <param name="cRecordNumberList">
            Specifies that RLOCK( ) attempts to lock multiple records.
            The character expression cRecordNumberList specifies one or more record numbers, separated by commas, that RLOCK( ) attempts to lock.
            For example, to attempt record locks on the first four records in a table, cRecordNumberList should contain 1, 2, 3, 4.
        </param>
      <returns>
            TRUE if the record lock(s) is (are) obtained; otherwise, FALSE.<br />
            If you try to lock more than one record and one of them fails then
            locks that were successful are released again.<br />
            An attempt to lock a record in an empty database returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Round(XSharp.__Usual,System.Int32)">
      <summary>
            Round a number to a specified number of digits.
        </summary>
      <param name="nNumber">The number to round.</param>
      <param name="siDecimals">
            The number of decimal places to retain.  Specifying a 0 or negative value for <paramref name="siDecimals" />  rounds to whole numbers.<br />
            A negative <paramref name="siDecimals" /> also indicates the number of digits to the left of the decimal point to round (see the example).
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Row">
      <summary>
            Return the screen row position of the cursor in the terminal window.
        </summary>
      <returns>
            The cursor row position.<br />
            The range of the return value is 0 to MaxRow().
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.RToD(XSharp.__Usual)">
      <summary>
            Converts radians to its equivalent in degrees.
            You can use RTOD( ) when working with the X# trigonometric functions COS( ), SIN( ), and TAN( ).
        </summary>
      <param name="nExpression">

            Specifies a numeric expression representing a radian value.
        </param>
      <returns>
            Numeric data type. RTOD( ) returns the number of degrees converted from the number of radians.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Select(XSharp.__Usual)">
      <summary>
            Determine the number of a work area.
        </summary>
      <param name="uWorkArea">
            A value that identifies the work area.<br />
            This can be the number of the work area or its alias, specified either as a symbol or a string.<br />
            If <paramref name="uWorkArea" /> is not specified, the current work area number is returned.<br />
            Therefore, Select() is the same as DBGetSelect().
        </param>
      <returns>
            A number from 0 to 4096.  0 is returned if <paramref name="uWorkArea" /> does not identify a valid work area or does not correspond to a valid alias.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Send(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual[])">
      <summary>
            Invoke a method.
        </summary>
      <param name="oObject">The object whose method is invoked.</param>
      <param name="symMethod">The method name, specified without parentheses.</param>
      <param name="MethodArgList">
            A comma-separated list of arguments to pass to <paramref name="symMethod" />.
        </param>
      <returns>
            The return value of the method.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Set(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Changes and/or reads a system setting.
            </summary>
      <param name="nDefine">Is a positive integer identifying a system setting or system variable.
            This should match the values from the Set enumerated type.</param>
      <param name="newValue">The optional expression can specify a new value for a system setting.
            The data type is dependent on the system setting designated by <paramref name="nDefine" />.</param>
      <returns>When Set() is called without the argument <paramref name="newValue" /> ,
            the function returns the current system setting designated by <paramref name="nDefine" /> .
            If <paramref name="newValue" /> is specified, the corresponding system setting is set to <paramref name="newValue" />
            and the value of the old setting is returned.
            </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SetAlternate"></member>
    <member name="M:XSharp.RT.Functions.SetAlternate(System.Boolean)"></member>
    <member name="M:XSharp.RT.Functions.SetAltFile"></member>
    <member name="M:XSharp.RT.Functions.SetAltFile(System.String,System.Boolean)"></member>
    <member name="M:XSharp.RT.Functions.SetColor(System.String)"></member>
    <member name="M:XSharp.RT.Functions.SetConsole"></member>
    <member name="M:XSharp.RT.Functions.SetConsole(System.Boolean)"></member>
    <member name="M:XSharp.RT.Functions.SetFDateTime(System.String,XSharp.__Date,System.String)">
      <summary>
            Reset the date and time stamps of a File.
        </summary>
      <param name="cFile">The name of the file (optionally including drive and directory information) to modify.</param>
      <param name="dDate">
            The new date to use for the date stamp.<br />
            If not specified, the default is Today().
        </param>
      <param name="cTime">
            The new time string to use for the time stamp.<br />
            If not specified, the default is Time().
        </param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SetFloatDelta">
      <summary>
            Return and optionally change the setting that determines the point at which 2 floating point numbers would be considered equal even though they are different.
        </summary>
      <param name="nNewSetting">The acceptable difference between 2 numbers.</param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetFloatDelta() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SetFloatDelta(System.Double)">
      <summary>
            Return and optionally change the setting that determines the point at which 2 floating point numbers would be considered equal even though they are different.
        </summary>
      <param name="nNewSetting">The acceptable difference between 2 numbers.</param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetFloatDelta() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SetPos(System.Int32,System.Int32)">
      <summary>
            Move the cursor to a new position on the terminal window.
        </summary>
      <param name="iRow">The new row position of the cursor</param>
      <param name="iCol">The new column position of the cursor</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SEval(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Execute a code block for each of the individual characters in a string.
        </summary>
      <param name="cString">The string to scan.</param>
      <param name="cbBlock">The code block to execute for each character encountered.</param>
      <param name="nStart">
            The starting character.<br />
            A negative value starts from the end.<br />
            The default value is 1 if <paramref name="nCount" /> is positive and<br />
            The length of <paramref name="cString" /> if <paramref name="nCount" /> is negative.
        </param>
      <param name="nCount">
            The number of characters to process from <paramref name="nStart" />.<br />
            A negative value steps downward.<br />
            The default is all characters to the end of the string.
        </param>
      <returns>
            A string of characters that have been processed by the code block.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SEvalA(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Execute a code block for each of the individual characters in a string, changing the contents of the argument as well as the return value.
        </summary>
      <param name="cString">The string to scan.</param>
      <param name="cbBlock">The code block to execute for each character encountered.</param>
      <param name="iStart">
            The starting character.<br />
            A negative value starts from the end.<br />
            The default value is 1 if <paramref name="nCount" /> is positive and<br />
            The length of <paramref name="cString" /> if <paramref name="nCount" /> is negative.
        </param>
      <param name="iCount">
            The number of characters to process from <paramref name="iStart" />.<br />
            A negative value steps downward.<br />
            The default is all characters to the end of the string.
        </param>
      <returns>
            A string of characters that have been processed by the code block.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ShowArray(XSharp.__Array,System.String)">
      <summary>Dump the contents of an array to the terminal window</summary>
      <param name="aTest">Array to dump</param>
      <param name="cPrefix">Name to show before the array brackets. Defaults to 'a'</param>
      <returns>Nothing</returns>
    </member>
    <member name="F:XSharp.RT.Functions.ShowErrorDialog_Handler"></member>
    <member name="M:XSharp.RT.Functions.ShowObject(System.Object,System.String)">
      <summary>Dump the contents of an object to the terminal window</summary>
      <param name="oObject">Object to dump</param>
      <param name="cPrefix">Name to show before the field names. Defaults to 'o'</param>
      <returns>Nothing</returns>
    </member>
    <member name="M:XSharp.RT.Functions.ShowPrivates(System.Boolean)">
      <summary>Dump the currently defined privates to the terminal window</summary>
      <param name="lCurrentOnly">Only dump the privates from the current level on the evaluation stack.</param>
      <returns>Nothing</returns>
    </member>
    <member name="M:XSharp.RT.Functions.ShowPublics">
      <summary>Dump the currently defined publics to the terminal window</summary>
      <returns>Nothing</returns>
    </member>
    <member name="M:XSharp.RT.Functions.Sin(XSharp.__Usual)">
      <summary>
            Calculate the sine of a number.
        </summary>
      <param name="nNum">An angle in radians.</param>
      <returns>
            The sine of the specified angle.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SplitPath(System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>
            Break a path name into its components.
        </summary>
      <param name="pszPathName">The path name to break.</param>
      <param name="pszDrive">
            The drive letter followed by a colon.  <paramref name="pszDrive" /> must contain 2 bytes, plus 1 byte for the terminating _Chr(0) character.
        </param>
      <param name="pszDir">
            The directories, including the trailing slash.<br />
            Forward slashes and backslashes both may be present in <paramref name="pszFile" />.<br />
            Forward slashes (/) are converted to backslashes (\).  <paramref name="pszDir" /> must contain 255 bytes, plus 1 byte for the terminating _Chr(0) character.
        </param>
      <param name="pszFile">
            The file name, without the extension.  <paramref name="pszFile" />  must contain 255 bytes, plus 1 byte for the terminating _Chr(0) character.
        </param>
      <param name="pszExt">
            The extension, including the leading period.  <paramref name="pszExt" /> must contain 7 bytes, plus 1 byte for the terminating _Chr(0) character.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SplitPath(XSharp.__Psz,XSharp.__Psz,XSharp.__Psz,XSharp.__Psz,XSharp.__Psz)">
      <summary>
            Break a path name into its components.
        </summary>
      <param name="pszPathName">The path name to break.</param>
      <param name="pszDrive">
            The drive letter followed by a colon.  <paramref name="pszDrive" /> must contain 2 bytes, plus 1 byte for the terminating _Chr(0) character.
        </param>
      <param name="pszDir">
            The directories, including the trailing slash.<br />
            Forward slashes and backslashes both may be present in <paramref name="pszFile" />.<br />
            Forward slashes (/) are converted to backslashes (\).  <paramref name="pszDir" /> must contain 255 bytes, plus 1 byte for the terminating _Chr(0) character.
        </param>
      <param name="pszFile">
            The file name, without the extension.  <paramref name="pszFile" />  must contain 255 bytes, plus 1 byte for the terminating _Chr(0) character.
        </param>
      <param name="pszExt">
            The extension, including the leading period.  <paramref name="pszExt" /> must contain 7 bytes, plus 1 byte for the terminating _Chr(0) character.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SQrt(XSharp.__Usual)">
      <summary>
            Return the square root of a positive number.
        </summary>
      <param name="nNumber">
            A positive number to take the square root of.<br />
            A negative <paramref name="nNumber" /> returns 0.
        </param>
      <returns>
            The number of decimal places displayed is determined solely by SetDecimal() regardless of SetFixed().
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SToD(System.String)">
      <summary>
            Convert an ANSI date string to date format.
        </summary>
      <param name="cDate">
            A date in the ANSI format yyyymmdd.<br />
            The century digits must be specified.<br />
            If <paramref name="cDate" /> contains more than the eight characters required for the date, the extra characters are ignored.
        </param>
      <returns>
            A date in the current SetDateFormat() or SET DATE format. If <paramref name="cDate" /> is not a valid ANSI date, a NULL_DATE is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Str(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Convert a numeric expression to a string.
        </summary>
      <param name="nNumber">The numeric expression to convert to a string.</param>
      <param name="nLength">
            The length of the string to return, including decimal digits, decimal point, and sign.<br />

            	A value of -1 specifies that any right padding is suppressed.  However, decimal places are still returned as specified in <paramref name="nDecimals" />.<br />

            	If <paramref name="nLength" /> is not specified,  SetDigit() and SetDigitFixed() determine the number of digits that are returned.
        </param>
      <param name="nDecimals">
            The number of decimal places in the return value.<br />
            A  value  of -1 specifies that only the significant digits to the right of the decimal point are returned (see example below).<br />
            The number of whole digits in the return value, however, are still determined by the <paramref name="nLength" /> argument.<br />

            	If <paramref name="nDecimals" /> is not specified, SetDecimal() and SetFixed()  determine the number of decimals that are returned.<br />

            	The representation of the decimal point is determined by the current setting of SetDecimalSep().
        </param>
      <returns>
            A string, with these exceptions:
            	 If <paramref name="nNumber" /> is an expression that yields a numeric overflow, a runtime error is generated that could be handled by the currently installed error handler.  Either "+INF" or "-INF", which represent the biggest possible float number, is returned by the error handler.
            	If <paramref name="nLength" /> is less than the number of whole number digits in <paramref name="nNumber" />, the result will be in scientific notation.<br />
            If the result of scientific notation does not fit, a series of asterisk is returned.
            Rounding is determined as follows:
            	If <paramref name="nLength" /> is less than the number of decimal digits required for the decimal portion of the returned string, the return value is rounded to the available number of decimal places.
            	If <paramref name="nLength" /> is specified, but <paramref name="nDecimals" /> is omitted (no decimal places), the return value is rounded to an integer.
            If <paramref name="nLength" /> and <paramref name="nDecimals" /> are not specified, they are taken out of the internal float format inside the FLOAT, or out of SetDigit() if the internal digit number is 0.<br />
            If SetFixed() or SetDigitFixed() is TRUE, these values are overridden by the values of SetDecimal() or SetDigit().
            If SetScience() is TRUE, the return will be in scientific notation. Moreover, If SetDigit() specifies a number that is less than the number of whole number digits in <paramref name="nNumber" /> and SetDigitFixed() is set to TRUE, the result is in scientific notation.  But if scientific notation does not fit, the result is a series of asterisks.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Str1(XSharp.__Usual)">
      <summary>
            Convert a numeric expression to a string.
        </summary>
      <param name="fNumber">The numeric expression to convert.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Str2(XSharp.__Float,System.UInt32)">
      <summary>
            Convert a numeric expression to a string of a specified length.
        </summary>
      <param name="fNumber">The numeric expression to convert.</param>
      <param name="dwLength">
            The length of the string to return, including decimal digits, decimal point, and sign.<br />
            If <paramref name="siLength" /> is not long enough to hold the entire number, the result will be in scientific notation.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Str3(XSharp.__Float,System.UInt32,System.UInt32)">
      <summary>
            Convert a numeric expression to a string of specific length and decimal places.
        </summary>
      <param name="fNumber">The numeric expression to convert.</param>
      <param name="dwLength">
            The length of the string to return, including decimal digits, decimal point, and sign.<br />
            If <paramref name="dwLength" /> is not long enough to hold the entire number, the result will be in scientific notation.
        </param>
      <param name="dwDecimals">The number of decimal places to return.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrEvaluate(System.String)">
      <summary>
            Allows text substitution in strings entered at runtime.
        </summary>
      <param name="cString">A string containing one or more macro variables to expand.</param>
      <returns>
            The new string, after all macro substitutions have taken place.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrFloat(XSharp.__Float,System.UInt32,System.UInt32)">
      <summary>
            Convert a float expression to a PSZ.
        </summary>
      <param name="flSource">The numeric expression to convert.</param>
      <param name="dwLength">
            The length of the string to return, including decimal digits, decimal point, and sign.<br />
            If <paramref name="dwLength" /> is not long enough to hold the entire number,<br />
            The result will be in scientific notation.
        </param>
      <param name="dwDecimals">The number of decimal places to return.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.String2Atom(System.String)">
      <summary>
            Convert a string to a Symbol.
            </summary>
      <param name="c" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.String2Symbol(System.String)">
      <summary>
            Convert a string to an uppercase Symbol.
            </summary>
      <param name="c" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.StringAlloc(System.String)">
      <summary>
            Copy a string to a newly allocated block of memory and return a PSZ to the memory.
        </summary>
      <param name="cString">The string to copy.</param>
      <returns>
            A pointer to the newly allocated string.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrInt(System.Int32,System.UInt32,System.UInt32)">
      <summary>
            Convert an integer expression to a PSZ.
        </summary>
      <param name="liNumber">The integer expression to convert.</param>
      <param name="dwLength">
            The length of the string to return, including decimal digits, decimal point, and sign.<br />
            If <paramref name="dwLength" /> is not long enough to hold the entire number, the result will be in scientific notation.
        </param>
      <param name="dwDecimals">The number of decimal places to return.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrLong(System.Int32,System.UInt32,System.UInt32)">
      <summary>
            Convert a long integer expression to a PSZ.
        </summary>
      <param name="liNumber">The long integer expression to convert.</param>
      <param name="dwLength">
            The length of the string to return, including decimal digits, decimal point, and sign.<br />
            If <paramref name="dwLength" /> is not long enough to hold the entire number,<br />
            The result will be in scientific notation.
        </param>
      <param name="dwDecimals">The number of decimal places to return.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrToFloat(System.String)">
      <summary>
            Convert a string containing a numeric value to a numeric data type.
        </summary>
      <param name="cNumber">
            The string to convert.  <paramref name="cNumber" /> can be in any of the compiler-supported base formats, such as binary, decimal, hex, or scientific.  When in scientific format, a decimal point is necessary to identify the base "E".  So Val("1E+1") equals 1 but Val("1.0E+1") equals 10.0.  Moreover, "+INF" and "-INF" (both must be in uppercase) represent +infinity and -infinity.
        </param>
      <returns>The numeric value as a FLOAT.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrTran(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Search and replace characters within a string.
        </summary>
      <param name="uTarget">The string in which to search.</param>
      <param name="uSearch">
            The substring for which to search.<br />
            All occurrences of <paramref name="uSearch" /> are replaced unless <paramref name="uStart" /> or <paramref name="uCount" /> is specified.  Note that StrTran() replaces substrings and, therefore, does not account for whole words.
        </param>
      <param name="uReplace">
            The substring with which to replace <paramref name="cSearch" />.<br />
            If this argument is not specified, <paramref name="cSearch" /> is replaced with a NULL_STRING.
        </param>
      <param name="uStart">
            The first occurrence to replace.<br />
            If this argument is omitted or 0, the default is 1.
        </param>
      <param name="uCount">
            The number of occurrences to replace.<br />
            If this argument is not specified, the default is all.
        </param>
      <returns>
            A new string with the specified occurrences of <paramref name="uSearch" /> replaced by <paramref name="uReplace" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrZero(XSharp.__Usual)">
      <summary>
            Convert a numeric expression to a string and pad it with leading zeroes instead of blanks.
        </summary>
      <param name="nNumber">The numeric expression to convert to a string.</param>
      <param name="nLength">The length of the string to return, including zeroes, decimal digits, decimal point, and sign.</param>
      <param name="nDecimals">The number of decimal places in the return value.</param>
      <returns>
            A string.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrZero(XSharp.__Usual,System.Int32)">
      <summary>
            Convert a numeric expression to a string and pad it with leading zeroes instead of blanks.
        </summary>
      <param name="nNumber">The numeric expression to convert to a string.</param>
      <param name="nLength">The length of the string to return, including zeroes, decimal digits, decimal point, and sign.</param>
      <param name="nDecimals">The number of decimal places in the return value.</param>
      <returns>
            A string.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.StrZero(XSharp.__Usual,System.Int32,System.Int32)">
      <summary>
            Convert a numeric expression to a string and pad it with leading zeroes instead of blanks.
        </summary>
      <param name="nNumber">The numeric expression to convert to a string.</param>
      <param name="nLength">The length of the string to return, including zeroes, decimal digits, decimal point, and sign.</param>
      <param name="nDecimals">The number of decimal places in the return value.</param>
      <returns>
            A string.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SubS(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Extract a substring from a string.
        </summary>
      <param name="cTarget">The string from which to extract a substring.</param>
      <param name="nStart">
            The starting position in <paramref name="cTarget" />.<br />
            If <paramref name="wStart" /> is positive, it is relative to the leftmost character in <paramref name="cTarget" />.<br />
            If <paramref name="nStart" /> is negative, it is relative to the rightmost character in <paramref name="cTarget" />.<br />
            If <paramref name="nStart" /> is zero, a NULL_STRING is returned.
        </param>
      <param name="nCount">
            The number of characters to extract.<br />
            If omitted, the substring begins at <paramref name="nStart" /> and continues to the end of the string.<br />
            If <paramref name="nCount" /> is greater than the number of characters from <paramref name="nStart" /> to the end of <paramref name="cTarget" />, the extra is ignored.
        </param>
      <returns>
            The substring.<br />
            If the substring is not present, a NULL_STRING is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.SubStr(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Extract a substring from a string.
        </summary>
      <param name="cTarget">The string from which to extract a substring.</param>
      <param name="nStart">
            The starting position in <paramref name="cTarget" />.<br />
            If <paramref name="wStart" /> is positive, it is relative to the leftmost character in <paramref name="cTarget" />.<br />
            If <paramref name="nStart" /> is negative, it is relative to the rightmost character in <paramref name="cTarget" />.<br />
            If <paramref name="nStart" /> is zero, a NULL_STRING is returned.
        </param>
      <param name="nCount">
            The number of characters to extract.<br />
            If omitted, the substring begins at <paramref name="nStart" /> and continues to the end of the string.<br />
            If <paramref name="nCount" /> is greater than the number of characters from <paramref name="nStart" /> to the end of <paramref name="cTarget" />, the extra is ignored.
        </param>
      <returns>
            The substring.<br />
            If the substring is not present, a NULL_STRING is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Symbol2String(XSharp.__Symbol)">
      <summary>
            Convert a symbol to string
            </summary>
      <param name="s" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SysAddAtom(System.String)">
      <summary>
            Convert a null-terminated string to a Symbol and add it to the atom table.
            </summary>
      <param name="s" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SysAddAtom(XSharp.__Psz)">
      <summary>
            Convert a null-terminated string to a Symbol and add it to the atom table.
            </summary>
      <param name="p" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SysAddAtomUpperA(System.String)">
      <summary>
            Convert a null-terminated string to an uppercase Symbol and add it to the atom table.
            </summary>
      <param name="s" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SysAddAtomUpperA(XSharp.__Psz)">
      <summary>
            Convert a null-terminated string to an uppercase Symbol and add it to the atom table.
            </summary>
      <param name="p" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SysCompAtom(XSharp.__Symbol,XSharp.__Symbol)">
      <summary></summary>
      <param name="s1" />
      <param name="s2" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SysFindAtom(System.String)">
      <summary>
            Determine whether a Symbol is in the atom table.
            </summary>
      <param name="p" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SysFindAtom(XSharp.__Psz)">
      <summary>
            Determine whether a Symbol is in the atom table.
            </summary>
      <param name="p" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.SysGetAtomName(XSharp.__Symbol)">
      <summary>
            Convert a Symbol to a null-terminated string.
            </summary>
      <param name="s" />
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Tan(XSharp.__Usual)">
      <summary>
            Calculate the tangent of a number.
        </summary>
      <param name="nNum">An angle in radians.</param>
      <returns>
            The tangent of the specified angle.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.TimePsz">
      <summary>
            Return the system time in a format determined by various international settings.
        </summary>
      <returns>
            The format of the return value is dependent on several functions, including SetAMPM(), SetAMExt(), SetPMExt(), and SetInternational(), which you can refer to for more information.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.TimePsz24">
      <summary>
            Return the system time in 24-hour format.
        </summary>
      <returns>
            The system time in the form hh:mO:ss, where hh is hours in 24-hour format, mm is minutes, and ss is seconds.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Today">
      <summary>
            Return the system date as a date value.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Tone(System.UInt32,System.UInt32)">
      <summary>
            Sound a speaker tone for a specified frequency and duration.
            Note:<br />
            Tone() is a compatibility function and is no longer recommended.<br />
            It is superseded by the Windows API MessageBeep(), SndPlaySound(), and the MCI family of functions.  MessageBeep() is defined in the System Library, whereas the other functions are defined in the Win32 API library.  In order to use these functions, you must include the Win32 API library in your application's search path.
        </summary>
      <param name="wFrequency">The frequency of the tone to sound.</param>
      <param name="wDuration">
            The duration of the tone measured in increments of 1/18 of a second.<br />
            For example, an <paramref name="wDuration" /> value of 18 represents one second.<br />

            	For both arguments, noninteger values are truncated — not rounded — to their integer portion.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.ToWord(XSharp.__Usual)">
      <summary>
            Convert a number to a word.
        </summary>
      <param name="nNumber">The number to convert to a word, specified in the range of plus or minus 32,767, inclusive.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Transform(System.Boolean,System.String)">
      <summary>
            Convert any value into a formatted string.
        </summary>
      <param name="uValue">
            The value to format.<br />
            This expression can be any valid X# data type except array, code block, object, and NIL.
        </param>
      <param name="cSayPicture">A string of picture and template characters that describes the format of the returned string.</param>
      <returns>
            A formatted string as defined by <paramref name="cSayPicture" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Transform(System.String,System.String)">
      <summary>
            Convert any value into a formatted string.
        </summary>
      <param name="uValue">
            The value to format.<br />
            This expression can be any valid X# data type except array, code block, object, and NIL.
        </param>
      <param name="cSayPicture">A string of picture and template characters that describes the format of the returned string.</param>
      <returns>
            A formatted string as defined by <paramref name="cSayPicture" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Transform(XSharp.__Date,System.String)">
      <summary>
            Convert any value into a formatted string.
        </summary>
      <param name="uValue">
            The value to format.<br />
            This expression can be any valid X# data type except array, code block, object, and NIL.
        </param>
      <param name="cSayPicture">A string of picture and template characters that describes the format of the returned string.</param>
      <returns>
            A formatted string as defined by <paramref name="cSayPicture" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Transform(XSharp.__Float,System.String)">
      <summary>
            Convert any value into a formatted string.
        </summary>
      <param name="uValue">
            The value to format.<br />
            This expression can be any valid X# data type except array, code block, object, and NIL.
        </param>
      <param name="cSayPicture">A string of picture and template characters that describes the format of the returned string.</param>
      <returns>
            A formatted string as defined by <paramref name="cSayPicture" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Transform(XSharp.__Symbol,System.String)">
      <summary>
            Convert any value into a formatted string.
        </summary>
      <param name="uValue">
            The value to format.<br />
            This expression can be any valid X# data type except array, code block, object, and NIL.
        </param>
      <param name="cSayPicture">A string of picture and template characters that describes the format of the returned string.</param>
      <returns>
            A formatted string as defined by <paramref name="cSayPicture" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Transform(XSharp.__Usual,System.String)">
      <summary>
            Convert any value into a formatted string.
        </summary>
      <param name="uValue">
            The value to format.<br />
            This expression can be any valid X# data type except array, code block, object, and NIL.
        </param>
      <param name="cSayPicture">A string of picture and template characters that describes the format of the returned string.</param>
      <returns>
            A formatted string as defined by <paramref name="cSayPicture" />.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.TString(XSharp.__Usual)">
      <summary>
            Convert a specified number of seconds to a time string.
        </summary>
      <param name="nSeconds">The number of seconds to convert.  </param>
      <returns>
            The format of the return value is dependent on several functions, including SetAMPM(), SetAMExt(), SetPMExt(), and SetInternational(), which you can refer to for more information.<br />
            If <paramref name="nSeconds" /> is greater than 86,400 (the number of seconds in one day), the number of seconds past the whole number of days is returned (see the second example below).
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Type(System.String)">
      <summary>
            Determine the data type of an expression represented as a string.
        </summary>
      <param name="cString">
            A string that contains an expression whose type is to be determined.<br />
            It cannot contain undeclared variables or functions that are not intended for used with macros<br />
            If <paramref name="cString" /> does not exist, "U" is returned.
        </param>
      <returns>
            One of the following characters:
            Returns	Meaning	
            A	Array	
            B	Block	
            C	String	
            D	Date	
            L	Logical	
            M	Memo	
            N	Numeric	
            O	Object	
            U	NIL, local, or static	
            UE	Error syntactical	
            UI	Error indeterminate	
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Type(System.String,System.Int32)">
      <summary>
            Determine the data type of an expression represented as a string.
        </summary>
      <param name="cString">
            A string that contains an expression whose type is to be determined.<br />
            It cannot contain undeclared variables or functions that are not intended for used with macros<br />
            If <paramref name="cString" /> does not exist, "U" is returned.
        </param>
      <returns>
            One of the following characters:
            Returns	Meaning	
            A	Array	
            B	Block	
            C	String	
            D	Date	
            L	Logical	
            M	Memo	
            N	Numeric	
            O	Object	
            U	NIL, local, or static	
            UE	Error syntactical	
            UI	Error indeterminate	
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Unformat(System.String,System.String,System.String)">
      <summary>
            Convert a transformed string back to its original value.
        </summary>
      <param name="cFormatString">The string to convert.</param>
      <param name="cSayPicture">The picture string used when the original value was converted.</param>
      <param name="cType">
            The data type of the original value.<br />
            This can be any valid X# data type except array, code block, object, and NIL.
        </param>
      <returns>
            The original value.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.UnRegisterAxit(System.Object)">
      <summary>
            Terminate the registration of an object that has been registered with RegisterAxit().
            </summary>
      <param name="oSource"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Used">
      <summary>
            Determine whether a database file is open.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE if there is a database file in use; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Used(XSharp.__Usual)">
      <summary>
            Determine whether a database file is open.
        </summary>
      <param name="uArea">
        <span>
            Specifies the work area name or number for a table from which the value must be retrieved.
        </span>
      </param>
      <returns>
            TRUE if there is a database file in use; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.UsualType(XSharp.__Usual)">
      <summary>
            Determine the data type of an expression.
            </summary>
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.UsualVal(XSharp.__Usual)">
      <summary>
            Access contents of an address, whether it is passed by reference or not.
            </summary>
      <param name="u"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.Val(System.String)">
      <summary>
            Convert a string containing a numeric value to a numeric data type.
        </summary>
      <param name="cNumber">
            The string to convert.  <paramref name="cNumber" /> can be in any of the compiler-supported base formats, such as binary, decimal, hex, or scientific.  When in scientific format, a decimal point is necessary to identify the base "E".  So Val("1E+1") equals 1 but Val("1.0E+1") equals 10.0.  Moreover, "+INF" and "-INF" (both must be in uppercase) represent +infinity and -infinity.
        </param>
      <returns>
        <paramref name="cNumber" /> as a numeric value.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.ValType(XSharp.__Usual)">
      <summary>
            Determine the data type of an expression.
            </summary>
      <param name="u"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.VarGet(System.String)">
      <summary>
            Return the contents of a field or a memory variable.
        </summary>
      <param name="cVarName">The name of the field or memory variable.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.VarGetSym(XSharp.__Symbol)">
      <summary>
            Return the contents of a field or a memory variable.
        </summary>
      <param name="symVar">The name of the variable .</param>
      <param name="cVarName">The name of the field or memory variable.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.VarPut(System.String,XSharp.__Usual)">
      <summary>
            Assign a value to a field or a memory variable of a given name.
        </summary>
      <param name="cVarName">The name of the variable you want to create.</param>
      <param name="uValue">The value to assign to the variable.</param>
      <returns>
            The value assigned to (uValue).
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VarPutSym(XSharp.__Symbol,XSharp.__Usual)">
      <summary>
            Assign a value to a field or a memory variable of a given name.
        </summary>
      <param name="symVar">The name of the variable .</param>
      <param name="cVarName">The name of the variable you want to create.</param>
      <param name="uValue">The value to assign to the variable.</param>
      <returns>
            The value assigned to (uValue).
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.Version">
      <summary>
            Returns the version of X# you are using.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbAlias(System.UInt32)">
      <summary>
            Return the alias of a specified work area as a string.
        </summary>
      <param name="wWorkArea">Any work area number.</param>
      <returns>
            If there is no database file in use, VODBAlias() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbAliasSym(System.UInt32)">
      <summary>
            Return the alias of a specified work area as a symbol.
        </summary>
      <param name="wWorkArea">Any work area number.</param>
      <returns>
            The alias of the specified work area as a symbol.<br />
            If there is no database file in use for the specified work area, VODBAlias() returns a  NULL_SYMBOL.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbAppend(System.Boolean)">
      <summary>
            Add a new record.
        </summary>
      <param name="lReleaseLocks">TRUE clears all pending record locks, then appends the next record.  FALSE maintains all pending record locks, adding new records to the end of the lock list.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbBlobInfo(System.UInt32,System.UInt32,XSharp.__Usual)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal"></param>
      <param name="nPos"></param>
      <param name="oRet"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbBlobInfo(System.UInt32,System.UInt32,XSharp.__Usual@)"></member>
    <member name="M:XSharp.RT.Functions.VoDbBof">
      <summary>
            Determine when beginning-of-file is encountered.
        </summary>
      <returns>
            TRUE after an attempt to skip backward beyond the first logical record in a database file or if the current database file contains no records; otherwise, FALSE.<br />
            If there is no database file open in the current work area, VODBBOF() returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbBuffRefresh">
      <summary>Refresh the buffer for the current Workarea, discarding any changes that were made.</summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbClearFilter">
      <summary>
            Clear a logical filter condition.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbClearLocate">
      <summary>
            Clear a locate condition by deleting the locate code block.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbClearRelation">
      <summary>
            Clear any active relations.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbClearScope">
      <summary>Clear the active locate condition.</summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbCloseAll">
      <summary>
            Close all files in all work areas.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbCloseArea">
      <summary>
            Close all files in a work area.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbCommit">
      <summary>
            Flush pending updates in one work area.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbCommitAll">
      <summary>
            Flush pending updates in all work areas.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbContinue">
      <summary>
            Resume a pending locate condition.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbCreate(System.String,XSharp.__Array,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Create new file through the specified RDDs
            </summary>
      <param name="aStruct">Array with structure to use when creating the file.</param>
      <param name="cRddName">Name of RDD to use</param>
      <param name="cName">Name of the file to create. When no extension is specified then the default extension for the RDD will be used.</param>
      <param name="rddType">Type of the class that must be used to work with the RDD.</param>
      <param name="lNew">TRUE opens the database file in a new work area (first available).  FALSE opens it in the current work area.  lNew is useful only when lOpen has a value of TRUE. The default is FALSE.</param>
      <param name="cAlias">The alias to be associated with the work area where the file is opened.  Within a single thread, X# will not accept duplicate aliases.  cAlias is useful only when lOpen has a value of TRUE.  The default alias is the filename without extension</param>
      <param name="cDelim">The delimiter for fields within a delimited database file. The default is a NULL string </param>
      <param name="lKeep">TRUE specifies that the file should remain open after creating. FALSE closes the file.</param>
      <param name="lJustOpen">TRUE specifies that an existing database file be opened. FALSE specifies that that a new database file be opened.  The default is FALSE.  This can be used to open existing SDF and delimited files, which do not have a structure in the header ? in which case, an empty aStruct should be used.</param>
      <returns>TRUE when succesfull, otherwise FALSE. When an error has occurred then you can retrieve that error from RuntimeState.LastRddError.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbCreate(System.String,XSharp.__Array,System.Type,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Create new file through the specified RDDs
            </summary>
      <param name="aStruct">Array with structure to use when creating the file.</param>
      <param name="oRddType">Type of the RDDs to use when creating the file</param>
      <param name="cRddName">Name of RDD to use</param>
      <param name="cName">Name of the file to create. When no extension is specified then the default extension for the RDD will be used.</param>
      <param name="rddType">Type of the class that must be used to work with the RDD.</param>
      <param name="lNew">TRUE opens the database file in a new work area (first available).  FALSE opens it in the current work area.  lNew is useful only when lOpen has a value of TRUE. The default is FALSE.</param>
      <param name="cAlias">The alias to be associated with the work area where the file is opened.  Within a single thread, X# will not accept duplicate aliases.  cAlias is useful only when lOpen has a value of TRUE.  The default alias is the filename without extension</param>
      <param name="cDelim">The delimiter for fields within a delimited database file. The default is a NULL string </param>
      <param name="lKeep">TRUE specifies that the file should remain open after creating. FALSE closes the file.</param>
      <param name="lJustOpen">TRUE specifies that an existing database file be opened. FALSE specifies that that a new database file be opened.  The default is FALSE.  This can be used to open existing SDF and delimited files, which do not have a structure in the header ? in which case, an empty aStruct should be used.</param>
      <returns>TRUE when succesfull, otherwise FALSE. When an error has occurred then you can retrieve that error from RuntimeState.LastRddError.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbCreate(System.String,XSharp.__Array,XSharp._RddList,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Create new file through the specified RDDs
            </summary>
      <param name="aStruct">Array with structure to use when creating the file.</param>
      <param name="aList">structure that describes the list of RDDs to use</param>
      <param name="cRddName">Name of RDD to use</param>
      <param name="cName">Name of the file to create. When no extension is specified then the default extension for the RDD will be used.</param>
      <param name="rddType">Type of the class that must be used to work with the RDD.</param>
      <param name="lNew">TRUE opens the database file in a new work area (first available).  FALSE opens it in the current work area.  lNew is useful only when lOpen has a value of TRUE. The default is FALSE.</param>
      <param name="cAlias">The alias to be associated with the work area where the file is opened.  Within a single thread, X# will not accept duplicate aliases.  cAlias is useful only when lOpen has a value of TRUE.  The default alias is the filename without extension</param>
      <param name="cDelim">The delimiter for fields within a delimited database file. The default is a NULL string </param>
      <param name="lKeep">TRUE specifies that the file should remain open after creating. FALSE closes the file.</param>
      <param name="lJustOpen">TRUE specifies that an existing database file be opened. FALSE specifies that that a new database file be opened.  The default is FALSE.  This can be used to open existing SDF and delimited files, which do not have a structure in the header ? in which case, an empty aStruct should be used.</param>
      <returns>TRUE when succesfull, otherwise FALSE. When an error has occurred then you can retrieve that error from RuntimeState.LastRddError.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbDelete">
      <summary>
            Mark the current record for deletion.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbDeleted">
      <summary>
            Return the deleted status of the current record.
        </summary>
      <returns>
            TRUE if the current record is marked for deletion; otherwise, FALSE.<br />
            If there is no database file in use in the current work area, VODBDeleted() returns FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbEof">
      <summary>
            Determine when end-of-file is encountered.
        </summary>
      <returns>
            TRUE when an attempt is made to move the record pointer beyond the last logical record in a database file or if the current database file contains no records; otherwise, FALSE.<br />
            If there is no database file open in the current work area, VODBEOF() returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbEval(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,System.Boolean)">
      <summary>
            Evaluate a code block for each record that matches a specified scope and/or condition.
        </summary>
      <param name="cbExecute">The code block to execute for each record that matches the scope and conditions.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFieldGet(System.UInt32,XSharp.__Usual@)">
      <summary>
            Retrieve the value of a specified database field.
        </summary>
      <param name="wFieldPos">The position of the field in the record structure for the current work area.</param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Although other RDDs may expand on this concept, the supplied RDDs limit using a non-NIL value to a single circumstance in which you can change the information rather than just retrieve it.  With the DBS_ALIAS <paramref name="kInfoType" />, you can specify a non-NIL value, allowing you to specify a string that you can subsequently use to access the indicated field.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFieldGetBytes(System.UInt32,System.Byte[]@)">
      <summary>
            Retrieve the value of a specified database field.
        </summary>
      <param name="wFieldPos">The position of the field in the record structure for the current work area.</param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Although other RDDs may expand on this concept, the supplied RDDs limit using a non-NIL value to a single circumstance in which you can change the information rather than just retrieve it.  With the DBS_ALIAS <paramref name="kInfoType" />, you can specify a non-NIL value, allowing you to specify a string that you can subsequently use to access the indicated field.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFieldInfo(System.UInt32,System.UInt32,XSharp.__Usual)">
      <summary>
            Retrieve field definition information about a field.
        </summary>
      <param name="uValue">New value to assign to the Field.</param>
      <param name="kInfoType">Determines what type of information is retrieved.</param>
      <param name="wFieldPos">The position number of the field that you want information on.</param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Although other RDDs may expand on this concept, the supplied RDDs limit using a non-NIL value to a single circumstance in which you can change the information rather than just retrieve it.  With the DBS_ALIAS <paramref name="kInfoType" />, you can specify a non-NIL value, allowing you to specify a string that you can subsequently use to access the indicated field.
        </param>
      <param name="uNewValue">A new value to assign to the field attribute.  </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFieldInfo(System.UInt32,System.UInt32,XSharp.__Usual@)">
      <summary>
            Retrieve field definition information about a field.
        </summary>
      <param name="kInfoType">Determines what type of information is retrieved.</param>
      <param name="wFieldPos">The position number of the field that you want information on.</param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Although other RDDs may expand on this concept, the supplied RDDs limit using a non-NIL value to a single circumstance in which you can change the information rather than just retrieve it.  With the DBS_ALIAS <paramref name="kInfoType" />, you can specify a non-NIL value, allowing you to specify a string that you can subsequently use to access the indicated field.
        </param>
      <param name="uNewValue">A new value to assign to the field attribute.  </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFieldPut(System.UInt32,XSharp.__Usual)">
      <summary>
            Set the value of a specified database field.
        </summary>
      <param name="wFieldPos">The position of the field in the current database file.</param>
      <param name="uNewValue">
            The value to assign to the field.<br />
            The data type of this expression must match the data type of the designated field variable.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFieldPutBytes(System.UInt32,System.Byte[])">
      <summary>
            Set the value of a specified database field.
        </summary>
      <param name="wFieldPos">The position of the field in the current database file.</param>
      <param name="uNewValue">
            The value to assign to the field.<br />
            The data type of this expression must match the data type of the designated field variable.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFileGet(System.UInt32,System.String)">
      <summary>Import contents from file into Memo field </summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="cFile">The name of the file where the value must be written.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFilePut(System.UInt32,System.String)">
      <summary>Export field contents from Memo field to file</summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="cFile">The name of the file to write</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFilter">
      <summary>
            Return a filter.
        </summary>
      <returns>
            The filter condition defined in the current work area.<br />
            If no filter has been set, VODBFilter() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFlock">
      <summary>
            Lock an opened and shared database file.
        </summary>
      <returns>
            TRUE if the lock succeeded; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbFound">
      <summary>
            Determine if the previous search operation succeeded.
        </summary>
      <returns>
            TRUE if the last search command was successful; otherwise, FALSE.  VODBFound() will also return FALSE if there is no database open in the current work area.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbGetScope">
      <summary>Gets the current locate condition.</summary>
      <returns>Scope information for the current workarea.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbGetSelect">
      <summary>
            Return the work area number.
        </summary>
      <returns>
            A number from 1 to 4096.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbGetSelect(System.String)">
      <summary>
            Return the work area number for a certain alias
        </summary>
      <param name="sArea">The name of the alias to look for. This is NOT case sensitive.</param>
      <returns>
            A number from 0 to 4096. When the alias is not used (in the current thread) then the return value is 0. Otherwise it is the area number of the area that has this alias.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbGoBottom">
      <summary>
            Move to the last logical record.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbGoto(XSharp.__Usual)">
      <summary>
            Move to a record specified by record number.
        </summary>
      <param name="uRecID">
            The record ID to go to.<br />
            If <paramref name="uRecID" /> does not exist, the work area is positioned to LastRec() + 1, and both VODBEOF() and VODBBOF() return TRUE.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbGoTop">
      <summary>
            Move to the first logical record.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbInfo(System.UInt32,XSharp.__Usual)">
      <summary>
            Retrieve information about a work area.
        </summary>
      <param name="kInfoType">Determines what type of information is retrieved.</param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Using a non-NIL value is not currently supported by any of the supplied RDDs .<br />
            This feature is reserved for RDDs that allow you to change the information rather than just retrieve it.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbInfo(System.UInt32,XSharp.__Usual@)">
      <summary>
            Retrieve information about a work area.
        </summary>
      <param name="kInfoType">Determines what type of information is retrieved.</param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Using a non-NIL value is not currently supported by any of the supplied RDDs .<br />
            This feature is reserved for RDDs that allow you to change the information rather than just retrieve it.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbJoinAppend(System.UInt32,XSharp._JoinList)">
      <summary>Write values to destination Workarea in a JOIN operation</summary>
      <param name="nSelect"></param>
      <param name="struList"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbLastRec">
      <summary>
            Return the number of the last record in a database file.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbLocate(XSharp.__Usual,XSharp.__Usual,System.Int32,XSharp.__Usual,System.Boolean)">
      <summary>
            Search for the first record that matches a specified condition and scope.
        </summary>
      <param name="cbForCondition">
        <span>
            A code block that defines a condition that each record within the scope must meet in order to be processed.
        </span>
      </param>
      <param name="cbWhileCondition">
        <span>
            A code block that defines another condition that each record must meet in order
            to be processed.
            As soon as a record is encountered that causes the condition to fail, the operation
            terminates.<br />

            If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

            You define the scope using one of these three, mutually exclusive arguments.<br />
            The default is all records.
        </span>
      </param>
      <param name="liNext">
            The number of records to process, starting with the current record.<br />
            To omit this argument, specify -1.
        </param>
      <param name="uRecord">
            The number of the record to process.<br />
            To omit this argument, specify -1.
        </param>
      <param name="lRest">TRUE processes only records from the current record to end-of-file.  FALSE processes all records.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbMemoExt(System.String)">
      <summary>Return Memo File extension</summary>
      <param name="cDriver"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrdBagExt">
      <summary>
            Return the default index file extension for a work area as defined by the its RDD.
            </summary>
      <returns>Default extension for the current Workarea, or an empty string when no table is open in the current Workarea.
            </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrdCondSet(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>
            Set the condition and scope for an order.
        </summary>
      <param name="ptrCondInfo">A pointer to a data structure (_DBORDERCONDINFO) defining the condition and scope information.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrdCreate(System.String,XSharp.__Usual,System.String,XSharp.__Usual,System.Boolean,XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>
            Create or replace an order in an index file.
        </summary>
      <param name="cOrder">
            The name of the order to be created.<br />
            For single-order index files, the file name without an extension or path, is the default order name.<br />
            For multiple-order index files, the order name is required.
        </param>
      <param name="cIndexFile">
            The name of the target index file, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension is determined by the RDD and can be obtained using DBOrderInfo(DBOI_INDEXEXT).<br />

            	In RDDs that support production indexes , the production index file (that is, one with the same name as the database file) is assumed if <paramref name="cIndexFile" /> is not specified.<br />

            	If <paramref name="cIndexFile" /> does not exist, it is created.<br />

            	If <paramref name="cIndexFile" /> exists, the INDEX command must first obtain exclusive use of the file.<br />
            If the attempt is unsuccessful because, for example, the file is open by another process, NetErr() is set to TRUE.  <br />

            	If the attempt is successful and the RDD specifies that index files can contain only a single order, the current contents of the file is overwritten with the new order.<br />
            If the RDD specifies that index files can contain multiple orders, the order is added to <paramref name="cIndexFile" /> if it does not already exist; otherwise it is replaced.
        </param>
      <param name="cKeyValue">
            The order key expression specified as a string.<br />
            This is the key expression that is stored in the index file and used for such purposes as locating key values and recreating the order.<br />

            	Although <paramref name="cKeyValue" /> is optional, it is highly recommended that you specify this argument.  Without it, the order will be properly created using <paramref name="cbKeyValue" />, but the key expression will be stored in the index file as a NULL_STRING, rendering the order unusable for subsequent access.
        </param>
      <param name="cbKeyValue">
            The order key expression specified as a code block.<br />
            This code block is used to initially create the order.<br />
            If you do not supply <paramref name="cbKeyValue" />, it is macro-compiled from <paramref name="cKeyValue" /> (for example, {||&amp;<paramref name="cKeyValue" />}).<br />

            	The data type of the key expression and all other limitations, including the length of the key and the key expression, are determined by the RDD.
        </param>
      <param name="lUnique">
            TRUE creates a unique order by including only those records with unique key values; FALSE uses all records in the database file.<br />
            If <paramref name="lUnique" /> is omitted, the SetUnique() setting is used.Note that keys from deleted records are also included in the index, and may hide keys from non-deleted records.
        </param>
      <param name="ptrCondInfo">
            A pointer to a data structure (_DBORDERCONDINFO) defining the condition and scope information.<br />

            	Note:  See DBCreateOrder() for descriptions of the remaining arguments.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrdDestroy(System.String,XSharp.__Usual)">
      <summary>
            Remove an order from an open index file.
        </summary>
      <param name="uOrder">
            The name of the order to be removed or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.<br />
            If the order cannot be found, a runtime error is raised.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrderInfo(System.UInt32,System.String,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return information about index files and the orders in them.
        </summary>
      <param name="uValue">New value to assign to the Order.</param>
      <param name="kInfoType">Determines what type of information is retrieved.</param>
      <param name="cIndexFile">
            The name of an open index file (only the eight-letter file name is needed).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />
            To omit the argument, specify NULL_STRING.
        </param>
      <param name="uOrder">
            	The name of the order about which you want to obtain information or a number representing its position in the order list.<br />
            To omit the <paramref name="cOrder" /> | <paramref name="nPosition" /> argument, specify NIL.
        </param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Using a non-NIL value is not currently supported by any of the supplied RDDs .<br />
            This feature is reserved for RDDs that allow you to change the information rather than just retrieve it.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrderInfo(System.UInt32,System.String,XSharp.__Usual,XSharp.__Usual@)">
      <summary>
            Return information about index files and the orders in them.
        </summary>
      <param name="kInfoType">Determines what type of information is retrieved.</param>
      <param name="cIndexFile">
            The name of an open index file (only the eight-letter file name is needed).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />
            To omit the argument, specify NULL_STRING.
        </param>
      <param name="uOrder">
            	The name of the order about which you want to obtain information or a number representing its position in the order list.<br />
            To omit the <paramref name="cOrder" /> | <paramref name="nPosition" /> argument, specify NIL.
        </param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Using a non-NIL value is not currently supported by any of the supplied RDDs .<br />
            This feature is reserved for RDDs that allow you to change the information rather than just retrieve it.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrdListAdd(System.String,XSharp.__Usual)">
      <summary>
            Open an index file and add all its orders to the order list in a work area.
        </summary>
      <param name="cIndexFile">
            The name of the index files to open, including an optional drive, directory, and extension for each.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension is determined by the RDD and can be obtained using DBOrderInfo(DBOI_INDEXEXT).<br />

            	If <paramref name="cIndexFile" /> does not exist, a runtime error is raised.<br />
            If it exists, this function attempts to open the file in the same mode as the corresponding database file.<br />
            If access is denied because, for example, another process is using the file and this one is asking for exclusive use, NetErr() is set to TRUE.<br />
            Otherwise, the file open is successful.<br />

            	Concurrency conflicts with index files are rare since they should be used with only one database file.<br />
            If a concurrency problem arises, it will normally be when you attempt to open the database file.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrdListClear(System.String,XSharp.__Usual)">
      <summary>
            Remove orders from the order list in a work area and close associated index files.
        </summary>
      <param name="uOrder">
            The name of the order to clear or a number representing its position in the order list.  <br />

            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  <br />

            If not specified, all orders in the specified index file (or the entire work area, if no index file is specified) are cleared.  <br />

            Invalid values are ignored.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).  <br />

            Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.  <br />

            Use it alone to close only those orders associated with the specified file.<br />

            If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrdListRebuild">
      <summary>
            Rebuild all orders in the order list of a work area.
        </summary>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbOrdSetFocus(System.String,XSharp.__Usual,System.String@)">
      <summary>
            Set the controlling order for a work area.
        </summary>
      <param name="uOrder">
            The name of the new controlling order or a number representing its position in the order list.<br />
            Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Specifying a value of 0 has the special effect of returning the database file to its natural order.  Specifying an invalid value will raise a runtime error.
        </param>
      <param name="cIndexFile">
            The name of an index file, including an optional drive and directory (no extension should be specified).<br />
            Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.<br />

            	If <paramref name="cIndexFile" /> is not open by the current process, a runtime error is raised.
        </param>
      <param name="cOrder">This returns the previous order that was selected.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbPack">
      <summary>
            Remove all records that have been marked for deletion from a database file.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRddCount">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRddCount(System.UInt32)"></member>
    <member name="M:XSharp.RT.Functions.VoDbRddInfo(System.UInt32,XSharp.__Usual)">
      <summary>Return and optionally change settings controlled directly by the RDD.</summary>
      <param name="nOrdinal">Ordinal number of the setting to set/retrieve.</param>
      <param name="oValue">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRddInfo(System.UInt32,XSharp.__Usual@)">
      <summary>Return and optionally change settings controlled directly by the RDD.</summary>
      <param name="nOrdinal">Ordinal number of the setting to set/retrieve.</param>
      <param name="oValue">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRddList"></member>
    <member name="M:XSharp.RT.Functions.VoDbRddList(XSharp._RddList,System.UInt32)"></member>
    <member name="M:XSharp.RT.Functions.VoDbRddName">
      <summary>
            Return an RDD name.
            </summary>
      <returns>The name of the RDD</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRddSetDefault(System.String)">
      <summary>
            Return and optionally change the default RDD for the application.
        </summary>
      <param name="cNewSetting">
            The name of the RDD that will be used to activate and manage applications when no RDD is explicitly specified.<br />
            If this RDD is not available to the application, the call has no effect.
        </param>
      <returns>
            If <paramref name="cNewSetting" /> is not specified, VODBRDDSetDefault() returns the current default RDD.<br />
            If <paramref name="cNewSetting" /> is specified, the previous default RDD is returned.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRecall">
      <summary>
            Restore the current record if it is marked for deletion.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRecno">
      <summary>
            Return the current record number.
        </summary>
      <returns>
            The current record number.<br />
            If the work area contains a database file with 0 records, VODBRecNo() returns 1, BOF() and EOF() both return TRUE, and LastRec() returns 0.
            If the record pointer is moved past the last record, VODBRecNo() returns LastRec() + 1 and EOF() returns TRUE.<br />
            If an attempt is made to move before the first record, VODBRecNo() returns the record number of the first logical record in the database file and BOF() returns TRUE.<br />
            If no database file is open, VODBRecNo() will return a 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRecordGet">
      <summary>Get the contents of the current record as an array of bytes</summary>
      <returns>An array of bytes that contains the current record.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRecordInfo(System.UInt32,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Retrieve information about a record.
        </summary>
      <param name="kInfoType">Determines what type of information is retrieved..</param>
      <param name="nRecID">
            The ID of the record to retrieve information on.<br />
            A value of 0L means the current record.
        </param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Using a non-NIL value is not currently supported by any of the supplied RDDs .<br />
            This feature is reserved for RDDs that allow you to change the information rather than just retrieve it.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRecordInfo(System.UInt32,XSharp.__Usual,XSharp.__Usual@)">
      <summary>
            Retrieve information about a record.
        </summary>
      <param name="kInfoType">Determines what type of information is retrieved..</param>
      <param name="nRecID">
            The ID of the record to retrieve information on.<br />
            A value of 0L means the current record.
        </param>
      <param name="ptrRetVal">
            A pointer to a polymorphic value.<br />
            This value will receive the requested information if the function is successful and will be unchanged otherwise.<br />
            If you just want to retrieve information, this value must be NIL before calling the function.<br />

            	Using a non-NIL value is not currently supported by any of the supplied RDDs .<br />
            This feature is reserved for RDDs that allow you to change the information rather than just retrieve it.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRecordPut(System.Byte*)">
      <summary>Update the current record from an array of bytes</summary>
      <param name="aRecord">The bytes that form the record. Please note that if the DBF has a memo file, then this array must contain a valid position for the memo attached to the record.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRecordPut(System.Byte[])">
      <summary>Update the current record from an array of bytes</summary>
      <param name="aRecord">The bytes that form the record. Please note that if the DBF has a memo file, then this array must contain a valid position for the memo attached to the record.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRelation(System.UInt32,System.String@)">
      <summary>
            Return the linking expression of a specified relation.
        </summary>
      <param name="wRelation">
            The position of the desired relation in the list of current work area relations.<br />
            The relations are numbered according to the order in which they were defined with SET RELATION.
        </param>
      <param name="pszRelation">
            The position of the desired relation in the list of current work area relations.<br />
            The relations are numbered according to the order in which they were defined with SET RELATION.
        </param>
      <returns>
            The linking expression defined to <paramref name="wRelation" />.<br />
            If there is no relation set for <paramref name="wRelation" />, VODBRelation() returns a NULL_STRING.
            <br />



            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRlock(XSharp.__Usual)">
      <summary>
            Lock the current record.
        </summary>
      <param name="uRecID">
            The ID of the record to be locked.<br />
            To omit, specify NIL. This will lock the current record and release all previously locked records.
        </param>
      <returns>
            TRUE if the record lock is obtained; otherwise, FALSE.<br />
            An attempt to lock a record in an empty database returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbRSelect(System.UInt32)">
      <summary>
            Return the work area number of a relation.
        </summary>
      <param name="wRelation">
            The position of the desired relation in the list of current work area relations.<br />
            The relations are numbered according to the order in which they were defined by the relation setting.
        </param>
      <returns>
            The work area number of the specified relation.<br />
            If there is no relation set for <paramref name="wRelation" />, VODBRSelect() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSeek(XSharp.__Usual,System.Boolean)">
      <summary>
            Move to the record having the specified key value.
        </summary>
      <param name="uKey">A value of any type that specifies the key value associated with the desired record.</param>
      <param name="lSoftSeek">Determines how the work area is positioned if the specified key value is not found:  TRUE performs a soft seek; FALSE does not.</param>
      <returns>
            VODBSeek() always returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSeek(XSharp.__Usual,System.Boolean,System.Boolean)">
      <summary>
            Move to the record having the specified key value.
        </summary>
      <param name="uKey">A value of any type that specifies the key value associated with the desired record.</param>
      <param name="lSoftSeek">Determines how the work area is positioned if the specified key value is not found:  TRUE performs a soft seek; FALSE does not.</param>
      <returns>
            VODBSeek() always returns TRUE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSelect(System.UInt32,System.UInt32@)">
      <summary>
            Select a new work area and retrieve the current work area.
        </summary>
      <param name="wNew">The work area number for the new work area.</param>
      <param name="wOld">A variable that is passed by reference and will contain the number of the current work area.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSelect(System.UInt32,XSharp.__Usual@)">
      <summary>
            Select a new work area and retrieve the current work area.
        </summary>
      <param name="wNew">The work area number for the new work area.</param>
      <param name="wOld">A variable that is passed by reference and will contain the number of the current work area.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSetFilter(XSharp.__Usual,System.String)">
      <summary>
            Set a filter condition.
        </summary>
      <param name="cbCondition">A code block that expresses the filter condition in executable form.</param>
      <param name="cCondition">
            A character value that expresses the filter condition in textual form.<br />
            It must be equivalent to <paramref name="cbCondition" />.<br />
            To omit, specify a NULL_STRING.  <paramref name="cCondition" /> is the value returned by the DBFilter() function.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.<br />
            If <paramref name="cCondition" /> is omitted, the DBSetFilter() function will return an empty string for the work area.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSetFound(System.Boolean)">
      <summary>
            Set the found flag.
        </summary>
      <param name="lFound">The new setting for the found flag.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSetLocate(XSharp.__Usual)">
      <summary>
            Specify the code block for a locate condition.
        </summary>
      <param name="cbForCondition">
        <span>
            A code block that defines a condition that each record within the scope must meet in order to be processed.
        </span>
        <br />

            If no scope is specified, <paramref name="cbForCondition" /> changes the default scope to all records.<br />
            The code block should contain a logical expression.<br />
            It corresponds to the first argument of DBLocate() or VODBLocate().<br />
            It is valid until it is overwritten by the next VODBSetLocate().
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSetRelation(System.String,XSharp.__Usual,System.String,System.String)">
      <summary>
            Relate a specified work area to the current work area.
        </summary>
      <param name="cAlias">The alias of the child work area.</param>
      <param name="cbRel">A code block that expresses the relational expression in executable form.</param>
      <param name="cRel">
            The relational expression in textual form.<br />
            It must be equivalent to <paramref name="cbRel" />.<br />
            To omit, specify a NULL_STRING.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSetScope(XSharp.RDD.Support.DbScopeInfo)">
      <summary>Set the locate condition.</summary>
      <param name="scope">Scope information for the current workarea</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSetSelect(System.Int32)">
      <summary>
            Select a new work area.
        </summary>
      <param name="siNewArea">The number of the new work area.</param>
      <returns>
            The newly selected work area.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSkip(System.Int32)">
      <summary>
            Move the record pointer relative to the current record.
        </summary>
      <param name="liRecords">
            The number of logical records to move, relative to the current record.<br />
            A positive value means to skip forward, and a negative value means to skip backward.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSkipScope(System.Int32,XSharp.RDD.Support.DbScopeInfo)">
      <summary>Position the cursor relative to its current position within the current scope.</summary>
      <param name="nRecords"></param>
      <param name="scope"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSort(System.UInt32,XSharp._FieldNames,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,System.Boolean,XSharp._FieldNames)">
      <summary>
            Copy records to a database file in sorted order.
        </summary>
      <param name="fldNames">List of field names to copy</param>
      <param name="fnSortNames">List of field names to sort on</param>
      <param name="cTargetFile">
            The name of the target database file to write the sorted records, including an optional drive, directory, and extension.  See SetDefault() and SetPath() for file searching and creation rules.<br />
            The default extension for database files is determined by the RDD .<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.
        </param>
      <param name="acFields">The sort keys, specified as an array of field names.  You may optionally add, after the field name, /A (to sort in dictionary order), /C (to ignore capitalization), or /D (to sort in descending order). The default setting is /A.</param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <param name="lDesc">Should the default sort order be Descending</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbSymSelect(XSharp.__Symbol)">
      <summary>
            Select a new work area by specifying its alias as a symbol and return the number of the current work area.
        </summary>
      <param name="symAlias">The alias of the work area you want to select.</param>
      <returns>
            The number of the current work area.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbTrans(System.UInt32,XSharp._FieldNames,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,System.Boolean)">
      <summary>
            Transfer records to an open database file.
        </summary>
      <param name="wTarget">The work area number of the destination file.</param>
      <param name="aStruct">
            An array containing field descriptions in the format returned by DBStruct().<br />
            This array contains the structure of the source file.
        </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <param name="fldNames">List of field names to copy </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbTransRec(System.UInt32,XSharp._FieldNames)">
      <summary>Copy a single row from one work area to another.</summary>
      <param name="nDest">The work area number for the target Workarea.</param>
      <param name="fldNames">The field names to write specified as an _FieldNames object.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbUnlock(XSharp.__Usual)">
      <summary>
            Release all locks for a work area.
        </summary>
      <param name="uRecID">
            The ID of the record to be unlocked.<br />
            To omit, specify NIL.<br />
            This unlocks all locked records or the whole file.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbUnLockAll">
      <summary>
            Release all locks for all work areas.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbUseArea(System.Boolean,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Open a database file.
        </summary>
      <param name="rddName">Name of the RDD to use.</param>
      <param name="lNewArea">Specifies whether the file is to be opened in a new work area.  TRUE selects the lowest numbered unoccupied work area as the current work area before the use operation.  FALSE uses the current work area (if the work area is occupied, it is closed first).</param>
      <param name="ptrRDDList">
            A pointer to a structure (_RDDLIST) that contains a list of RDD names from which the work area gets its functionality.<br />
            If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence.<br />
            This allows you to use RDDs with special capabilities, like encryption or decryption, in different work areas with different database drivers.
        </param>
      <param name="cDataFile">
            The name of the database file to open, including an optional drive, directory, and extension.<br />
            If the database file has a corresponding memo file, it is also opened.<br />
            The default extension for database and memo files is determined by the RDD.  See SetDefault() and SetPath() for file searching and creation rules.
        </param>
      <param name="cAlias">
            An identifier name to associate with the work area when <paramref name="cDataFile" /> is opened.  Duplicate alias names are not allowed within a single application.
        </param>
      <param name="lShared">
            TRUE Attempts to open <paramref name="cDataFile" /> for shared use.  FALSE attempts to open <paramref name="xcDataFile" /> for exclusive (non-shared) use, denying all other processes access until the database file is closed.
        </param>
      <param name="lReadOnly">
            TRUE attempts to open <paramref name="cDataFile" /> with a read-only attribute, prohibiting updates to the work area.  FALSE attempts to open <paramref name="cDataFile" /> with a read-write attribute, allowing updates.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbUseArea(System.Boolean,System.Type,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Open a database file.
        </summary>
      <param name="rddType">Type of the RDD to use.</param>
      <param name="lNewArea">Specifies whether the file is to be opened in a new work area.  TRUE selects the lowest numbered unoccupied work area as the current work area before the use operation.  FALSE uses the current work area (if the work area is occupied, it is closed first).</param>
      <param name="ptrRDDList">
            A pointer to a structure (_RDDLIST) that contains a list of RDD names from which the work area gets its functionality.<br />
            If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence.<br />
            This allows you to use RDDs with special capabilities, like encryption or decryption, in different work areas with different database drivers.
        </param>
      <param name="cDataFile">
            The name of the database file to open, including an optional drive, directory, and extension.<br />
            If the database file has a corresponding memo file, it is also opened.<br />
            The default extension for database and memo files is determined by the RDD.  See SetDefault() and SetPath() for file searching and creation rules.
        </param>
      <param name="cAlias">
            An identifier name to associate with the work area when <paramref name="cDataFile" /> is opened.  Duplicate alias names are not allowed within a single application.
        </param>
      <param name="lShared">
            TRUE Attempts to open <paramref name="cDataFile" /> for shared use.  FALSE attempts to open <paramref name="xcDataFile" /> for exclusive (non-shared) use, denying all other processes access until the database file is closed.
        </param>
      <param name="lReadOnly">
            TRUE attempts to open <paramref name="cDataFile" /> with a read-only attribute, prohibiting updates to the work area.  FALSE attempts to open <paramref name="cDataFile" /> with a read-write attribute, allowing updates.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbUseArea(System.Boolean,XSharp._RddList,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Open a database file.
        </summary>
      <param name="lNewArea">Specifies whether the file is to be opened in a new work area.  TRUE selects the lowest numbered unoccupied work area as the current work area before the use operation.  FALSE uses the current work area (if the work area is occupied, it is closed first).</param>
      <param name="ptrRDDList">
            A pointer to a structure (_RDDLIST) that contains a list of RDD names from which the work area gets its functionality.<br />
            If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence.<br />
            This allows you to use RDDs with special capabilities, like encryption or decryption, in different work areas with different database drivers.
        </param>
      <param name="cDataFile">
            The name of the database file to open, including an optional drive, directory, and extension.<br />
            If the database file has a corresponding memo file, it is also opened.<br />
            The default extension for database and memo files is determined by the RDD.  See SetDefault() and SetPath() for file searching and creation rules.
        </param>
      <param name="cAlias">
            An identifier name to associate with the work area when <paramref name="cDataFile" /> is opened.  Duplicate alias names are not allowed within a single application.
        </param>
      <param name="lShared">
            TRUE Attempts to open <paramref name="cDataFile" /> for shared use.  FALSE attempts to open <paramref name="xcDataFile" /> for exclusive (non-shared) use, denying all other processes access until the database file is closed.
        </param>
      <param name="lReadOnly">
            TRUE attempts to open <paramref name="cDataFile" /> with a read-only attribute, prohibiting updates to the work area.  FALSE attempts to open <paramref name="cDataFile" /> with a read-write attribute, allowing updates.
        </param>
      <param name="rddlist">List of RDDs to use.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.VoDbZap">
      <summary>
            Remove all records from open files.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.RT.Functions.XSharpLoadLibrary(System.String)">
      <summary>Dynamically loads a library (dll) compiled with X#, running any _INIT procedures it may contain.</summary>
      <param name="cLibFileName">The full path of the library to load.</param>
      <returns>The Assembly object of the loaded library.</returns>
    </member>
    <member name="M:XSharp.RT.Functions.Year(XSharp.__Date)">
      <summary>
            Extract the number of the year from a date.
        </summary>
      <param name="dDate">The date.</param>
      <returns>
            The year of <paramref name="dDate" />, including the century digits, as a 4-digit number.<br />
            The value returned is not affected by SetDateFormat(), SetCentury(), SET DATE, or SET CENTURY.  Specifying a NULL_DATE returns 0.
        </returns>
    </member>
    <member name="T:XSharp.RT.MemWalker">
      <summary>Delegate that a client needs to implement to use MemWalk.</summary>
    </member>
    <member name="T:XSharp.RT.ShowErrorDialog_Delegate"></member>
  </members>
</doc>