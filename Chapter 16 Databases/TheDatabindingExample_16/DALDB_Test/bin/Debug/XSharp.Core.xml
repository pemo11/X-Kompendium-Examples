<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>XSharp.Core</name>
  </assembly>
  <members>
    <member name="T:XSharp.__UsualType">
      <summary>This enum is used to describe the type of USUAL values in the X# Runtime.
            It is based on the original USUAL type values in the VO runtime and has been extended with some additional type numbers.
            </summary>
    </member>
    <member name="F:XSharp.__UsualType.Void">
      <summary>The usual contains a NIL.</summary>
    </member>
    <member name="F:XSharp.__UsualType.Long">
      <summary>The usual contains a LONG value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Date">
      <summary>The usual contains a DATE value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Float">
      <summary>The usual contains a FLOAT value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Fixed">
      <summary>This value is NEVER used for USUALs (this was also defined in VO but never used).</summary>
    </member>
    <member name="F:XSharp.__UsualType.Array">
      <summary>The usual contains an ARRAY value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Object">
      <summary>The usual contains an OBJECT value</summary>
    </member>
    <member name="F:XSharp.__UsualType.String">
      <summary>The usual contains an STRING value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Logic">
      <summary>The usual contains an LOGIC value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Codeblock">
      <summary>The usual contains an CODEBLOCK value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Symbol">
      <summary>The usual contains an SYMBOL value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Byte">
      <summary>This value is in the enum for completeness but never used inside a usual. Byte values are stored as LONG.</summary>
    </member>
    <member name="F:XSharp.__UsualType.ShortInt">
      <summary>This value is in the enum for completeness but never used inside a usual. Short values are stored as LONG.</summary>
    </member>
    <member name="F:XSharp.__UsualType.Word">
      <summary>This value is in the enum for completeness but never used inside a usual. Word values are stored as LONG.</summary>
    </member>
    <member name="F:XSharp.__UsualType.DWord">
      <summary>This value is in the enum for completeness but never used inside a usual. DWord values are stored as LONG or FLOAT.</summary>
    </member>
    <member name="F:XSharp.__UsualType.Real4">
      <summary>This value is in the enum for completeness but never used inside a usual. Real4 values are stored as FLOAT</summary>
    </member>
    <member name="F:XSharp.__UsualType.Real8">
      <summary>This value is in the enum for completeness but never used inside a usual. Real8 values are stored as FLOAT.</summary>
    </member>
    <member name="F:XSharp.__UsualType.Psz">
      <summary>This value is in the enum for completeness but never used inside a usual.</summary>
    </member>
    <member name="F:XSharp.__UsualType.Ptr">
      <summary>The usual contains an PTR value</summary>
    </member>
    <member name="F:XSharp.__UsualType.Int64">
      <summary>The usual contains an INT64 value (new in Vulcan and X#).</summary>
    </member>
    <member name="F:XSharp.__UsualType.UInt64">
      <summary>The usual contains an UINT64 value (new in Vulcan and X#).</summary>
    </member>
    <member name="F:XSharp.__UsualType.Char">
      <summary>This value is in the enum for completeness but never used inside a usual. Char values are stored as LONG</summary>
    </member>
    <member name="F:XSharp.__UsualType.Dynamic">
      <summary>This value is in the enum for completeness but never used inside a usual. Dynamic values are stored as OBJECT</summary>
    </member>
    <member name="F:XSharp.__UsualType.DateTime">
      <summary>The usual contains a DateTime value (new in X#).</summary>
    </member>
    <member name="F:XSharp.__UsualType.Decimal">
      <summary>The usual contains a Decimal value (new in X#).</summary>
    </member>
    <member name="F:XSharp.__UsualType.Currency">
      <summary>The usual contains a Currency value (new in X#).</summary>
    </member>
    <member name="F:XSharp.__UsualType.Binary">
      <summary>The usual contains a Binary value (new in X#).</summary>
    </member>
    <member name="F:XSharp.__UsualType.Null">
      <summary>The usual contains a DBNull.Value value (new in X#).</summary>
    </member>
    <member name="F:XSharp.__UsualType.Memo">
      <summary>The usual contains an Memo value. This value is there for compatibility with VO but never used.</summary>
    </member>
    <member name="F:XSharp.__UsualType.Invalid">
      <summary>Invalid Usual Type.</summary>
    </member>
    <member name="T:XSharp._FieldNames">
      <summary>Helper class for VoDbTrans and VoDbSort()</summary>
    </member>
    <member name="M:XSharp._FieldNames.#ctor(System.Collections.Generic.IList{System.String})">
      <summary>Construct a _FieldNames object.</summary>
    </member>
    <member name="P:XSharp._FieldNames.FieldCount">
      <summary>Number of fields in the list.</summary>
    </member>
    <member name="F:XSharp._FieldNames.Fields">
      <summary>List of field names.</summary>
    </member>
    <member name="T:XSharp._JoinField">
      <summary>Helper structure for DbJoin()</summary>
    </member>
    <member name="F:XSharp._JoinField.Area">
      <summary>Source Workarea number.</summary>
    </member>
    <member name="F:XSharp._JoinField.Pos">
      <summary>Source field position.</summary>
    </member>
    <member name="T:XSharp._JoinList">
      <summary>Helper class for DbJoin()</summary>
    </member>
    <member name="M:XSharp._JoinList.#ctor(System.Int32)">
      <summary>Construct a _JoinList object.</summary>
    </member>
    <member name="P:XSharp._JoinList.Count">
      <summary>Number of fields in the list.</summary>
    </member>
    <member name="F:XSharp._JoinList.Fields">
      <summary>List of field areas and positions.</summary>
    </member>
    <member name="F:XSharp._JoinList.uiDestSel">
      <summary>Area number of destination Workarea.</summary>
    </member>
    <member name="T:XSharp._RddList">
      <summary>Helper structure to store information for a list of RDD names for DbUseArea()</summary>
    </member>
    <member name="M:XSharp._RddList.#ctor(System.String[])">
      <summary>Construct _RddList from list of names.</summary>
    </member>
    <member name="M:XSharp._RddList.#ctor(XSharp.RDD.Workarea)">
      <summary>Construct _RddList from class Tree.</summary>
    </member>
    <member name="F:XSharp._RddList.atomRddName">
      <summary>List of RDD names.</summary>
    </member>
    <member name="P:XSharp._RddList.uiRddCount">
      <summary>Number of names in the list.</summary>
    </member>
    <member name="T:XSharp.CollationMode">
      <summary>This enum specifies the collation mode used to create and update index strings.</summary>
    </member>
    <member name="T:XSharp.Collations">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="M:XSharp.Collations.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Collations</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:XSharp.CoreDb">
      <summary>
            The CoreDb class contains the methods to manipulate Workareas. <br />
            The class is stateless. The Workarea state is stored in the RuntimeState.
            </summary>
    </member>
    <member name="M:XSharp.CoreDb.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.CoreDb</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.CoreDb._ErrInfoPtr">
      <summary>Return exception object from last RDD operation.</summary>
    </member>
    <member name="M:XSharp.CoreDb.Alias(System.UInt32)">
      <summary>
            Return the alias of a specified work area as a string.
            </summary>
      <param name="nArea"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.Append(System.Boolean)">
      <summary>
            Add a new record.
            </summary>
      <param name="lReleaseLocks" />
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.BlobInfo(System.UInt32,System.UInt32,System.Object)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal"></param>
      <param name="nPos"></param>
      <param name="oRet"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.BlobInfo(System.UInt32,System.UInt32,System.Object@)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="oRet">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <param name="nOrdinal"></param>
      <param name="nPos"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Bof">
      <summary>
            Determine when beginning-of-file is encountered.
            </summary>
      <returns>TRUE after an attempt to skip backward beyond the first logical record in a database file or if
            the current database file contains no records; otherwise, FALSE.  If there is no database file open in the
            current work area, CoreDbBOF() returns TRUE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.BuffRefresh">
      <summary>Refresh the buffer for the current Workarea, discarding any changes that were made.</summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.ClearFilter">
      <summary>
            Clear a logical filter condition.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.ClearLocate">
      <summary>
            Clear a locate condition by deleting the locate code block.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.ClearRelation">
      <summary>Clear any active relations.</summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.ClearScope">
      <summary>Clear the active locate condition.</summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.CloseAll">
      <summary>
            Close all files in all work areas.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.CloseArea">
      <summary>
            Close all files in a work area.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Commit">
      <summary>
            Flush pending updates in one work area.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.CommitAll">
      <summary>
            Flush pending updates in all work areas.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Continue">
      <summary>
            Resume a pending locate condition.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Create(System.String,XSharp.RDD.Support.RddFieldInfo[],System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Create new file through the specified RDDs
            </summary>
      <param name="cRddName">Name of RDD to use</param>
      <param name="cName">Name of the file to create. When no extension is specified then the default extension for the RDD will be used.</param>
      <param name="aStruct">Structure to use when creating the file.</param>
      <param name="rddType">Type of the class that must be used to work with the RDD.</param>
      <param name="lNew">TRUE opens the database file in a new work area (first available).  FALSE opens it in the current work area.  lNew is useful only when lOpen has a value of TRUE. The default is FALSE.</param>
      <param name="cAlias">The alias to be associated with the work area where the file is opened.  Within a single thread, X# will not accept duplicate aliases.  cAlias is useful only when lOpen has a value of TRUE.  The default alias is the filename without extension</param>
      <param name="cDelim">The delimiter for fields within a delimited database file. The default is a NULL string </param>
      <param name="lKeep">TRUE specifies that the file should remain open after creating. FALSE closes the file.</param>
      <param name="lJustOpen">TRUE specifies that an existing database file be opened. FALSE specifies that that a new database file be opened.  The default is FALSE.  This can be used to open existing SDF and delimited files, which do not have a structure in the header ? in which case, an empty aStruct should be used.</param>
      <returns>TRUE when succesfull, otherwise FALSE. When an error has occurred then you can retrieve that error from RuntimeState.LastRddError.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Create(System.String,XSharp.RDD.Support.RddFieldInfo[],System.Type,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Create new file through the specified RDDs
            </summary>
      <param name="cName">Name of the file to create. When no extension is specified then the default extension for the RDD will be used.</param>
      <param name="aStruct">Structure to use when creating the file.</param>
      <param name="rddType">Type of the class that must be used to work with the RDD.</param>
      <param name="lNew">TRUE opens the database file in a new work area (first available).  FALSE opens it in the current work area.  lNew is useful only when lOpen has a value of TRUE. The default is FALSE.</param>
      <param name="cAlias">The alias to be associated with the work area where the file is opened.  Within a single thread, X# will not accept duplicate aliases.  cAlias is useful only when lOpen has a value of TRUE.  The default alias is the filename without extension</param>
      <param name="cDelim">The delimiter for fields within a delimited database file. The default is a NULL string </param>
      <param name="lKeep">TRUE specifies that the file should remain open after creating. FALSE closes the file.</param>
      <param name="lJustOpen">TRUE specifies that an existing database file be opened. FALSE specifies that that a new database file be opened.  The default is FALSE.  This can be used to open existing SDF and delimited files, which do not have a structure in the header ? in which case, an empty aStruct should be used.</param>
      <returns>TRUE when succesfull, otherwise FALSE. When an error has occurred then you can retrieve that error from RuntimeState.LastRddError.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Create(System.String,XSharp.RDD.Support.RddFieldInfo[],XSharp._RddList,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Create new file through the specified RDDs
            </summary>
      <param name="rddList">List of RDDs to use when creating the file</param>
      <param name="cName">Name of the file to create. When no extension is specified then the default extension for the RDD will be used.</param>
      <param name="aStruct">Structure to use when creating the file.</param>
      <param name="rddType">Type of the class that must be used to work with the RDD.</param>
      <param name="lNew">TRUE opens the database file in a new work area (first available).  FALSE opens it in the current work area.  lNew is useful only when lOpen has a value of TRUE. The default is FALSE.</param>
      <param name="cAlias">The alias to be associated with the work area where the file is opened.  Within a single thread, X# will not accept duplicate aliases.  cAlias is useful only when lOpen has a value of TRUE.  The default alias is the filename without extension</param>
      <param name="cDelim">The delimiter for fields within a delimited database file. The default is a NULL string </param>
      <param name="lKeep">TRUE specifies that the file should remain open after creating. FALSE closes the file.</param>
      <param name="lJustOpen">TRUE specifies that an existing database file be opened. FALSE specifies that that a new database file be opened.  The default is FALSE.  This can be used to open existing SDF and delimited files, which do not have a structure in the header ? in which case, an empty aStruct should be used.</param>
      <returns>TRUE when succesfull, otherwise FALSE. When an error has occurred then you can retrieve that error from RuntimeState.LastRddError.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Dbf">
      <summary>Return the name of the alias.</summary>
    </member>
    <member name="M:XSharp.CoreDb.Delete">
      <summary>
            Mark the current record for deletion.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Deleted">
      <summary>
            Return the deleted status of the current record.
            </summary>
      <returns>TRUE if the current record is marked for deletion; otherwise, FALSE.
            If there is no database file in use in the current work area, CoreDbDeleted() returns FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Eof">
      <summary>
            Determine when end-of-file is encountered.
            </summary>
      <returns>TRUE when an attempt is made to move the record pointer beyond the last logical record in a
            database file or if the current database file contains no records; otherwise, FALSE.  If there is no
            database file open in the current work area, CoreDbEOF() returns TRUE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Eval(XSharp.ICodeblock,XSharp.ICodeblock,XSharp.ICodeblock,System.Object,System.Object,System.Boolean)">
      <summary>
            Evaluate a code block for each record that matches a specified scope and/or condition.
            </summary>
      <param name="uBlock">The code block to execute for each record that matches the scope and conditions. </param>
      <param name="uCobFor">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="uCobWhile">A code block that defines another condition that each record must meet in order to be processed.  As soon as a record is encountered that causes the condition to fail, the operation terminates.  If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.</param>
      <param name="uNext">The number of records to process, starting at the current record.</param>
      <param name="nRecno">The number of the record to process.</param>
      <param name="lRest">TRUE processes only records from the current record to end-of-file.  FALSE processes all records.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.FCount">
      <summary>Return the number of fields in the current Workarea</summary>
    </member>
    <member name="M:XSharp.CoreDb.FieldGet(System.UInt32,System.Object@)">
      <summary>
            Retrieve the value of a specified database field.
            </summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="oRet">The returnvalue is returned through this parameter</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.FieldGetBytes(System.UInt32,System.Byte[]@)">
      <summary>
            Retrieve the value of a specified database field as an array of bytes
            </summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="oRet">The returnvalue is returned through this parameter</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.FieldInfo(System.UInt32,System.UInt32,System.Object)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.FieldInfo(System.UInt32,System.UInt32,System.Object@)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="oRet">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.FieldName(System.UInt32)">
      <summary>
            Return the name of a field as a string.
            </summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.FieldPos(System.String)">
      <summary>
            Return the position of a field.
            </summary>
      <param name="sFieldName"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.FieldPut(System.UInt32,System.Object)">
      <summary>
            Set the value of a specified database field.
            </summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="xValue">The value to write to the field</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.FieldPutBytes(System.UInt32,System.Byte[])">
      <summary>
            Retrieve the value of a specified database field as an array of bytes
            </summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="aValue">The value to write to the field</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.FileGet(System.UInt32,System.String)">
      <summary>Import contents from file into Memo field </summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="cFile">The name of the file where the value must be written.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.FilePut(System.UInt32,System.String)">
      <summary>Export field contents from Memo field to file</summary>
      <param name="nPos">The 1 based position of the field in the database file structure for the current work area.</param>
      <param name="cFile">The name of the file to write</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Filter">
      <summary>
            Return a filter.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.Flock">
      <summary>
            Lock an opened and shared database file.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Found">
      <summary>
            Determine if the previous search operation succeeded.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.GetScope">
      <summary>Gets the locate condition.</summary>
      <returns>An object containing the scope for the current area.</returns>
    </member>
    <member name="M:XSharp.CoreDb.GetSelect">
      <summary>
            Return the work area number.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.GoBottom">
      <summary>
            Move to the last logical record.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Goto(System.Object)">
      <summary>
            Move to a record specified by record number.
            </summary>
      <param name="uRecId">ID of the record to goto</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.GoTop">
      <summary>
            Move to the first logical record.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Header"></member>
    <member name="M:XSharp.CoreDb.Info(System.UInt32,System.Object)">
      <summary>
            Retrieve information about a work area.
            </summary>
      <param name="nOrdinal"></param>
      <param name="oValue">If specified, this parameter is used to change the value of a setting. This parameter also receives the return value.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Info(System.UInt32,System.Object@)">
      <summary>
            Retrieve information about a work area.
            </summary>
      <param name="oValue">If specified, this parameter is used to change the value of a setting. This parameter also receives the return value.</param>
      <param name="nOrdinal"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.JoinAppend(System.UInt32,XSharp._JoinList)">
      <summary>Write values to destination Workarea in a JOIN operation</summary>
      <param name="nSelect"></param>
      <param name="struList"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.LastRec">
      <summary>
            Return the number of the last record in a database file.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.Locate(XSharp.ICodeblock,XSharp.ICodeblock,System.Int32,System.Object,System.Boolean)">
      <summary>
            Search for the first record that matches a specified condition and scope.
            </summary>
      <param name="uCobFor">
        <span>
            A code block that defines a condition that each record within the scope must meet in order to be processed.
        </span>
      </param>
      <param name="uCobWhile">
        <span>
            A code block that defines another condition that each record must meet in order
            to be processed.
            As soon as a record is encountered that causes the condition to fail, the operation
            terminates.<br />

            If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

            You define the scope using one of these three, mutually exclusive arguments.<br />
            The default is all records.
        </span>
      </param>
      <param name="nNext">The number of records to process, starting with the current record.</param>
      <param name="uRecId">The number of the record to process.</param>
      <param name="lRest">TRUE processes only records from the current record to end-of-file.  FALSE processes all records.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.MemoExt(System.String)">
      <summary>Return Memo File extension</summary>
      <param name="cDriver"></param>
      <returns></returns>
    </member>
    <member name="E:XSharp.CoreDb.Notify">
      <summary>
            An event to which you can subscribe to be notified of operations on Workareas.
            </summary>
    </member>
    <member name="M:XSharp.CoreDb.OrdBagExt">
      <summary>
            Return the default index file extension for a work area as defined by the its RDD.
            </summary>
      <returns>Default extension for the current Workarea, or an empty string when no table is open in the current Workarea.
            </returns>
    </member>
    <member name="M:XSharp.CoreDb.OrdCondSet(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>
            Set the condition and scope for an order.
            </summary>
      <param name="ordCondInfo">An object defining the condition and scope information. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrdCreate(System.String,System.Object,System.String,XSharp.ICodeblock,System.Boolean,XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>
            Create or replace an order in an index file.
            </summary>
      <param name="cBagName">Orderbag name (index filename) to create the order in.</param>
      <param name="uOrder">Ordername to create.</param>
      <param name="cExpr">The order key expression specified as a string</param>
      <param name="uCobExpr">The order key expression specified as a codeblock.</param>
      <param name="lUnique">TRUE creates a unique order by including only those records with unique key values; FALSE uses all records in the database file. </param>
      <param name="ordCondInfo">An object defining the condition and scope information. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrdDestroy(System.String,System.Object)">
      <summary>
            Remove an order from an open index file.
            </summary>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  Use this argument with &lt;cOrder&gt; to remove ambiguity when there are two or more orders with the same name in different index files.</param>
      <param name="oOrder">The name of the order or a number representing its position in the order list.  Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrderInfo(System.UInt32,System.String,System.Object,System.Object)">
      <summary>
            Return information about index files and the orders in them.
            </summary>
      <param name="nOrdinal">Specifies the type of information. This must match the values in the DBOI_ defines</param>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  </param>
      <param name="oOrder">The name of the order about which you want to obtain information or a number representing its position in the order list.</param>
      <param name="oValue">If specified, this parameter is used to change the value of a setting. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrderInfo(System.UInt32,System.String,System.Object,System.Object@)">
      <summary>
            Return information about index files and the orders in them.
            </summary>
      <param name="oValue">If specified, this parameter is used to change the value of a setting and retrieve the current setting. </param>
      <param name="nOrdinal">Specifies the type of information. This must match the values in the DBOI_ defines</param>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  </param>
      <param name="oOrder">The name of the order about which you want to obtain information or a number representing its position in the order list.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrdListAdd(System.String,System.Object)">
      <summary>
            Open an index file and add specified orders to the order list in a work area.
            </summary>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  Use this argument with &lt;cOrder&gt; to remove ambiguity when there are two or more orders with the same name in different index files.</param>
      <param name="oOrder">The name of the order or a number representing its position in the order list.  Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrdListClear(System.String,System.Object)">
      <summary>
            Remove orders from the order list in a work area and close associated index files.
            </summary>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  Use this argument with &lt;cOrder&gt; to remove ambiguity when there are two or more orders with the same name in different index files.</param>
      <param name="oOrder">The name of the order or a number representing its position in the order list.  Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrdListRebuild">
      <summary>
            Rebuild all orders in the order list of a work area.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrdSetFocus(System.String,System.Object)">
      <summary>
            Set the controlling order for a work area.
            </summary>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  Use this argument with &lt;cOrder&gt; to remove ambiguity when there are two or more orders with the same name in different index files.</param>
      <param name="oOrder">The name of the order or a number representing its position in the order list.  Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.</param>
      <param name="strPreviousOrder" />
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.OrdSetFocus(System.String,System.Object,System.String@)">
      <summary>
            Set the controlling order for a work area.
            </summary>
      <param name="cBagName">The name of an index file, including an optional drive and directory.  Use this argument with &lt;cOrder&gt; to remove ambiguity when there are two or more orders with the same name in different index files.</param>
      <param name="oOrder">The name of the order or a number representing its position in the order list.  Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files.  Invalid values are ignored.</param>
      <param name="strPreviousOrder">This parameter returns the previous order</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Pack">
      <summary>
            Remove all records that have been marked for deletion from a database file.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RddCount">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.RddInfo(System.UInt32,System.Object)">
      <summary>Return and optionally change settings controlled directly by the RDD.</summary>
      <param name="nOrdinal">Ordinal number of the setting to set/retrieve.</param>
      <param name="oValue">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RddInfo(System.UInt32,System.Object@)">
      <summary>Return and optionally change settings controlled directly by the RDD.</summary>
      <param name="nOrdinal">Ordinal number of the setting to set/retrieve.</param>
      <param name="oValue">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RddList">
      <summary>Returns list of RDD names that are in use at this moment</summary>
    </member>
    <member name="M:XSharp.CoreDb.RddList(XSharp._RddList,System.UInt32)"></member>
    <member name="M:XSharp.CoreDb.RddName">
      <summary>
            Return an RDD name.
            </summary>
      <returns>The name of the RDD</returns>
    </member>
    <member name="M:XSharp.CoreDb.RddSetDefault(System.String)">
      <summary>
            Return and optionally change the default RDD for the application.
            </summary>
      <param name="cNewRDD"></param>
      <returns>The previous default RDD</returns>
    </member>
    <member name="M:XSharp.CoreDb.Recall">
      <summary>
            Restore the current record if it is marked for deletion.
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Recno">
      <summary>
            Return the current record number.
            </summary>
      <returns>The 1 based current record number.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RecordGet">
      <summary>Get the contents of the current record as an array of bytes</summary>
      <returns>An array of bytes that contains the current record.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RecordInfo(System.UInt32,System.Object,System.Object)">
      <summary>
            Retrieve information about a record.
            </summary>
      <param name="nOrdinal">This must match one of the values from the DbRecordInfo Enum</param>
      <param name="oRecID">Some of the DbRecordInfo enum values require a record number</param>
      <param name="oValue">Some of the DbRecordInfo enum values require a new value. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RecordInfo(System.UInt32,System.Object,System.Object@)">
      <summary>
            Retrieve information about a record.
            </summary>
      <param name="oRet">The returnvalue is returned through this parameter. When set on entry this is the new value of the setting.</param>
      <param name="nOrdinal">This must match one of the values from the DbRecordInfo Enum</param>
      <param name="oRecID">Some of the DbRecordInfo enum values require a record number</param>
      <param name="oValue">Some of the DbRecordInfo enum values require a new value. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RecordPut(System.Byte[])">
      <summary>Update the current record from an array of bytes</summary>
      <param name="aRecord">The bytes that form the record. Please note that if the DBF has a memo file, then this array must contain a valid position for the memo attached to the record.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RecSize">
      <summary>Return the record length in the current Workarea</summary>
    </member>
    <member name="M:XSharp.CoreDb.Refresh">
      <summary>
            Discard all the changes to the current workares
            </summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Relation(System.UInt32,System.String@)">
      <summary>
            Return the linking expression of a specified relation.
            </summary>
      <param name="nPos">The position of the desired relation in the list of current work area relations.  The relations are numbered according to the order in which they were defined by relation setting.</param>
      <param name="pszRel">The linking expression defined to &lt;nRelation&gt;.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RLock(System.Object)">
      <summary>
            Lock the current record.
            </summary>
      <param name="uRecId">The ID (usually a record number) of the record to be locked.  If specified, record locks held by the current process are retained.  If not specified, all locks held by the current process are released and the current record is assumed.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.RSelect(System.UInt32)">
      <summary>
            Return the work area number of a relation.
            </summary>
      <param name="nPos">The position of the desired relation in the list of work area relations.  The relations are numbered according to the order in which they were defined by relation setting.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Seek(System.Object,System.Boolean,System.Boolean)">
      <summary>
            Move to the record having the specified key value.
            </summary>
      <param name="oValue">Specifies the key value associated with the desired record.</param>
      <param name="lSoftSeek">Determines how the work area is positioned if the specified key value is not found: TRUE performs a soft seek; FALSE does not.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Select(System.UInt32,System.UInt32@)">
      <summary>
            Select a new work area and retrieve the current work area.
            </summary>
      <param name="nNew">The work area number for the new work area.</param>
      <param name="nOld">The work area number for the old work area.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.SetFilter(XSharp.ICodeblock,System.String)">
      <summary>
            Set a filter condition.
            </summary>
      <param name="oBlock">Codeblock that defines the filter. Please note that some RDDs (such as Advangate) will NOT use this compiled codeblock.</param>
      <param name="cFilter">String version of the filter. Some RDDs (such as Advantage) use this condition instead of the codeblock</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.SetFound(System.Boolean)">
      <summary>
            Set the found flag.
            </summary>
      <param name="lFound"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.SetLocate(XSharp.ICodeblock)">
      <summary>
            Specify the code block for a locate condition.
            </summary>
      <param name="oBlock" />
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.SetRelation(System.String,XSharp.ICodeblock,System.String,System.String)">
      <summary>
            Relate a specified work area to the current work area.
            </summary>
      <param name="cAlias">Alias of child area.</param>
      <param name="uCobKey">Relational key as codeblock.</param>
      <param name="cKey">Relational key as string.</param>
      <param name="cName">Name of the relation. Defaults to the parent alias + "_" + Child alias</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.SetScope(XSharp.RDD.Support.DbScopeInfo)">
      <summary>Set the locate condition.</summary>
      <param name="scope">A Scope objhect describing the current scope.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.SetSelect(System.Int32)">
      <summary>
            Select a new work area.
            </summary>
      <param name="siNew">The number of the new work area. 0 indicates the first available free Workarea. -1 indicates the last available free Workarea.</param>
      <returns>The newly selected work area.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Skip(System.Int32)">
      <summary>
            Move the record pointer relative to the current record.
            </summary>
      <param name="nRecords">The number of logical records to move, relative to the current record.  A positive value means to skip forward, and a negative value means to skip backward. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.SkipScope(System.Int32,XSharp.RDD.Support.DbScopeInfo)">
      <summary>Position the cursor relative to its current position within the current scope.</summary>
      <param name="nRecords"></param>
      <param name="scope"></param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Sort(System.UInt32,XSharp._FieldNames,XSharp.ICodeblock,XSharp.ICodeblock,System.Object,System.Object,System.Boolean,XSharp._FieldNames)">
      <summary>Copy records to a database file in sorted order.</summary>
      <param name="nDest">The work area number for the target Workarea.</param>
      <param name="fieldNames">The field names to write specified as an _FieldNames object.</param>
      <param name="uCobFor">
        <span>
            A code block that defines a condition that each record within the scope must meet in order to be processed.
        </span>
      </param>
      <param name="uCobWhile">
        <span>
            A code block that defines another condition that each record must meet in order
            to be processed.
            As soon as a record is encountered that causes the condition to fail, the operation
            terminates.<br />

            If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

            You define the scope using one of these three, mutually exclusive arguments.<br />
            The default is all records.
        </span>
      </param>
      <param name="nNext">The number of records to append, starting at the current record.</param>
      <param name="nRecno">The number of the record to append.</param>
      <param name="lRest">TRUE processes only records from the current record to end-of-file.  FALSE processes all records.</param>
      <param name="sortNames">The sort keys, specified as an _FieldNames object.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.SymSelect(System.String)">
      <summary>
            Select a new work area by specifying its alias as a string and return the number of the current work area.
            </summary>
      <param name="sAlias">The alias of the work area you want to select.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.CoreDb.Trans(System.UInt32,XSharp._FieldNames,XSharp.ICodeblock,XSharp.ICodeblock,System.Object,System.Object,System.Boolean)">
      <summary>Copy one or more rows from one work area to another.</summary>
      <param name="nDest">The work area number for the target Workarea.</param>
      <param name="fldNames">The field names to write specified as an _FieldNames object.</param>
      <param name="uCobFor">
        <span>
            A code block that defines a condition that each record within the scope must meet in order to be processed.
        </span>
      </param>
      <param name="uCobWhile">
        <span>
            A code block that defines another condition that each record must meet in order
            to be processed.
            As soon as a record is encountered that causes the condition to fail, the operation
            terminates.<br />

            If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

            You define the scope using one of these three, mutually exclusive arguments.<br />
            The default is all records.
        </span>
      </param>
      <param name="sortNames">The sort keys, specified as an _FieldNames object.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.TransRec(System.UInt32,XSharp._FieldNames)">
      <summary>Copy a single row from one work area to another.</summary>
      <param name="nDest">The work area number for the target Workarea.</param>
      <param name="fldNames">The field names to write specified as an _FieldNames object.</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Unlock(System.Object)">
      <summary>
            Release all locks for a work area.
            </summary>
      <param name="uRecno">The ID of the record to be unlocked.  To omit, specify NULL_OBJECT.
            This unlocks all locked records or the whole file. </param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.UnlockAll">
      <summary>Release all locks for all work areas.</summary>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.UseArea(System.Boolean,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Open a database file.
            </summary>
      <param name="rddName">Name of the RDD to use.</param>
      <param name="lNew">Open RDD in new Workarea ?</param>
      <param name="rddList">RDDList structure that describes the RDD to use</param>
      <param name="cName">Name of the (dbf) file to open</param>
      <param name="cAlias">Alias to use for the Workarea</param>
      <param name="lShare">Should the file be opened shared ?</param>
      <param name="lReadOnly">Should the file be opened readonly ?</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.UseArea(System.Boolean,System.Type,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Open a database file.
            </summary>
      <param name="rddType">Type of the RDD to use.</param>
      <param name="lNew">Open RDD in new Workarea ?</param>
      <param name="rddList">RDDList structure that describes the RDD to use</param>
      <param name="cName">Name of the (dbf) file to open</param>
      <param name="cAlias">Alias to use for the Workarea</param>
      <param name="lShare">Should the file be opened shared ?</param>
      <param name="lReadOnly">Should the file be opened readonly ?</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.UseArea(System.Boolean,XSharp._RddList,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Open a database file.
            </summary>
      <param name="lNew">Open RDD in new Workarea ?</param>
      <param name="rddList">RDDList structure that describes the RDD to use</param>
      <param name="cName">Name of the (dbf) file to open</param>
      <param name="cAlias">Alias to use for the Workarea</param>
      <param name="lShare">Should the file be opened shared ?</param>
      <param name="lReadOnly">Should the file be opened readonly ?</param>
      <returns>TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:XSharp.CoreDb.Zap">
      <summary>Remove all records from the current Workarea.</summary>
      <returns>TRUE if successful; otherwise, FALSE./// </returns>
    </member>
    <member name="T:XSharp.DateCountry">
      <summary>Values that match the XBase DateCountry defines. They are used to set the date format.</summary>
    </member>
    <member name="T:XSharp.DbNotifyEventArgs">
      <summary>Provides data for the Notify event of the IDbNotify interface.</summary>
    </member>
    <member name="P:XSharp.DbNotifyEventArgs.Data">
      <summary>Specific data that describes the object.</summary>
    </member>
    <member name="P:XSharp.DbNotifyEventArgs.Type">
      <summary>The type of event that happened.</summary>
    </member>
    <member name="T:XSharp.DbNotifyEventHandler">
      <summary>The delegate that defines the Workarea Eventhandler</summary>
      <param name="sender">Workarea for which the event happened.
            <note>The <paramref name="sender">sender</paramref> object may be NULL for operations that work on all Workareas, such as DbCloseAll() </note></param>
      <param name="e">Object that describes the event that happened.</param>
    </member>
    <member name="T:XSharp.DialectChanged">
      <summary>Delegate used for the DialectChanged Event handler</summary>
    </member>
    <member name="T:XSharp.Error">
      <summary>XSharp Runtime base Error class</summary>
    </member>
    <member name="M:XSharp.Error.#ctor">
      <summary>Create an Error Object</summary>
    </member>
    <member name="M:XSharp.Error.#ctor(System.Exception)">
      <summary>Create an Error Object with the Innner Exception</summary>
    </member>
    <member name="M:XSharp.Error.#ctor(System.Exception,System.String,System.String,System.UInt32,System.Object[])">
      <summary>Create an Error Object with the Innner Exception and other parameters</summary>
    </member>
    <member name="M:XSharp.Error.#ctor(System.String)">
      <summary>Create an Error Object with the specified Description</summary>
    </member>
    <member name="M:XSharp.Error.#ctor(System.UInt32,System.String)">
      <summary>Create an Error Object for a Gencode and Argument Name.</summary>
    </member>
    <member name="M:XSharp.Error.#ctor(System.UInt32,System.String,System.String)">
      <summary>Create an Error Object for a Gencode, Argument Name and Description.</summary>
    </member>
    <member name="M:XSharp.Error.#ctor(System.UInt32,System.UInt32)">
      <summary>Create an Error Object.</summary>
    </member>
    <member name="M:XSharp.Error.#ctor(System.UInt32,System.UInt32,System.String,System.String,System.UInt32)">
      <summary>Create an Error Object.</summary>
    </member>
    <member name="P:XSharp.Error.Arg">
      <summary>A string representing the argument supplied to an operator or function when an argument error occurs.</summary>
    </member>
    <member name="P:XSharp.Error.ArgNum">
      <summary>A numeric value representing the number of the argument supplied to an operator or function when an argument error occurs.</summary>
    </member>
    <member name="P:XSharp.Error.Args">
      <summary>An array of the arguments supplied to an operator or function when an argument error occurs.</summary>
    </member>
    <member name="P:XSharp.Error.ArgType">
      <summary>A numeric value representing the data type of the argument that raised the error.</summary>
    </member>
    <member name="P:XSharp.Error.ArgTypeReq">
      <summary>A numeric value representing the expected type of the argument that raised the error.</summary>
    </member>
    <member name="P:XSharp.Error.ArgTypeReqType">
      <summary>The system type representing the expected type of the argument that raised the error.</summary>
    </member>
    <member name="P:XSharp.Error.ArgTypeType">
      <summary>The system type representing the data type of the argument that raised the error.</summary>
    </member>
    <member name="P:XSharp.Error.CallFuncSym">
      <summary>A symbol representing the calling function of the function in which the error occurred.</summary>
    </member>
    <member name="P:XSharp.Error.CanDefault">
      <summary>A logical value indicating whether the subsystem can perform default error recovery for the error condition.</summary>
    </member>
    <member name="P:XSharp.Error.CanRetry">
      <summary>A logical value indicating whether the subsystem can retry the operation that caused the error condition.</summary>
    </member>
    <member name="P:XSharp.Error.CanSubstitute">
      <summary>A logical value indicating whether a new result can be substituted for the operation that produced the error condition.</summary>
    </member>
    <member name="P:XSharp.Error.Cargo">
      <summary>A value of any data type unused by the Error system.  It is provided as a user-definable slot, allowing arbitrary information to be attached to an Error object and retrieved later</summary>
    </member>
    <member name="P:XSharp.Error.Description">
      <summary>A string that describes the error condition.</summary>
    </member>
    <member name="P:XSharp.Error.FileHandle">
      <summary>A numeric value representing the file handle supplied to a function when an file error occurs.</summary>
    </member>
    <member name="P:XSharp.Error.FileName">
      <summary>A string representing the name used to open the file associated with the error condition.</summary>
    </member>
    <member name="P:XSharp.Error.FuncPtr">
      <summary>A pointer to the function in which the error occurred.</summary>
    </member>
    <member name="P:XSharp.Error.FuncSym">
      <summary>A string representing the name of the function or method in which the error occurred.</summary>
    </member>
    <member name="P:XSharp.Error.Gencode">
      <summary>An integer numeric value representing a Visual Objects generic error code.</summary>
    </member>
    <member name="P:XSharp.Error.GenCodeText">
      <summary>An string containing the description of the Gencode.</summary>
    </member>
    <member name="M:XSharp.Error.GetInnerException(System.Exception)"></member>
    <member name="P:XSharp.Error.MaxSize">
      <summary>A numeric value representing a boundary condition for an operation (such as string overflow or array bound error).</summary>
    </member>
    <member name="P:XSharp.Error.MethodSelf">
      <summary>An object representing the SELF of the method in which the error occurred.</summary>
    </member>
    <member name="P:XSharp.Error.Operation">
      <summary>A string that describes the operation being attempted when the error occurred.</summary>
    </member>
    <member name="P:XSharp.Error.OSCode">
      <summary>A value of 0 indicates that the error condition was not caused by an error from the operating system.</summary>
    </member>
    <member name="P:XSharp.Error.OSCodeText">
      <summary>Descripion of the OSCode</summary>
    </member>
    <member name="M:XSharp.Error.SetStackTrace(System.String)"></member>
    <member name="P:XSharp.Error.Severity">
      <summary>A constant indicating the severity of the error condition.</summary>
    </member>
    <member name="P:XSharp.Error.Stack">
      <summary>Call stack from the moment where the error object was created</summary>
    </member>
    <member name="P:XSharp.Error.StackTrace"></member>
    <member name="P:XSharp.Error.SubCode">
      <summary>An integer numeric value representing a subsystem-specific error code.</summary>
    </member>
    <member name="P:XSharp.Error.SubCodeText">
      <summary>An string containing the description of the SubCode.</summary>
    </member>
    <member name="P:XSharp.Error.SubstituteType">
      <summary>A numeric value representing the type of the new result that the error handler substitutes for the operation that produced the error condition.</summary>
    </member>
    <member name="P:XSharp.Error.SubSystem">
      <summary>A string representing the name of the subsystem generating the error.</summary>
    </member>
    <member name="M:XSharp.Error.Throw">
      <summary>Throw the error.</summary>
    </member>
    <member name="M:XSharp.Error.ToString">
      <summary>Creates and returns a string representation of the current exception.</summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="P:XSharp.Error.Tries">
      <summary>An integer numeric value representing the number of times the failed operation has been attempted.</summary>
    </member>
    <member name="T:XSharp.FileSearcher">
      <summary>This delegate is used when you want to implement your own function for the logic behind the File() function. You can register your own FileSearcher by calling the RegisterFileSearch() function.</summary>
    </member>
    <member name="T:XSharp.FileStreamExensions"></member>
    <member name="M:XSharp.FileStreamExensions.SafeLock(System.IO.FileStream,System.Int64,System.Int64)">
      <summary>Locks a region in a stream. Contains TRY CATCH mechanism. </summary>
      <param name="oStream">The stream to lock.</param>
      <param name="offset">Start of the region to lock. The method checks to see that the location is &gt;= 0.</param>
      <param name="length">Size of the region to lock. The method checks to see that the size is &gt; 0.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred during reading or when offset or length were invalid.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeRead(System.IO.FileStream,System.Byte[])">
      <summary>Read data from a stream. Assumes that the whole buffer must be read. Reads from current location.</summary>
      <param name="oStream">The stream to read from.</param>
      <param name="pos">Location where to start reading.</param>
      <param name="buffer">Buffer that must be read.</param>
      <param name="length"># of bytes to read.</param>
      <param name="lread"># of bytes actually read.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeRead(System.IO.FileStream,System.Byte[],System.Int32)">
      <summary>Read data from a stream. Contains TRY CATCH mechanism. Reads from current location.</summary>
      <param name="oStream">The stream to read from.</param>
      <param name="pos">Location where to start reading.</param>
      <param name="buffer">Buffer that must be read.</param>
      <param name="length"># of bytes to read.</param>
      <param name="lread"># of bytes actually read.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeRead(System.IO.FileStream,System.Byte[],System.Int32,System.Int32@)">
      <summary>Read data from a stream. Contains TRY CATCH mechanism. Reads from current location.</summary>
      <param name="oStream">The stream to read from.</param>
      <param name="pos">Location where to start reading.</param>
      <param name="buffer">Buffer that must be read.</param>
      <param name="length"># of bytes to read.</param>
      <param name="lread"># of bytes actually read.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeReadAt(System.IO.FileStream,System.Int64,System.Byte[])">
      <summary>Read data at a location in the file. Makes sure that file locations are &gt;= 0. Assumes whole buffer must be read.</summary>
      <param name="oStream">The stream to read from.</param>
      <param name="pos">Location where to start reading.</param>
      <param name="buffer">Buffer that must be read.</param>
      <param name="length"># of bytes to read.</param>
      <param name="lread"># of bytes actually read.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeReadAt(System.IO.FileStream,System.Int64,System.Byte[],System.Int32)">
      <summary>Read data at a location in the file. Makes sure that file locations are &gt;= 0</summary>
      <param name="oStream">The stream to read from.</param>
      <param name="pos">Location where to start reading.</param>
      <param name="buffer">Buffer that must be read.</param>
      <param name="length"># of bytes to read.</param>
      <param name="lread"># of bytes actually read.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeSetLength(System.IO.FileStream,System.Int64)">
      <summary>Sets the length of a stream. Contains TRY CATCH mechanism. </summary>
      <param name="oStream">The stream for which to set the lengt.</param>
      <param name="length">The new length of the stream. The method checks to see that the location is &gt;= 0.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred during reading or when the length &lt; 0</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeSetPos(System.IO.FileStream,System.Int64)">
      <summary>Sets the location of a stream. Contains TRY CATCH mechanism. .</summary>
      <param name="oStream">The stream to write to.</param>
      <param name="pos">Location where to start writing.</param>
      <param name="buffer">Buffer that must be written.</param>
      <param name="length"># of bytes to write</param>
      <param name="b">Byte to write.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeUnlock(System.IO.FileStream,System.Int64,System.Int64)">
      <summary>Unlocks a region in a stream. Contains TRY CATCH mechanism. </summary>
      <param name="oStream">The stream to unlock.</param>
      <param name="offset">Start of the region to unlock. The method checks to see that the location is &gt;= 0.</param>
      <param name="length">Size of the region to unlock. The method checks to see that the size is &gt; 0.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred during reading or when offset or length were invalid.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeWrite(System.IO.FileStream,System.Byte[])">
      <summary>Write data to a stream. Contains TRY CATCH mechanism. Writes to the current location. Assumes the whole buffer must be written.</summary>
      <param name="oStream">The stream to write to.</param>
      <param name="pos">Location where to start writing.</param>
      <param name="buffer">Buffer that must be written.</param>
      <param name="length"># of bytes to write</param>
      <param name="b">Byte to write.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeWrite(System.IO.FileStream,System.Byte[],System.Int32)">
      <summary>Write data to a stream. Contains TRY CATCH mechanism. Writes to the current location.</summary>
      <param name="oStream">The stream to write to.</param>
      <param name="pos">Location where to start writing.</param>
      <param name="buffer">Buffer that must be written.</param>
      <param name="length"># of bytes to write</param>
      <param name="b">Byte to write.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeWriteAt(System.IO.FileStream,System.Int64,System.Byte[])">
      <summary>Write data at a location in the file. Makes sure that file locations are &gt;= 0. Assumes whole buffer must be written.</summary>
      <param name="oStream">The stream to write to.</param>
      <param name="pos">Location where to start writing.</param>
      <param name="buffer">Buffer that must be written.</param>
      <param name="length"># of bytes to write</param>
      <param name="b">Byte to write.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeWriteAt(System.IO.FileStream,System.Int64,System.Byte[],System.Int32)">
      <summary>Write data at a location in the file. Makes sure that file locations are &gt;= 0. </summary>
      <param name="oStream">The stream to write to.</param>
      <param name="pos">Location where to start writing.</param>
      <param name="buffer">Buffer that must be written.</param>
      <param name="length"># of bytes to write</param>
      <param name="b">Byte to write.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="M:XSharp.FileStreamExensions.SafeWriteByte(System.IO.FileStream,System.Byte)">
      <summary>Write data to a stream. Contains TRY CATCH mechanism. Writes to the current location.</summary>
      <param name="oStream">The stream to write to.</param>
      <param name="pos">Location where to start writing.</param>
      <param name="buffer">Buffer that must be written.</param>
      <param name="length"># of bytes to write</param>
      <param name="b">Byte to write.</param>
      <returns>TRUE when succesfull, FALSE when an exception occurred or when a parameter was incorrect.</returns>
    </member>
    <member name="T:XSharp.Gencode">
      <summary>Error code Enum that matches the Visual Objecs and Vulcan Generic Error Codes</summary>
    </member>
    <member name="T:XSharp.IClosedRDD"></member>
    <member name="P:XSharp.IClosedRDD.Closed"></member>
    <member name="T:XSharp.ICodeblock">
      <summary>
            This interface defines Compile time and runtime codeblocks
            </summary>
    </member>
    <member name="M:XSharp.ICodeblock.EvalBlock(System.Object[])">
      <summary>Evaluate the codeblock</summary>
    </member>
    <member name="M:XSharp.ICodeblock.PCount">
      <summary>
            Returns the number of parameters defined for the codeblock
            </summary>
    </member>
    <member name="T:XSharp.ICodeblock2">
      <summary>
            This interface extends the ICodeblock interface and adds a property
            that returns the 'real' returntype of the codeblock, before
            customizations are done to the value (for example for Foxpro where NIL gets converted to FALSE)
            </summary>
    </member>
    <member name="P:XSharp.ICodeblock2.ResultType">
      <summary>
            Returns the real /original return type of the EvalBlock() method
            </summary>
      <value>A value of the __UsualType enum</value>
    </member>
    <member name="T:XSharp.IDate">
      <summary>
            This interface defines Date values
            </summary>
    </member>
    <member name="P:XSharp.IDate.Day">
      <summary>Day part of the date. A number between 0 an 31</summary>
      <returns>Integer value</returns>
    </member>
    <member name="P:XSharp.IDate.IsEmpty">
      <summary>Is the date empty (NULL_DATE)</summary>
      <returns>Logical value</returns>
    </member>
    <member name="P:XSharp.IDate.Month">
      <summary>Month part of the date. A number between 0 an 12</summary>
      <returns>Integer value</returns>
    </member>
    <member name="P:XSharp.IDate.Value">
      <summary>Date as System.DateTime structure</summary>
      <returns>System.DateTime value</returns>
    </member>
    <member name="P:XSharp.IDate.Year">
      <summary>Year part of the date. A number between 0 and 9999</summary>
      <returns>Integer value</returns>
    </member>
    <member name="T:XSharp.IDbNotify">
      <summary>
            This interface must be implemented by objects that register themselves for DB Notifications
            </summary>
    </member>
    <member name="M:XSharp.IDbNotify.Notify(XSharp.RDD.IRdd,XSharp.DbNotifyEventArgs)">
      <summary>This message is sent to clients when a Workarea event happens</summary>
      <param name="sender">Workarea for which the event happened.
            <note>The <paramref name="sender">sender</paramref> object may be NULL for operations that work on all Workareas, such as DbCloseAll() </note></param>
      <param name="e">Object that describes the event that happened.</param>
    </member>
    <member name="T:XSharp.IFloat">
      <summary>
            This interface defines FLOAT values
            </summary>
    </member>
    <member name="P:XSharp.IFloat.Decimals">
      <summary>Number of decimals.</summary>
      <returns>Integer value</returns>
    </member>
    <member name="P:XSharp.IFloat.Digits">
      <summary>Number of digits (includes the optional decimal separator and decimals).</summary>
      <returns>Integer value</returns>
    </member>
    <member name="P:XSharp.IFloat.Value">
      <summary>Double value of the Float</summary>
      <returns>Integer value</returns>
    </member>
    <member name="T:XSharp.IMacroCompiler">
      <summary>
            This interface defines the Macro compiler subsystem
            </summary>
    </member>
    <member name="M:XSharp.IMacroCompiler.Compile(System.String,System.Boolean,System.Reflection.Module,System.Boolean@,System.Boolean@)">
      <summary>Compile a string into a runtime codeblock.</summary>
      <param name="macro">String to compile</param>
      <param name="lAllowSingleQuotes">Should single quotes be allowed</param>
      <param name="module">Module of the main app</param>
      <param name="isCodeblock">will be set to TRUE when the string was a real codeblock (with {|..| }).</param>
      <param name="addsMemVars">will be set to TRUE when the macro contains code that may result in adding new MemVars).</param>
      <returns>A compiled codeblock</returns>
    </member>
    <member name="T:XSharp.IMacroCompiler2">
      <summary>
            This interface extends the Macro compiler and adds a method that is called to decide between ambigous methods or constructors
            </summary>
    </member>
    <member name="P:XSharp.IMacroCompiler2.Resolver">
      <summary>This property allows to set a delegate that may be used to resolve ambigous references</summary>
    </member>
    <member name="T:XSharp.ImplicitNamespaceAttribute">
      <summary>
            This class is used to tell the compiler that the assembly has types in a specific namespace.
            When the compiler is called with the /ins command line option, then the names specified with this attribute
            will be automatically included in the USING list when compiling.
            </summary>
    </member>
    <member name="M:XSharp.ImplicitNamespaceAttribute.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.ImplicitNamespaceAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.ImplicitNamespaceAttribute.Namespace">
      <summary>Name of the implicit namespace.</summary>
    </member>
    <member name="T:XSharp.MacroCompilerIncludeAssemblyInCache">
      <summary>
            This delegate is used to decide if an assembly should be included in the type cache
            </summary>
      <param name="ass">Assembly object of the assembly being inspected</param>
      <returns>TRUE when the types in the assembly need to be cached.</returns>
    </member>
    <member name="T:XSharp.MacroCompilerResolveAmbiguousMatch">
      <summary>
            This delegate is used to decide between 2 ambigous methods, functions or constructors
            </summary>
      <param name="m1">MethodInfo of the first symbol</param>
      <param name="m2">MethodInfo of the second symbol</param>
      <param name="args">The types of the arguments that were passed to the method call</param>
      <returns>The delegate should return 1 when it wants to use the first symbol and 2 when it wants to use the second symbol or 0 when it does not want to use either symbol</returns>
    </member>
    <member name="T:XSharp.RuntimeState">
      <summary>
            Container Class that holds the XSharp Runtime state
            </summary>
    </member>
    <member name="P:XSharp.RuntimeState.Alternate">
      <summary>The current Alternate setting.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.AltFile">
      <summary>The current AltFile setting.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Ansi">
      <summary>The current ANSI setting</summary>
    </member>
    <member name="P:XSharp.RuntimeState.AppModule">
      <summary>The System.Reflection.Module for the main application.</summary>
    </member>
    <member name="F:XSharp.RuntimeState.AutoLock">
      <summary>Delegate that gets called to automatically lock a record in the FoxPro dialect.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.AutoOpen">
      <summary>The current AutoOpen setting (used by the RDD system).</summary>
    </member>
    <member name="P:XSharp.RuntimeState.AutoOrder">
      <summary>The current AutoOrder setting (used by the RDD system).</summary>
    </member>
    <member name="P:XSharp.RuntimeState.AutoShareMode">
      <summary>The current AutoShareMode setting (used by the RDD system).</summary>
    </member>
    <member name="F:XSharp.RuntimeState.AutoUnLock">
      <summary>Delegate that gets called to automatically unlock a record in the FoxPro dialect.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.BreakLevel">
      <summary>Current Break Level. Gets set by compiler generated code for BEGIN SEQUENCE .. END constructs.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Century">
      <summary>The current Century setting (used in DATE &lt;-&gt; STRING conversions).</summary>
    </member>
    <member name="P:XSharp.RuntimeState.CollationMode">
      <summary>The current Collation mode (used by the RDD system).</summary>
    </member>
    <member name="P:XSharp.RuntimeState.CollationTable">
      <summary>Current collation table.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Compatible">
      <summary>The current Compatible setting.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.CompilerOptionFOVF">
      <summary>The current compiler setting for the FOVF compiler option.</summary>
      <value>The default vale for this option is 'False'.</value>
    </member>
    <member name="P:XSharp.RuntimeState.CompilerOptionFox2">
      <summary>The current compiler setting for the VO13 compiler option.</summary>
      <value>The default value for this option is 'False'.</value>
    </member>
    <member name="P:XSharp.RuntimeState.CompilerOptionOVF">
      <summary>The current compiler setting for the OVF compiler option.</summary>
      <value>The default vale for this option is 'False'.</value>
    </member>
    <member name="P:XSharp.RuntimeState.CompilerOptionVO11">
      <summary>The current compiler setting for the VO11 compiler option.</summary>
      <value>The default vale for this option is 'False'.</value>
    </member>
    <member name="P:XSharp.RuntimeState.CompilerOptionVO13">
      <summary>The current compiler setting for the VO13 compiler option.</summary>
      <value>The default value for this option is 'False'.</value>
    </member>
    <member name="P:XSharp.RuntimeState.Console">
      <summary>The current Console setting.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.CurrentWorkarea">
      <summary>Gets / Sets the current Workarea number.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DataSession">
      <summary>The DataSession information for the current Thread.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DateCountry">
      <summary>The current DateCountry setting mode (used in DATE &lt;-&gt; STRING conversions).</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DateFormat">
      <summary>The current Date format</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Decimals">
      <summary>The default number of decimals for new FLOAT values that are created without explicit decimals.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DecimalSep">
      <summary>The default number of decimals for new FLOAT values that are created without explicit decimals.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DefaultRDD">
      <summary>The default RDD.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Deleted">
      <summary>RDD Deleted Flag that determines whether to ignore or include records that are marked for deletion.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DelimRDD">
      <summary>Name of the RDD uses for DELIM operations.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Dialect"></member>
    <member name="E:XSharp.RuntimeState.DialectChanged">
      <summary>This event is invoked when the runtime dialect is changed.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Digits">
      <summary>The default number of digits for new FLOAT values that are created without explicit decimals</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DigitsFixed">
      <summary>Logical setting that fixes the number of digits used to display numeric output.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DosCodePage">
      <summary>The 'DOS' Codepage. This gets read at startup from the OS().</summary>
    </member>
    <member name="P:XSharp.RuntimeState.DosEncoding">
      <summary>The DOS Encoding. This is based on the corrent DOS Codepage.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Eof">
      <summary>Should text files, such as memo files be written with a closing EOF = chr(26) character.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Eol">
      <summary>End of line character to be used by the runtime. Defaults to CR + LF (13 + 13).</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Epoch">
      <summary>Date Epoch value that determines how dates without century digits are interpreted.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.EpochCent">
      <summary>Date Epoch Century value. This gets set by the SetEpoch() function to the century in which the Epoch year falls.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.EpochYear">
      <summary>Date Epoch Year value. This gets set by the SetEpoch() function to the Epoch year % 100.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Exact">
      <summary>String comparison Exact flag that determines how comparisons with the single '=' characters should be done.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.FieldDelimiter">
      <summary>Field delimiters for DELIM operations.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.FileError">
      <summary>The last File IO error number</summary>
    </member>
    <member name="P:XSharp.RuntimeState.FileException">
      <summary>The last file IO Exception</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Fixed">
      <summary>Logical setting that fixes the number of decimal digits used to display numbers.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.FloatDelta">
      <summary>Numeric value that controls the precision of Float comparisons.</summary>
    </member>
    <member name="M:XSharp.RuntimeState.GetInstance">
      <summary>Retrieve the runtime state for the current thread</summary>
    </member>
    <member name="M:XSharp.RuntimeState.GetValue``1(XSharp.Set)">
      <summary>Retrieve a value from the state of the current Thread.</summary>
      <param name="nSetting">Setting number to retrieve. Must be defined in the SET enum.</param>
      <typeparam name="T">The return type expected for this setting.</typeparam>
      <returns>The current value, or a default value of type T.</returns>
    </member>
    <member name="P:XSharp.RuntimeState.HPLocking">
      <summary>The setting that determines whether to use the High Performance (HP) locking schema for newly created .NTX files</summary>
    </member>
    <member name="P:XSharp.RuntimeState.International">
      <summary>Current SetInternational Setting.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.LastFound">
      <summary>The last file found with File(). This is the name that FPathName() returns.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.LastRddError">
      <summary>Last error that occurred in the RDD subsystem.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.LastScriptError">
      <summary>Last Script error that occurred .</summary>
    </member>
    <member name="P:XSharp.RuntimeState.LockTries">
      <summary>Number of tries that were done when the last lock operation failed.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.MacroCompiler">
      <summary>Active Macro compiler</summary>
    </member>
    <member name="P:XSharp.RuntimeState.MacroCompilerIncludeAssemblyInCache">
      <summary>
            This property allows you to override the mechanism that decided if the types in an assembly should be cached
            The default behavior is that every assembly that is found is cached.
            </summary>
      <value></value>
    </member>
    <member name="P:XSharp.RuntimeState.MacroResolver">
      <summary>Active Macro compiler</summary>
    </member>
    <member name="P:XSharp.RuntimeState.MemoBlockSize">
      <summary>The current default MemoBlock size.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Name">
      <summary>Retrieve state name</summary>
      <returns>String value, such as "State for Thread 123"</returns>
    </member>
    <member name="P:XSharp.RuntimeState.NetErr">
      <summary>Did the last RDD operation cause a Network Error ?</summary>
    </member>
    <member name="P:XSharp.RuntimeState.NewIndexLock">
      <summary>The setting that determines whether to use the new locking offset of -1 (0xFFFFFFFF) for .NTX files.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.NoMethod">
      <summary>The name of the method that was called in the last late bound method call.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.NullDateString">
      <summary>A cached copy of the string that is returned for empty dates, matching the current DateFormat</summary>
    </member>
    <member name="E:XSharp.RuntimeState.OnCodePageChanged">
      <summary>This event is thrown when one of the codepages of the runtimestate is changed</summary>
    </member>
    <member name="E:XSharp.RuntimeState.OnCollationChanged">
      <summary>This event is thrown when the collation of the runtimestate is changed</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Optimize">
      <summary>RDD Optimize Flag  </summary>
    </member>
    <member name="P:XSharp.RuntimeState.Safety">
      <summary>The current SetSafety flag.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.ScriptCompiler">
      <summary>Active Script compiler. Gets assigned from the ExecScriptFast() function.</summary>
    </member>
    <member name="M:XSharp.RuntimeState.SetDataSession(XSharp.RDD.DataSession)">
      <summary>This method can be used to switch the active DataSession in the runtime state.</summary>
      <param name="session">The datasession that needs to be set as the new active datasession</param>
      <returns>The previous active datasession</returns>
    </member>
    <member name="P:XSharp.RuntimeState.Settings">
      <summary>The dictionary that stores most of the settings in the runtime state. The key to the index is the number from the Set Enum</summary>
    </member>
    <member name="M:XSharp.RuntimeState.SetValue``1(XSharp.Set,``0)">
      <summary>Set a value for the state of the current Thread.</summary>
      <param name="nSetting">Setting number to retrieve. Must be defined in the SET enum.</param>
      <param name="oValue">The new value for the setting.</param>
      <typeparam name="T">The return type expected for this setting.</typeparam>
      <returns>The previous value, or a default value of type T when the setting was not yetr defined.</returns>
    </member>
    <member name="P:XSharp.RuntimeState.SoftSeek">
      <summary>The current SetSoftSeek flag.</summary>
    </member>
    <member name="E:XSharp.RuntimeState.StateChanged">
      <summary>This event is invoked when the runtime state is changed.</summary>
    </member>
    <member name="M:XSharp.RuntimeState.StringCompare(System.Byte[],System.Byte[],System.Int32)">
      <summary>Compare 2 byte arrays respecting the runtime string comparison rules.</summary>
      <param name="aLHS">The first list of bytes.</param>
      <param name="aRHS">The second list of bytes.</param>
      <param name="nLen">The # of bytes to compare.</param>
      <param name="strLHS">The first string .</param>
      <param name="strRHS">The second string.</param>
      <returns>
            This function returns a numeric value to indicate the order in which the strings should be sorted: <br /><table><tr><td>-1</td><td>LHS precedes RHS in the sort order. </td></tr><tr><td>0</td><td>LHS occurs in the same position as RHS in the sort order.</td></tr><tr><td>1</td><td>LHS follows RHS in the sort order.</td></tr></table></returns>
    </member>
    <member name="M:XSharp.RuntimeState.StringCompare(System.String,System.String)">
      <summary>
            Compare 2 strings. This function is used by the compiler for string comparisons.
        </summary>
      <param name="strLHS">The first string .</param>
      <param name="strRHS">The second string.</param>
      <returns>
            This function returns a numeric value to indicate the order in which the strings should be sorted: <br /><table><tr><td>-1</td><td>LHS precedes RHS in the sort order. </td></tr><tr><td>0</td><td>LHS occurs in the same position as RHS in the sort order.</td></tr><tr><td>1</td><td>LHS follows RHS in the sort order.</td></tr></table></returns>
    </member>
    <member name="M:XSharp.RuntimeState.StringCompareCollation(System.String,System.String)">
      <summary>
            Compare 2 strings. This function is used by the compiler for string comparisons.
        </summary>
      <param name="strLHS">The first string .</param>
      <param name="strRHS">The second string.</param>
      <returns>
            This function returns a numeric value to indicate the order in which the strings should be sorted: <br /><table><tr><td>-1</td><td>LHS precedes RHS in the sort order. </td></tr><tr><td>0</td><td>LHS occurs in the same position as RHS in the sort order.</td></tr><tr><td>1</td><td>LHS follows RHS in the sort order.</td></tr></table></returns>
    </member>
    <member name="P:XSharp.RuntimeState.StringDelimiter">
      <summary>String delimiters for DELIM operations.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.ThousandSep">
      <summary>The Thousand separator</summary>
    </member>
    <member name="M:XSharp.RuntimeState.ToString">
      <summary>ToString() override</summary>
      <returns>String value, such as "State for Thread 123"</returns>
    </member>
    <member name="P:XSharp.RuntimeState.Unique">
      <summary>Should indexes by default be created with the 'Unique setting'.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.WinCodePage">
      <summary>The Windows Codepage. This gets read at startup from the OS().</summary>
    </member>
    <member name="P:XSharp.RuntimeState.WinEncoding">
      <summary>The Windows Encoding. This is based on the corrent Win Codepage.</summary>
    </member>
    <member name="P:XSharp.RuntimeState.Workareas">
      <summary>The Workarea information for the current Thread.</summary>
    </member>
    <member name="T:XSharp.RuntimeState.AutoLockMethod">
      <summary>Delegate that describes the signature of the AutoLock methods </summary>
    </member>
    <member name="T:XSharp.Set">
      <summary>Values that match the Visual Objects SET_* defines </summary>
    </member>
    <member name="F:XSharp.Set.Exact">
      <summary>Specifies rules that Visual FoxPro uses when comparing two strings of different lengths.</summary>
    </member>
    <member name="F:XSharp.Set.Fixed">
      <summary>Specifies if the number of decimal places used in the display of numeric data is fixed.</summary>
    </member>
    <member name="F:XSharp.Set.Decimals">
      <summary>Specifies the number of decimal places displayed in numeric expressions.</summary>
    </member>
    <member name="F:XSharp.Set.DateFormat">
      <summary>Specifies the format for the display of Date and DateTime expressions.</summary>
    </member>
    <member name="F:XSharp.Set.Epoch">
      <summary>Change the setting that determines how dates without century digits are interpreted.</summary>
    </member>
    <member name="F:XSharp.Set.Path">
      <summary>Specifies a path for file searches.</summary>
    </member>
    <member name="F:XSharp.Set.Default">
      <summary>Specifies the default drive and directory.</summary>
    </member>
    <member name="F:XSharp.Set.Exclusive">
      <summary>Specifies whether Visual FoxPro opens table files for exclusive or shared use on a network.</summary>
    </member>
    <member name="F:XSharp.Set.Softseek">
      <summary>Determines where the record pointer is positioned after FIND or SEEK unsuccessfully searches for a record.</summary>
    </member>
    <member name="F:XSharp.Set.Unique">
      <summary>Specifies whether records with duplicate index key values are maintained in an index file.</summary>
    </member>
    <member name="F:XSharp.Set.Deleted">
      <summary>Specifies whether Visual FoxPro processes records marked for deletion and whether they are available for use with other commands.</summary>
    </member>
    <member name="F:XSharp.Set.Cancel">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Debug">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Typeahead">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Color">
      <summary>Sets the colors used on the console output</summary>
    </member>
    <member name="F:XSharp.Set.Cursor">
      <summary>Determines whether the insertion point is displayed when Visual FoxPro waits for input.</summary>
    </member>
    <member name="F:XSharp.Set.Console">
      <summary>Enables or disables output to the main Visual FoxPro window or to the active user-defined window from within programs.</summary>
    </member>
    <member name="F:XSharp.Set.Alternate">
      <summary>Directs screen or printer output created with ?, ??, DISPLAY, or LIST to a text file.</summary>
    </member>
    <member name="F:XSharp.Set.AltFile">
      <summary>Output filename for the Alternate file.</summary>
    </member>
    <member name="F:XSharp.Set.Device">
      <summary>Directs output from @ ... SAY to the screen, a printer, or a file.</summary>
    </member>
    <member name="F:XSharp.Set.Printer">
      <summary>Enables or disables output to the printer or routes output to a file, port, or network printer. </summary>
    </member>
    <member name="F:XSharp.Set.PrintFile">
      <summary>Output filename for printer output.</summary>
    </member>
    <member name="F:XSharp.Set.Margin">
      <summary>Sets the left printer margin and affects all output directed to the printer.</summary>
    </member>
    <member name="F:XSharp.Set.Bell">
      <summary>Turns the computer bell on or off and sets the bell attributes.</summary>
    </member>
    <member name="F:XSharp.Set.Confirm">
      <summary>Specifies whether the user can exit a text box by typing past the last character in the text box.</summary>
    </member>
    <member name="F:XSharp.Set.Escape">
      <summary>Determines whether pressing the ESC key interrupts program and command execution.</summary>
    </member>
    <member name="F:XSharp.Set.Insert">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Exit">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Intensity">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Scoreboard">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Delimiters">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.DelimChars">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Wrap">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Message">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Mcenter">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.ScrollBreak">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Errorlog">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.Neterr">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.Digits">
      <summary>The setting that determines the number of digits that will be shown to the left of the decimal point when a number is displayed.</summary>
    </member>
    <member name="F:XSharp.Set.AmExt">
      <summary>A string representing the morning extension for time strings in 12-hour format.</summary>
    </member>
    <member name="F:XSharp.Set.PmExt">
      <summary>A string representing the evening extension for time strings in 12-hour format.</summary>
    </member>
    <member name="F:XSharp.Set.Ansi">
      <summary>The setting that determines whether database files are created using ANSI or OEM format and whether certain text file operations convert between the two character sets.</summary>
    </member>
    <member name="F:XSharp.Set.Yield">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.Locktries">
      <summary>The number of times certain lock operations are retried</summary>
    </member>
    <member name="F:XSharp.Set.AmPm">
      <summary>The setting that determines whether time strings are in 12-hour or 24-hour format.</summary>
    </member>
    <member name="F:XSharp.Set.Century">
      <summary>Determines whether the century portion of date expressions is displaid.</summary>
    </member>
    <member name="F:XSharp.Set.DigitFixed">
      <summary>The setting that fixes the number of digits used to display numeric output.</summary>
    </member>
    <member name="F:XSharp.Set.DecimalSep">
      <summary>Determines the decimal point character used in the display of numeric and currency expressions.</summary>
    </member>
    <member name="F:XSharp.Set.ThousandSep">
      <summary>Specifies the character that separates each group of three digits to the left of the decimal point when displaying a formatted numeric or currency value. </summary>
    </member>
    <member name="F:XSharp.Set.Timesep">
      <summary>The current separation character used in time strings.</summary>
    </member>
    <member name="F:XSharp.Set.Fieldstore">
      <summary>The setting that determines whether assignments are made to fields or to memory variables.</summary>
    </member>
    <member name="F:XSharp.Set.Science">
      <summary>The setting that controls if numbers are displaid in scientific notation.</summary>
    </member>
    <member name="F:XSharp.Set.Cpu">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.Floatdelta">
      <summary>The setting that determines the point at which 2 floating point numbers would be considered equal even though they are different.</summary>
    </member>
    <member name="F:XSharp.Set.Math">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.International">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.DateCountry">
      <summary>Specifies the format for the display of Date and DateTime expressions.</summary>
    </member>
    <member name="F:XSharp.Set.DefaultDir">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.EpochCent">
      <summary>Determines how Microsoft Visual FoxPro interprets dates that specify only 2 digit years.</summary>
    </member>
    <member name="F:XSharp.Set.EpochYear">
      <summary>Determines how Microsoft Visual FoxPro interprets dates that specify only 2 digit years.</summary>
    </member>
    <member name="F:XSharp.Set.DateFormatNet">
      <summary>The current dateformat in .Net format.</summary>
    </member>
    <member name="F:XSharp.Set.DateFormatEmpty">
      <summary>The empty representation of the current date format.</summary>
    </member>
    <member name="F:XSharp.Set.SysObject">
      <summary>SysObject value</summary>
    </member>
    <member name="F:XSharp.Set.NoMethod">
      <summary>The last method called with a late bound send operator that was not found in the object that was used.</summary>
    </member>
    <member name="F:XSharp.Set.Patharray">
      <summary>The current path setting as an array of strings.</summary>
    </member>
    <member name="F:XSharp.Set.NatDLL">
      <summary>Determines the name of the current Nation DLL.</summary>
    </member>
    <member name="F:XSharp.Set.CollationTable">
      <summary>Determines the collation array read from the current Nation DLL</summary>
    </member>
    <member name="F:XSharp.Set.ErrorLevel">
      <summary>--- not used ---</summary>
    </member>
    <member name="F:XSharp.Set.ErrorBlock">
      <summary>The codeblock set for the current error handler.</summary>
    </member>
    <member name="F:XSharp.Set.LastScriptError">
      <summary>The last script error that occurred.</summary>
    </member>
    <member name="F:XSharp.Set.LastFound">
      <summary>The last file found with File()</summary>
    </member>
    <member name="F:XSharp.Set.DelimRDD">
      <summary>Determines the name of the current Delim RDD.</summary>
    </member>
    <member name="F:XSharp.Set.FieldDelimiter">
      <summary>Determines the current field delimiter for Delim RDDs</summary>
    </member>
    <member name="F:XSharp.Set.RecordDelimiter">
      <summary>Determines the current record delimiter for Delim RDDs</summary>
    </member>
    <member name="F:XSharp.Set.ErrorLogFile">
      <summary>Name of the error log file from the default RT error handler. Defaults to VOERROR.LOG</summary>
    </member>
    <member name="F:XSharp.Set.Dict">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.Intl">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.RddInfo">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.MemoBlockSize">
      <summary>Specifies how X# allocates disk space for the storage of memo fields.
            This is 64 for the FoxPro dialect and 32 for other dialects.</summary>
    </member>
    <member name="F:XSharp.Set.DefaultRdd">
      <summary>Determines the current Default RDD. This is DBFVFP for the FoxPro dialect and
            DBFNTX for the other dialects.</summary>
    </member>
    <member name="F:XSharp.Set.MemoExt">
      <summary>Determines the current default Memofile extension.</summary>
    </member>
    <member name="F:XSharp.Set.AutoOpen">
      <summary>Determines if production CDX files should be automatically opened. Defaults to TRUE</summary>
    </member>
    <member name="F:XSharp.Set.AutoOrder">
      <summary>Determines if the first index in the production CDX should be selected. Defaults to 0 for the FoxPro dialect and 1 for the other dialects.</summary>
    </member>
    <member name="F:XSharp.Set.HpLocking">
      <summary>Should High Performance NTX Locking be used for DBFNTX files.</summary>
    </member>
    <member name="F:XSharp.Set.NewIndexLock">
      <summary>Should the New Index Locking Scheme be used for DBFNTX files.</summary>
    </member>
    <member name="F:XSharp.Set.Autoshare">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.StrictRead">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.BlobCircref">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.Optimize">
      <summary>Enables or disables Query Optimization.</summary>
    </member>
    <member name="F:XSharp.Set.FoxLock">
      <summary>Should the FoxPro locking scheme be used for DBFCDX and DBFVFP files.</summary>
    </member>
    <member name="F:XSharp.Set.RddInfoMax">
      <summary>Determines the maximum number of RDD related settings.</summary>
    </member>
    <member name="F:XSharp.Set.WinCodepage">
      <summary>Determines the current Windows CodePage number</summary>
    </member>
    <member name="F:XSharp.Set.DosCodepage">
      <summary>Determines the current DOS/OEM CodePage number</summary>
    </member>
    <member name="F:XSharp.Set.CollationMode">
      <summary>Determines the current Collation mode (Windows, Clipper, Ordinal, Unicode, XPP)</summary>
    </member>
    <member name="F:XSharp.Set.Asserts">
      <summary>Specifies whether to pad a shorter string with spaces when making a SQL string comparison or binary expression with zero (0) bytes when making a binary expression comparison in SQL commands using the equal sign operator (=).</summary>
    </member>
    <member name="F:XSharp.Set.AutoIncError">
      <summary>Specifies whether attempts to update or insert values in a field with automatically incrementing values generate errors.</summary>
    </member>
    <member name="F:XSharp.Set.CollateFox">
      <summary>Specifies a collation sequence for character fields in subsequent indexing and sorting operations. Defaults to MACHINE</summary>
    </member>
    <member name="F:XSharp.Set.Compatible">
      <summary>Controls compatibility with Microsoft FoxBASE+ and other FoxPro languages.</summary>
    </member>
    <member name="F:XSharp.Set.Database">
      <summary>Sets an open database as the current database or sets no current database.</summary>
    </member>
    <member name="F:XSharp.Set.DataSession">
      <summary></summary>
    </member>
    <member name="F:XSharp.Set.DebugOut">
      <summary>Directs debugging output to a file.</summary>
    </member>
    <member name="F:XSharp.Set.Directory">
      <summary>Specifies the default drive and directory.</summary>
    </member>
    <member name="F:XSharp.Set.FullPath">
      <summary>FoxPro: Should CDX(),DBF() and similar functions return full paths</summary>
    </member>
    <member name="F:XSharp.Set.Lock">
      <summary>Enables or disables automatic file locking in certain commands.</summary>
    </member>
    <member name="F:XSharp.Set.MemoWidth">
      <summary>Specifies the displayed width of memo fields and character expressions.Default is 50</summary>
    </member>
    <member name="F:XSharp.Set.MultiLocks">
      <summary>Determines whether you can lock multiple records using LOCK( ) or RLOCK( ). Default is OFF</summary>
    </member>
    <member name="F:XSharp.Set.Near">
      <summary>Determines where the record pointer is positioned after FIND or SEEK unsuccessfully searches for a record.</summary>
    </member>
    <member name="F:XSharp.Set.Null">
      <summary>Determines how null values are supported by the ALTER TABLE, CREATE TABLE and INSERT - SQL commands.</summary>
    </member>
    <member name="F:XSharp.Set.Point">
      <summary>Determines the decimal point character used in the display of numeric and currency expressions.</summary>
    </member>
    <member name="F:XSharp.Set.Refresh">
      <summary>Determines whether to and how frequently to update local memory buffers with changes from other users on the network.</summary>
    </member>
    <member name="F:XSharp.Set.Reprocess">
      <summary>Specifies how many times and for how long Visual FoxPro attempts to lock a file or record after an unsuccessful locking attempt.</summary>
    </member>
    <member name="F:XSharp.Set.Safety">
      <summary>Determines whether Visual FoxPro displays a dialog box before overwriting an existing file.</summary>
    </member>
    <member name="F:XSharp.Set.Separator">
      <summary>Specifies the character that separates each group of three digits to the left of the decimal point when displaying a formatted numeric or currency value. </summary>
    </member>
    <member name="F:XSharp.Set.Space">
      <summary>FoxPro: Add Space between ? and ?? field expressions</summary>
    </member>
    <member name="F:XSharp.Set.SqlBuffering">
      <summary>Specifies if data in a SQL - SELECT statement is based on buffered data or data written to disk.</summary>
    </member>
    <member name="F:XSharp.Set.SqlAnsi">
      <summary>Specifies whether to pad a shorter string with spaces when making a SQL string comparison or binary expression with zero (0) bytes when making a binary expression comparison in SQL commands using the equal sign operator (=).</summary>
    </member>
    <member name="F:XSharp.Set.TextMerge">
      <summary>FoxPro: Is Textmerge enabled.</summary>
    </member>
    <member name="F:XSharp.Set.WithStack">
      <summary>Specifies how character data expressions are mapped to query result sets.</summary>
    </member>
    <member name="T:XSharp.Severity">
      <summary>Error code Enum that matches the XSharp Error Severity codesFDesc</summary>
    </member>
    <member name="T:XSharp.StateChanged">
      <summary>Delegate used for the StateChanged Event handler</summary>
    </member>
    <member name="T:XSharp.StateChangedEventArgs">
      <summary>Arguments that are sent to StateChanged event handlers</summary>
    </member>
    <member name="P:XSharp.StateChangedEventArgs.NewValue">
      <summary>New value of the setting</summary>
    </member>
    <member name="P:XSharp.StateChangedEventArgs.OldValue">
      <summary>Old value of the setting</summary>
    </member>
    <member name="P:XSharp.StateChangedEventArgs.Setting">
      <summary>Setting that was just changed</summary>
    </member>
    <member name="T:XSharp.Subcodes">
      <summary>Error code Enum that matches the XSharp Error Sub Codes</summary>
    </member>
    <member name="T:XSharp.XSharpDialect">
      <summary>This enum lists the various dialects possible in XSharp. The enum MUST match the dialect values inside the compiler </summary>
    </member>
    <member name="T:XSharp.Core.Functions">
      <summary>This compiler generated class contains all the functions, globals and defines that are defined in the XSharp.Core.dll assembly. </summary>
    </member>
    <member name="M:XSharp.Core.Functions._C2Hex(System.String,System.Boolean)">
      <summary>Convert a string value to a hexadecimal string.</summary>
      <param name="cSource">String to convert</param>
      <param name="lAddSpace">When TRUE then the inidividual characters are separated with a space in the result string</param>
      <returns>A string with the hex representation of the value</returns>
    </member>
    <member name="M:XSharp.Core.Functions._DebOut32(System.String)">
      <summary>
            Write information to the Debug Terminal Program
        </summary>
      <param name="pszText">PSZ text that gets written to the Debug Terminal Program</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions._GetCmdLine">
      <summary>
            Return a pointer to the command line used to invoke the application.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions._GetCmdShow">
      <summary>
            Return a constant specifying how the application window is shown.
        </summary>
      <returns>
            One of the following constants indicating the status of the window:
            Constant	Meaning	
            SW_HIDE	The window is hidden and another window activated	
            SW_MINIMIZE	The window is minimized and the top-level window in the system's list is activated	
            SW_RESTORE	Window is activated and displayed — if minimized or maximized, Windows restores it to its original size and position (same as SW_SHOWNORMAL).	
            SW_SHOW	Window is activated and displayed in its current size and position	
            SW_SHOWMAXIMIZED	Window is activated and displayed as maximized	
            SW_SHOWMINIMIZED	Window is activated and displayed as an icon	
            SW_SHOWMINNOACTIVE	Window is displayed as an icon, leaving the currently active window active	
            SW_SHOWNA	Window is displayed in its current state, leaving the currently active window active	
            SW_SHOWNOACTIVATE	Window is displayed in its most recent size and position, leaving the currently active window active	
            SW_SHOWNORMAL	Window is activated and displayed — if minimized or maximized, Windows restores it to its original size and position (same as SW_RESTORE).	
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions._GetInst">
      <summary>
            Return the instance handle of an application or DLL.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions._GetPrevInst">
      <summary>
            NOTE: This is not supported in 32 bit applications.
            The function is kept for backward compatibility, but always returns a NULL_PTR.
            <br />



            Return the previous instance handle of an application or DLL.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions._Like(System.String,System.String)">
      <summary>Determine if a string matches a wildcard pattern (like the wildcard pattern for the DIR command in the OS).</summary>
      <param name="sWildCard">The wildcard to use. '*' matches 0 or more characters until the next non-wildcard character, '?' matches any character, all other characters must match exactly.</param>
      <param name="sSource">The string to examine.</param>
    </member>
    <member name="M:XSharp.Core.Functions._Quit">
      <summary>Terminate application processing, close all open files, and return control to the operating system.</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_ACCELERATORS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_ALTERNATE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_ALTFILE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_AMEXT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_AMPM">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_ANSI">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_ASSERTS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_AUTOINCERROR">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_AUTOOPEN">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_AUTOORDER">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_AUTOSHARE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_AXSLOCKING">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_BELL">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_BLOB_CIRCULAR_ARRAY_REF">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_BLOBCIRCREF">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_Cancel">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_CENTURY">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_CODEPAGE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_COLLATEFOX">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_COLLATION">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_COLLATION_NAME">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_COLLATIONMODE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_COLOR">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_COLORMODE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_CONFIRM">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_CONNECTION_HANDLE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_CONSOLE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_CPU">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_CURSOR">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DATABASE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DATASESSION">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DATECOUNTRY">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DATEFORMAT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DBCODEPAGE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DBFLOCKSCHEME">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DEBUG">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DEBUGOUT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DECIMALS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DECIMALSEP">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DEFAULT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DEFAULTDIR">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DEFAULTRDD">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DEFEXTENSIONS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DELETED">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DELIMCHARS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DELIMITERS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DELIMRDD">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DEVICE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DEVTIMEOUT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DICT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DIGITFIXED">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DIGITS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DIRCASE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DIRSEPARATOR">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_DOSCODEPAGE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_EOF">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_EOL">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_EPOCH">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_ESCAPE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_EXACT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_EXACTKEYPOS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_EXCLUSIVE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_EXIT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_FIELDDELIMITER">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_FIELDSTORE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_FILECASE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_FIXED">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_FLOATDELTA">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_FORCEOPT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_FOXLOCK">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_FULLPATH">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_HANDLEEVENT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_HARDCOMMIT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_HBOUTLOG">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_HBOUTLOGINFO">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_HPLOCK">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_HPLOCKING">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_IDLEREPEAT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_INSERT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_INTENSITY">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_INTERNATIONAL">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_INTL">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_LANGUAGE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_LEXICAL">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_LOCK">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_LOCKTRIES">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_MARGIN">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_MATH">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_MCENTER">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_MEMOBLOCKSIZE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_MEMOEXT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_MEMOWIDTH">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_MESSAGE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_MULTILOCKS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_NETERR">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_NEWINDEXLOCK">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_NULL">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_NULLVALUE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_OPTIMIZE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_OSCODEPAGE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_PATH">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_PMEXT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_POINT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_PRINTER">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_PRINTFILE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_RDDINFO">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_RECORDDELIMITER">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_REFRESH">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_REPROCESS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_RIGHTSCHECKING">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_RUSHMORE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SAFETY">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SCIENCE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SCOREBOARD">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SCROLLBREAK">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SEPARATOR">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SMARTFILTER">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SOFTSEEK">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SPACE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SQL_PARAMETERS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SQL_QUERY">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SQL_TABLE_PASSWORDS">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SQL_TIMEOUT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SQLANSI">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_SQLBUFFERING">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_STRICTREAD">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_TEXTMERGE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_THOUSANDSEP">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_TIMEFORMAT">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_TIMESEP">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_TRIMFILENAME">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_TYPEAHEAD">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_UNIQUE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_USER">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_VARCHARMAPPING">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_WINCODEPAGE">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_WRAP">
      <summary>Set() define</summary>
    </member>
    <member name="F:XSharp.Core.Functions._SET_YIELD">
      <summary>Set() define</summary>
    </member>
    <member name="M:XSharp.Core.Functions._SplitPath(System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>
        <summary>
            Break a path name into its components.
        </summary>
      </summary>
      <param name="cPath">The path name to break.</param>
      <param name="cDrive">The drive letter followed by a colon.  </param>
      <param name="cDir">The directories, including the trailing slash.  Forward slashes and backslashes both may be present in &lt;cPath&gt;.  Forward slashes (/) are converted to backslashes (\). </param>
      <param name="cName">The file name, without the extension.  </param>
      <param name="cExt">The extension, including the leading period.  </param>
      <returns>
        <returns></returns>
      </returns>
    </member>
    <member name="M:XSharp.Core.Functions._Val(System.String)">
      <summary>
            Convert a string containing a numeric value to a numeric data type.
        </summary>
      <param name="cNumber">
            The string to convert.  <paramref name="cNumber" /> can be in any of the compiler-supported base formats, such as binary, decimal, hex, or scientific.  When in scientific format, a decimal point is necessary to identify the base "E".  So Val("1E+1") equals 1 but Val("1.0E+1") equals 10.0.  Moreover, "+INF" and "-INF" (both must be in uppercase) represent +infinity and -infinity.
        </param>
      <returns>
        <paramref name="cNumber" /> as a numeric value.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AbsInt(System.Int32)">
      <summary>
            Return the absolute value of a strongly typed numeric expression, regardless of its sign.
        </summary>
      <param name="liValue">The 32-bit integer to evaluate.</param>
      <returns>
            A positive number or 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AbsLong(System.Int32)">
      <summary>
            Return the absolute value of a strongly typed numeric expression, regardless of its sign.
        </summary>
      <param name="liValue">The 32-bit integer to evaluate.</param>
      <returns>
            A positive number or 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AbsReal4(System.Single)">
      <summary>
            Return the absolute value of a strongly typed numeric expression, regardless of its sign.
        </summary>
      <param name="r4Value">The 32-bit floating point number to evaluate.</param>
      <returns>
            A positive number or 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AbsReal8(System.Double)">
      <summary>
            Return the absolute value of a strongly typed numeric expression, regardless of its sign.
        </summary>
      <param name="r8Value">The 64-bit floating point number to evaluate.</param>
      <returns>
            A positive number or 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AbsShort(System.Int16)">
      <summary>
            Return the absolute value of a strongly typed numeric expression, regardless of its sign.
        </summary>
      <param name="siValue">The 16-bit integer to evaluate.</param>
      <returns>
            A positive number or 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AdjustFName(System.String)">
      <summary>
            Remove spaces from a file name specified as a string.
        </summary>
      <param name="cFileName">The file name you want to adjust.</param>
      <returns>
        <paramref name="cFileName" /> with all spaces removed.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AdjustFNameA(System.String@)">
      <summary>
            Remove spaces from a file name specified as a string, changing the contents of the original file name as well as the returned file name.
        </summary>
      <param name="cFileName">The file name you want to adjust.</param>
      <returns>
        <paramref name="cFileName" /> with all spaces removed.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AllTrim(System.String)">
      <summary>
            Remove leading and trailing spaces from a string.
        </summary>
      <param name="cString">The string to trim.</param>
      <returns>
            A trimmed string, with leading and trailing spaces removed.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AltD">
      <summary>
            Programmatically define a breakpoint in an application.
        </summary>
    </member>
    <member name="M:XSharp.Core.Functions.AltD(System.Int32)">
      <summary>
            Programmatically define a breakpoint in an application.
        </summary>
      <param name="nMode">This parameter is ignored in X#</param>
    </member>
    <member name="F:XSharp.Core.Functions.AMERICAN">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.AmPm(System.String)">
      <summary>
            Convert a 24-hour military time to a 12-hour clock time.
        </summary>
      <param name="c24HrTime">A valid military time in the form hh:mO:ss, where hh is hours in 24-hour format, mm is minutes, and ss is seconds.</param>
      <returns>
            An 11-character string in 12-hour format with either "am" or "pm."<br />
            If <paramref name="cTime" /> does not represent a valid military time, a NULL_STRING is returned.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.ANSI">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.Ansi2Oem(System.Byte[])">
      <summary>
            Convert an array of bytes from ANSI to OEM.
            </summary>
      <param name="bSource">String in Ansi format</param>
      <param name="cAnsiString">A source string of ANSI characters.</param>
      <returns>
            A converted string of OEM characters.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Ansi2Oem(System.Byte[],System.Int32)">
      <summary>
            Convert an array of bytes from ANSI to OEM.
            </summary>
      <param name="iLen">Length of the source array</param>
      <param name="bSource">String in Ansi format</param>
      <param name="cAnsiString">A source string of ANSI characters.</param>
      <returns>
            A converted string of OEM characters.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Ansi2Oem(System.String)">
      <summary>
            Convert a string of ANSI characters to OEM characters.
        </summary>
      <param name="cAnsiString">A source string of ANSI characters.</param>
      <returns>
            A converted string of OEM characters.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Ansi2OemA(System.Byte[])">
      <summary>
            Convert an array of ANSI characters to OEM characters, changing the contents of the argument as well as the return value.
            </summary>
      <param name="bSource">A byte array that contains the string to convert</param>
    </member>
    <member name="M:XSharp.Core.Functions.Ansi2OemA(System.String@)">
      <summary>
            Convert a string of ANSI characters to OEM characters, changing the contents of the original string as well as the returned string.
        </summary>
      <param name="cAnsiString">A source string of ANSI characters.</param>
      <returns>
            A converted string of OEM characters.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Ansi2OemBuff(System.Byte[],System.Byte[],System.UInt32)">
      <summary>
            Convert a specified number of ANSI characters in a source buffer to a buffer of corresponding OEM characters.
        </summary>
      <param name="pszTarget">A pointer to the buffer that will contain the converted string.</param>
      <param name="pszSource">A pointer to the buffer that contains the string to convert.</param>
      <param name="dwCount">The number of characters to convert.</param>
      <returns>
            A pointer to the buffer that contains the converted string.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Asc(System.String)">
      <summary>
            Convert a character to its ASCII value.
        </summary>
      <param name="cString">The character to convert to a number.</param>
      <returns>
            A number from 0 to 255, representing the ASCII code of <paramref name=" cString " />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AscW(System.String)">
      <summary>
            Convert a character to its Unicode ASCII value.
            </summary>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.At(System.String,System.String)">
      <summary>
            Return the position of the first occurrence of a substring within a string.
        </summary>
      <param name="cSearch">The substring to search for.</param>
      <param name="cTarget">The string in which to search.  (To start at a specific offset, use At3().)</param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, At() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.At2(System.String,System.String)">
      <summary>
            Return the position of the first occurrence of a substring within a string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.  (To start at a specific offset, use At3().)</param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, At2() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.At3(System.String,System.String,System.UInt32)">
      <summary>
            Return the position of the first occurrence of a substring within a string, starting at a specified position.
        </summary>
      <param name="cSearch">The substring to search for.</param>
      <param name="cTarget">The string in which to search.</param>
      <param name="dwOffset">
            The position in the string at which to start searching.<br />
            A value of zero corresponds to the first byte.
        </param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, At3() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AtC(System.String,System.String)">
      <summary>
            Return the position of the first occurrence of a substring within a string, without regard for case.
        </summary>
      <param name="cSearch">The substring to search for.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, AtC() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.AtC2(System.String,System.String)">
      <summary>
            Return the position of the first occurrence of a substring within a string, without regard for case.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, AtC2() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ATCLine(System.String,System.String)">
      <summary>
            Return the line number of the first occurrence of a substring within a multiple line string, without regard for case.
        </summary>
      <param name="cSearch">The substring to search for.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, AtCLine() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ATCLine2(System.String,System.String)">
      <summary>
            Return the line number of the first occurrence of a substring within a multiple line string, without regard for case.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, AtCLine2() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ATLine(System.String,System.String)">
      <summary>
            Return the line number of the first occurrence of a substring within a multiple line string.
        </summary>
      <param name="cSearch">The substring to search for.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, AtLine() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ATLine2(System.String,System.String)">
      <summary>
            Return the line number of the first occurrence of a substring within a multiple line string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            The position of the first occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, AtLine2() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.B64EncFile(System.String)">
      <summary>This function is not implemented yet</summary>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.B64EncString(System.String)">
      <summary>This function is not implemented yet</summary>
      <param name="cIn"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Bin2DW(System.String)">
      <summary>
            Convert a string containing a 32-bit unsigned integer to a double word.
        </summary>
      <param name="cUnsignedInt">A 32-bit unsigned integer represented as a string — least significant byte first.  Only the first 4 bytes are used by the function; all others are ignored. </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Bin2I(System.String)">
      <summary>
            Convert a string containing a 16-bit signed integer to a short integer.
        </summary>
      <param name="cSignedInt">A 16-bit signed integer represented as a string — least significant byte first.  Only the first 2 bytes are used by the function; all others are ignored.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Bin2L(System.String)">
      <summary>
            Convert a string containing a 32-bit signed integer to a long integer.
        </summary>
      <param name="cSignedInt">A 32-bit signed integer represented as a string — least significant byte first.  Only the first 4 bytes are used by the function; all others are ignored.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Bin2Logic(System.String)">
      <summary>
            Convert a string containing an 8-bit logical into a logical value.
        </summary>
      <param name="pszLogical">An 8-bit logical represented as a string.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Bin2Ptr(System.String)">
      <summary></summary>
      <param name="cPointer" />
    </member>
    <member name="M:XSharp.Core.Functions.Bin2Real4(System.String)">
      <summary>
            Convert a string containing a 32-bit floating point number to a Real4 value.
        </summary>
      <param name="cFloat">A 32-bit floating point number represented as a string — least significant byte first.  Only the first 4 bytes are used by the function; all others are ignored. </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Bin2Real8(System.String)">
      <summary>
            Convert a string containing a 32-bit floating point number to a Real8 value.
        </summary>
      <param name="cFloat">A 32-bit floating point number represented as a string — least significant byte first.  Only the first 8 bytes are used by the function; all others are ignored. </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Bin2W(System.String)">
      <summary>
            Convert a string containing a 16-bit unsigned integer to a word.
        </summary>
      <param name="cUnsignedInt">A 16-bit unsigned integer represented as a string — least significant byte first.  Only the first 2 bytes are used by the function; all others are ignored.</param>
      <returns></returns>
    </member>
    <member name="F:XSharp.Core.Functions.BLOB_EXPORT_APPEND">
      <summary>BLOB Import/Export define.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.BLOB_EXPORT_OVERWRITE">
      <summary>BLOB Import/Export define.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.BLOB_IMPORT_COMPRESS">
      <summary>BLOB Import/Export define.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.BLOB_IMPORT_ENCRYPT">
      <summary>BLOB Import/Export define.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.BRITISH">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.Buffer(System.UInt32)">
      <summary>
            Return an uninitialized string of a specified size.
        </summary>
      <param name="dwSize">The number of bytes to return.</param>
      <returns>
            A string of <paramref name="dwSize" /> bytes.<br />
            If <paramref name="dwSize" /> is 0, Buffer() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.C2Hex(System.String)">
      <summary>Convert a string value to a hexadecimal string.</summary>
      <param name="cSource">String to convert</param>
      <returns>A string with the hex representation of the value</returns>
    </member>
    <member name="M:XSharp.Core.Functions.CharEven(System.String)">
      <summary>
            Return the even-numbered characters in a string.
        </summary>
      <param name="cString">The string whose even-numbered characters you want to return.</param>
      <returns>
            Every other character in the string, starting from the second character.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.CharMix(System.String,System.String)">
      <summary>
            Return a string whose odd-numbered characters and even-numbered characters are from 2 different strings.
        </summary>
      <param name="cOdd">The string whose characters will constitute the odd-numbered characters in the returned string.</param>
      <param name="cEven">The string whose characters will constitute the even-numbered characters in the returned string.</param>
      <returns>
            A string in which characters from <paramref name="cOdd" /> and <paramref name="cEven" /> appear alternately.<br />
            The length of <paramref name="cOdd" /> determines the length of the returned string: the length is twice the length of <paramref name="cOdd" />, assuming that <paramref name="cEven" /> contains at least one character:
            	A longer <paramref name="cEven" /> string is cut down to the length of <paramref name="cOdd" />.
            	A shorter <paramref name="cEven" /> is processed from beginning to end, wrapping to the beginning again until there are no more characters in <paramref name="cOdd" />.
            If <paramref name="cEven" /> contains less than one character, a NULL_STRING is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.CharOdd(System.String)">
      <summary>
            Return the odd-numbered characters in a string.
        </summary>
      <param name="cString">The string whose odd-numbered characters you want to return.</param>
      <returns>
            Every other character in the string, starting from the first character.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.CharPos(System.String,System.UInt32)">
      <summary>
            Return a character based on its position in a string.
        </summary>
      <param name="cString">The string that you want to extract a character from.</param>
      <param name="wPosition">
            The position of the character within <paramref name="cString" />.
        </param>
      <returns>
            The character located at the specified position.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Chr(System.UInt32)">
      <summary>
            Convert an ASCII code to a character value.
        </summary>
      <param name="dwCode">An ASCII code from 0 to 255.</param>
      <returns>
            A single character that corresponds to <paramref name="dwCode" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ChrA(System.UInt32)">
      <summary>
            Convert an ASCII code to a character value, always using the Ansi codepage, ignoring the SetAnsi() setting.
            </summary>
      <param name="dwChar"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.ChrW(System.UInt32)">
      <summary>
            Convert an ASCII code to a character value.
            </summary>
      <param name="dwChar"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.ConDateTime(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Format a set of numbers representing a year, month, and day as a Date.
            </summary>
      <param name="dwY">A valid year.  If the century digits are not specified, the century is determined by the rules of SetEpoch(). </param>
      <param name="dwM">A number from 1 through 12 representing a valid month. </param>
      <param name="dwDay">A number representing a valid day of dwMonth.</param>
      <returns>The date that corresponds to the passed arguments.  If any of the arguments specified do not represent a valid year, month, or day, a DateTime.MinValue is returned.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.ConTime(System.DateTime)">
      <summary>
            Return the timestring from a DateTime structure
            </summary>
      <param name="dt">DateTime values that needs to be converted</param>
      <returns>A (military) time that corresponds to the passed arguments in the format HH:MM:SS without AM/PM notation.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.ConTime(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Format a set of numbers representing an hour, minute, and second as a time string.
        </summary>
      <param name="dwHour">The number of hours, up to 23.</param>
      <param name="dwMinute">The number of minutes, up to 59.</param>
      <param name="dwSeconds">The number of minutes, up to 59.</param>
      <returns>
            A (military) time that corresponds to the passed arguments in the format HH:MO:SS without AM/PM notation
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.CRLF">
      <summary>This define consists of a Carriage Return and a Line Feed. Unfortunately this is not properly shown in the help file, because the help file generator strips CRLF characters...</summary>
    </member>
    <member name="M:XSharp.Core.Functions.CToDt(System.String,System.String)">
      <summary>
            Convert a Date string to DateTime.
            </summary>
      <param name="cDate">A string of numbers representing the month, day, and year, separated by any character other than a number.  The month, day, and year digits must be in the format set by SetDateFormat() or SetDateCountry().  If the century digits are not specified, the century is determined by the rules of SetEpoch().</param>
      <param name="cDateFormat">A string representating the date format to use when converting the string to a date. Should consist of D, M and Y characters and separators.</param>
      <returns>The DateTime value that corresponds to the numbers specified in <paramref name="cDate" />.  If <paramref name="cDate" /> is not a valid date, CToDt() returns a DateTime.MinValue.
            </returns>
    </member>
    <member name="M:XSharp.Core.Functions.CToDtAnsi(System.String)">
      <summary>
            Convert an ANSI date string to DateTime
            </summary>
      <param name="cDate">A string in the ANSI form yyyy.mm.dd, where yy, mm, and dd represent year, month, and day respectively.
            The year, month, and day can be separated by any character other than a number.
            cDate is always interpreted as an ANSI string and is not dependent on SetDateFormat() or SetDateCountry().
            If the century digits are not specified, the century is determined by the rules of SetEpoch().</param>
      <returns>The date value that corresponds to the numbers specified in <paramref name="cDate" />.  If cDate is not a valid ANSI date, CToDAnsi() returns a DateTime.MinValue.
            </returns>
    </member>
    <member name="M:XSharp.Core.Functions.CTOL(System.String)">
      <summary>
            Convert a string value to a logic.
            </summary>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.CurDir">
      <summary>
            Return the current Windows directory.
        </summary>
      <param name="cDrive">
            The letter of the disk drive to query.  <br />

            SetDefault() is ignored; the Windows default is used unless you specify a drive.
        </param>
      <returns>
            The current directory of the drive specified by <paramref name="cDrive" />, without either leading or trailing backslash (\) characters.
            <br />


            If an error occurs, or the current directory of the specified drive is the root directory, CurDir() returns a NULL_STRING.
            Please note that another Windows task might change the current directory of a non-default drive, thereby affecting the return value of CurDir() when it is used to query non-default drives.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.CurDir(System.String)">
      <summary>
            Return the current Windows directory.
        </summary>
      <param name="cDrive">
            The letter of the disk drive to query.  <br />

            SetDefault() is ignored; the Windows default is used unless you specify a drive.
        </param>
      <returns>
            The current directory of the drive specified by <paramref name="cDrive" />, without either leading or trailing backslash (\) characters.
            <br />


            If an error occurs, or the current directory of the specified drive is the root directory, CurDir() returns a NULL_STRING.
            Please note that another Windows task might change the current directory of a non-default drive, thereby affecting the return value of CurDir() when it is used to query non-default drives.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.CurDrive">
      <summary>
            Return the current Windows drive.
        </summary>
      <returns>
            The letter of the current drive, without a trailing colon.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DateTime">
      <summary>
            Returns the current date and time as a DateTime value, or creates a year 2000-compliant DateTime value.
        </summary>
      <param name="nYear">
            Specifies the year in the DateTime value. <paramref name="nYear" /> can be a value from 100 to 9999.
        </param>
      <param name="nMonth">
            Specifies the month in the DateTime value. <paramref name="nMonth" /> can be a value from 1 to 12.
        </param>
      <param name="nDay">
            Specifies the day in the DateTime value. <paramref name="nDay" /> can be a value from 1 to 31.
        </param>
      <param name="nHours">
            Specifies the hours in the DateTime value. <paramref name="nHours" /> can be a value from from 0 (midnight) to 23 (11 P.M). Defaults to 0 if omitted.
        </param>
      <param name="nMinutes">
            Specifies the minutes in the DateTime value. <paramref name="nMinutes" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
      <param name="nSeconds">
            Specifies the seconds in the DateTime value. <paramref name="nSeconds" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
    </member>
    <member name="M:XSharp.Core.Functions.DateTime(System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the current date and time as a DateTime value, or creates a year 2000-compliant DateTime value.
        </summary>
      <param name="nYear">
            Specifies the year in the DateTime value. <paramref name="nYear" /> can be a value from 100 to 9999.
        </param>
      <param name="nMonth">
            Specifies the month in the DateTime value. <paramref name="nMonth" /> can be a value from 1 to 12.
        </param>
      <param name="nDay">
            Specifies the day in the DateTime value. <paramref name="nDay" /> can be a value from 1 to 31.
        </param>
      <param name="nHours">
            Specifies the hours in the DateTime value. <paramref name="nHours" /> can be a value from from 0 (midnight) to 23 (11 P.M). Defaults to 0 if omitted.
        </param>
      <param name="nMinutes">
            Specifies the minutes in the DateTime value. <paramref name="nMinutes" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
      <param name="nSeconds">
            Specifies the seconds in the DateTime value. <paramref name="nSeconds" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
    </member>
    <member name="M:XSharp.Core.Functions.DateTime(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the current date and time as a DateTime value, or creates a year 2000-compliant DateTime value.
        </summary>
      <param name="nYear">
            Specifies the year in the DateTime value. <paramref name="nYear" /> can be a value from 100 to 9999.
        </param>
      <param name="nMonth">
            Specifies the month in the DateTime value. <paramref name="nMonth" /> can be a value from 1 to 12.
        </param>
      <param name="nDay">
            Specifies the day in the DateTime value. <paramref name="nDay" /> can be a value from 1 to 31.
        </param>
      <param name="nHours">
            Specifies the hours in the DateTime value. <paramref name="nHours" /> can be a value from from 0 (midnight) to 23 (11 P.M). Defaults to 0 if omitted.
        </param>
      <param name="nMinutes">
            Specifies the minutes in the DateTime value. <paramref name="nMinutes" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
      <param name="nSeconds">
            Specifies the seconds in the DateTime value. <paramref name="nSeconds" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
    </member>
    <member name="M:XSharp.Core.Functions.DateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the current date and time as a DateTime value, or creates a year 2000-compliant DateTime value.
        </summary>
      <param name="nYear">
            Specifies the year in the DateTime value. <paramref name="nYear" /> can be a value from 100 to 9999.
        </param>
      <param name="nMonth">
            Specifies the month in the DateTime value. <paramref name="nMonth" /> can be a value from 1 to 12.
        </param>
      <param name="nDay">
            Specifies the day in the DateTime value. <paramref name="nDay" /> can be a value from 1 to 31.
        </param>
      <param name="nHours">
            Specifies the hours in the DateTime value. <paramref name="nHours" /> can be a value from from 0 (midnight) to 23 (11 P.M). Defaults to 0 if omitted.
        </param>
      <param name="nMinutes">
            Specifies the minutes in the DateTime value. <paramref name="nMinutes" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
      <param name="nSeconds">
            Specifies the seconds in the DateTime value. <paramref name="nSeconds" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
    </member>
    <member name="M:XSharp.Core.Functions.DateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the current date and time as a DateTime value, or creates a year 2000-compliant DateTime value.
        </summary>
      <param name="nYear">
            Specifies the year in the DateTime value. <paramref name="nYear" /> can be a value from 100 to 9999.
        </param>
      <param name="nMonth">
            Specifies the month in the DateTime value. <paramref name="nMonth" /> can be a value from 1 to 12.
        </param>
      <param name="nDay">
            Specifies the day in the DateTime value. <paramref name="nDay" /> can be a value from 1 to 31.
        </param>
      <param name="nHours">
            Specifies the hours in the DateTime value. <paramref name="nHours" /> can be a value from from 0 (midnight) to 23 (11 P.M). Defaults to 0 if omitted.
        </param>
      <param name="nMinutes">
            Specifies the minutes in the DateTime value. <paramref name="nMinutes" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
      <param name="nSeconds">
            Specifies the seconds in the DateTime value. <paramref name="nSeconds" /> can be a value from 0 to 59. Defaults to 0 if omitted.
        </param>
    </member>
    <member name="M:XSharp.Core.Functions.Days(System.Double)">
      <summary>
            Convert a specified number of seconds to days.
        </summary>
      <param name="nSeconds">The number of seconds to convert to days.</param>
      <returns>
            The number of days to the nearest day.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBF_STD">
      <summary>
            Standard table
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBF_VFP">
      <summary>
            FoxPro table
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBFLOCK_CLIPPER">
      <summary>
            default Clipper locking scheme
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBFLOCK_CLIPPER2">
      <summary>
            extended Clipper locking scheme NTXLOCK2.OBJ
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBFLOCK_COMIX">
      <summary>
            COMIX and CL53 DBFCDX hyper locking scheme
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBFLOCK_DEFAULT">
      <summary>
            Default Harbour Locking scheme
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBFLOCK_HB32">
      <summary>
            Harbour hyper locking scheme for 32bit file API
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBFLOCK_HB64">
      <summary>
            Harbour hyper locking scheme for 64bit file API
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_DBFLOCK_VFP">
      <summary>
            [V]FP, CL52 DBFCDX, SIx3 SIXCDX, CDXLOCK.OBJ
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_MEMO_DBT">
      <summary>
            DBT Memo
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_MEMO_FPT">
      <summary>
            FPT Memo
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_MEMO_NONE">
      <summary>
            No Memo
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DB_MEMO_SMT">
      <summary>
            SMT Memo
            </summary>
    </member>
    <member name="F:XSharp.Core.Functions.DBOI_OPTIMIZED_FULL">
      <summary>DBOI_OPTLEVEL define.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.DBOI_OPTIMIZED_NONE">
      <summary>DBOI_OPTLEVEL define.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.DBOI_OPTIMIZED_PART">
      <summary>DBOI_OPTLEVEL define.</summary>
    </member>
    <member name="M:XSharp.Core.Functions.DbRegisterClient(XSharp.IDbNotify)">
      <summary>Register an object that will receive notification messages for Workarea events.</summary>
      <returns>TRUE when registration succceeded. FALSE when the client was already registered</returns>
    </member>
    <member name="F:XSharp.Core.Functions.DBT_DEFBLOCKSIZE">
      <summary>
            Default DBT BlockSize
            </summary>
    </member>
    <member name="M:XSharp.Core.Functions.DbUnRegisterClient(XSharp.IDbNotify)">
      <summary>Unregister an object that receives notification messages for Workarea events.</summary>
      <returns>TRUE when unregistration succceeded. FALSE when the the client was not registered.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.DebOut32(System.String)">
      <summary>
            Write information to the Debug Terminal Program
        </summary>
      <param name="pszText">String that gets written to the Debug Terminal Program</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.DecodeBase64(System.String,System.IntPtr)">
      <summary>
            Decode a file from an e-mail transfer.
        </summary>
      <param name="cAttachment">The attachment text to decode.</param>
      <param name="hDestination">Handle of the file to which the decoded text is to be written.</param>
      <returns>
            The number of bytes that were decoded.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DirChange(System.String)">
      <summary>
            Change the current Windows directory.
        </summary>
      <param name="pszDir">The name of the directory to change to, including the drive.</param>
      <returns>
            0 if successful; -1 if there is an argument error; otherwise, the DOS error code.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DirMake(System.String)">
      <summary>
            Create a directory.
        </summary>
      <param name="pszNewDir">
            The name of the directory to create, including an optional drive.<br />
            If you do not specify a drive, the Windows default is used.
        </param>
      <returns>
            0 if successful; -1 if there is an argument error; otherwise, the DOS error code.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DirRemove(System.String)">
      <summary>
            Remove a directory.
        </summary>
      <param name="pszDirName">
            The name of the directory to erase, including an optional drive.<br />
            If you do not specify a drive, the Windows default is used.
        </param>
      <returns>
            0 if successful; -1 if there is an argument error; otherwise, the DOS error code.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DiskChange(System.String)">
      <summary>
            Change the current disk drive.
        </summary>
      <param name="pszDrive">The letter of the disk drive to change.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DiskFree">
      <summary>
            Return the space available on a specified disk.
        </summary>
      <param name="cDrive">
            The letter of the disk drive to query, for  example "C:", "A:". The drive can also be identified by a number, where 1 is drive A, 2 is B, 3 is C, and so on.<br />
            If you do not specify a drive, the Windows default is used.
        </param>
      <returns>
            The number of bytes of empty space on the specified disk drive.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DiskFree(System.Int32)">
      <summary>
            Return the space available on a specified disk.
        </summary>
      <param name="nDrive">The number of the disk drive to query, where 1 is drive A, 2 is B, 3 is C, and so on. </param>
      <param name="cDrive">
            The letter of the disk drive to query, for  example "C:", "A:". The drive can also be identified by a number, where 1 is drive A, 2 is B, 3 is C, and so on.<br />
            If you do not specify a drive, the Windows default is used.
        </param>
      <returns>
            The number of bytes of empty space on the specified disk drive.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DiskFree(System.String)">
      <summary>
            Return the space available on a specified disk.
        </summary>
      <param name="cDrive">
            The letter of the disk drive to query, for  example "C:", "A:". The drive can also be identified by a number, where 1 is drive A, 2 is B, 3 is C, and so on.<br />
            If you do not specify a drive, the Windows default is used.
        </param>
      <returns>
            The number of bytes of empty space on the specified disk drive.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DiskName">
      <summary>
            Return the current Windows drive.
        </summary>
      <returns>
            The letter of the current drive, without a trailing colon.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DiskSpace">
      <summary>
            Return the capacity of the specified disk.
        </summary>
      <param name="nDrive">The number of the disk drive to query, where 1 is drive A, 2 is B, 3 is C, and so on. The drive can also be identified as a string, for example "C:", "A:".   If you do not specify a drive, the Windows default is used.</param>
      <returns>
            The capacity of the specified disk drive in bytes.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DiskSpace(System.Int32)">
      <summary>
            Return the capacity of the specified disk.
        </summary>
      <param name="nDrive">The number of the disk drive to query, where 1 is drive A, 2 is B, 3 is C, and so on. The drive can also be identified as a string, for example "C:", "A:".   If you do not specify a drive, the Windows default is used.</param>
      <returns>
            The capacity of the specified disk drive in bytes.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DiskSpace(System.String)">
      <summary>
            Return the capacity of the specified disk.
        </summary>
      <param name="cDrive">The name of the drive as a string, for example "C:", "A:". If you do not specify a drive, the Windows default is used.</param>
      <param name="nDrive">The number of the disk drive to query, where 1 is drive A, 2 is B, 3 is C, and so on. The drive can also be identified as a string, for example "C:", "A:".   If you do not specify a drive, the Windows default is used.</param>
      <returns>
            The capacity of the specified disk drive in bytes.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.DMY">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.DosError">
      <summary>
            Return the last DOS error code associated with an activation of the runtime error block.
        </summary>
      <param name="nNewDosCode">A DOS error number that changes the value returned by DOSError().  You can use it, for example, to reset the error code when trying to preserve the environment in black-box modules or when trying to counteract the side-effects from other modules.</param>
      <returns>
            The number of the last DOS error.<br />
            If the failed operation has no associated DOS error, DOSError() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DosError(System.UInt32)">
      <summary>
            Return the last DOS error code associated with an activation of the runtime error block.
        </summary>
      <param name="nNewDosCode">A DOS error number that changes the value returned by DOSError().  You can use it, for example, to reset the error code when trying to preserve the environment in black-box modules or when trying to counteract the side-effects from other modules.</param>
      <returns>
            The number of the last DOS error.<br />
            If the failed operation has no associated DOS error, DOSError() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DosErrString(System.UInt32)">
      <summary>
            Return a description string for a DOS error number.
        </summary>
      <param name="dwError">The DOS error number that you want a description for.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.DtToC(System.DateTime)">
      <summary>
            Convert a DateTime to a string.
            </summary>
      <param name="d">The DateTime to be converted.</param>
      <returns>
            A string representation of the given Date, formatted in the current Date format.
            </returns>
    </member>
    <member name="M:XSharp.Core.Functions.DtToS(System.DateTime)">
      <summary>
            Convert a DateTime value to a string formatted as string in ANSI format
            </summary>
      <param name="dDate">The DateTime to be converted</param>
      <returns>
            An 8-character string in the format yyyymmdd.  If dDate is a DateTime.MinValue, a string of eight spaces is returned.  The return value is not affected by the current date format.
            </returns>
    </member>
    <member name="F:XSharp.Core.Functions.DUTCH">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.DW2Bin(System.UInt32)">
      <summary>
            Convert a double word to a string containing a 32-bit unsigned integer.
        </summary>
      <param name="dwValue">The value to convert.  Decimal digits are truncated.</param>
      <returns>
            A 4-byte string containing a 32-bit unsigned integer.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.EDB">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_ASSERTION">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_BAD_ERROR_INFO">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_BADALIAS">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_CREATEINDEX">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_CREATETABLE">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_CYCLICREL">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_DBSTRUCT">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_DRIVERLOAD">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_DUPALIAS">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_ERRORINIT">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_EXPR_WIDTH">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_EXPRESSION">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_FIELDINDEX">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_FIELDNAME">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_GOTO">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_NOAREAS">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_NODB">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_NOFIELDS">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_NOINITFUNCTION">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_NOMEM">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_NOORDER">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_NOTABLE">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_ORDDESTROY">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_PARAM">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_RDDNOTFOUND">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_RECNO">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_SEEK">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_SELECT">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_SETFILTER">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_SETINDEX">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_SETORDER">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_SETRELATION">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_SKIP">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_SYMSELECT">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_TOTAL">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_USE">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.EDB_WRONGFIELDNAME">
      <summary>RDD Error Number.</summary>
    </member>
    <member name="M:XSharp.Core.Functions.ElapTime(System.String,System.String)">
      <summary>
            Return the difference between two time strings.
        </summary>
      <param name="cStartTime">The starting time in the form hh:mO:ss.</param>
      <param name="cEndTime">The ending time in the form hh:mO:ss.</param>
      <returns>
            The amount of time that has elapsed from <paramref name="cStartTime" /> to <paramref name="cEndTime" /> as a time string in the format hh:mO:ss.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.EncodeBase64(System.IntPtr,System.IntPtr)">
      <summary>
            Encode a file for e-mail transfer.
        </summary>
      <param name="hSource">Handle of the file to encode.</param>
      <param name="hDestination">Handle of the file to which the encoded text is to be written.</param>
      <returns>
            The number of bytes that were encoded.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ErrorBuild(System.Exception)">
      <summary>Create an error object from an exception.</summary>
      <param name="pErrInfo">An exception object to base the Error object on.</param>
    </member>
    <member name="M:XSharp.Core.Functions.ErrorLevel">
      <summary>
            Retrieve and optionally set the X# return code.
        </summary>
      <param name="dwNewSetting">
            The new return code setting.<br />
            This can be a value between 0 and 255.<br />
            The default initial value is 0.<br />

            	When a X# program terminates, the return code is set to 1 if the process ends with a fatal error.<br />
            If the process ends normally, the return code is set to 0 (unless ErrorLevel() was set to something else in the program).<br />

            	Typically, you would set a return code with ErrorLevel() to indicate an error state to the program that invoked the current X# program.  In most cases, this is the application batch file.  Here you would test the return code using the DOS ErrorLevel command.  (Refer to your DOS manual for more information.)
        </param>
      <returns>
            If <paramref name="dwNewSetting" /> is not specified, ErrorLevel() returns the current setting.<br />
            If <paramref name="dwNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ErrorLevel(System.UInt32)">
      <summary>
            Retrieve and optionally set the X# return code.
        </summary>
      <param name="dwNewSetting">
            The new return code setting.<br />
            This can be a value between 0 and 255.<br />
            The default initial value is 0.<br />

            	When a X# program terminates, the return code is set to 1 if the process ends with a fatal error.<br />
            If the process ends normally, the return code is set to 0 (unless ErrorLevel() was set to something else in the program).<br />

            	Typically, you would set a return code with ErrorLevel() to indicate an error state to the program that invoked the current X# program.  In most cases, this is the application batch file.  Here you would test the return code using the DOS ErrorLevel command.  (Refer to your DOS manual for more information.)
        </param>
      <returns>
            If <paramref name="dwNewSetting" /> is not specified, ErrorLevel() returns the current setting.<br />
            If <paramref name="dwNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ErrorStack(System.Diagnostics.StackTrace,System.UInt32)">
      <summary>Return the error stack as a string.</summary>
      <param name="oStackTrace">StackTrace object to convert to an error stack string</param>
      <param name="wActivation">Starting level. Defaults to 1.</param>
      <returns>The error stack with line numbers. In the VO and Vulcan dialect the stack is in "VO Format"</returns>
    </member>
    <member name="M:XSharp.Core.Functions.ErrorStack(System.UInt32)">
      <summary>Return the error stack as a string.</summary>
      <param name="wActivation">Starting level. Defaults to 1.</param>
      <returns>The error stack with line numbers. In the VO and Vulcan dialect the stack is in "VO Format"</returns>
    </member>
    <member name="M:XSharp.Core.Functions.ErrString(System.UInt32)">
      <summary>
            Return an error message associated with a system-generated error code.
        </summary>
      <param name="dwNewReturnCode">The error code exported by an error object.</param>
      <returns>
            The message string associated with the error code.  Error messages are nation-dependent.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ExecName(System.Boolean)"></member>
    <member name="F:XSharp.Core.Functions.F_ACCESS_DATE">
      <summary>Position in Directory() sub-array for last access date(as a date).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_ACCESS_TIME">
      <summary>Position in Directory() sub-array for last access time(as a string).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_ATTR">
      <summary>Position in Directory() sub-array for file attributes(as a number).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_CREATION_DATE">
      <summary>Position in Directory() sub-array for creation date(as a date).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_CREATION_TIME">
      <summary>Position in Directory() sub-array for creation time(as a string).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_DATE">
      <summary>Position in Directory() sub-array for last file write date(as a date).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_EA_SIZE">
      <summary>Position in Directory() sub-array for Size of extended attributes(as a string).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_LEN">
      <summary>Length of Directory() sub-array.</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_NAME">
      <summary>Position in Directory() sub-array for fileName (as a string).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_SIZE">
      <summary>Position in Directory() sub-array for filesize(as a numeric).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_TIME">
      <summary>Position in Directory() sub-array for last file write time(as a string).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_WRITE_DATE">
      <summary>Position in Directory() sub-array for last file write date(as a date).</summary>
    </member>
    <member name="F:XSharp.Core.Functions.F_WRITE_TIME">
      <summary>Position in Directory() sub-array for last file write time(as a string).</summary>
    </member>
    <member name="M:XSharp.Core.Functions.FAttr2String(System.UInt32)">
      <summary>
            Display file attributes as a string.
        </summary>
      <param name="dwAttributes">
            One or more of the following constants, indicating the file attribute(s) to return (file attributes are returned by FAttrib()):<br /><br />



            	Constant	Returns<br />

            	FA_DIRECTORY	D<br />

            	FA_VOLUME	V<br />

            	FC_ARCHIVED	A<br />

            	FC_HIDDEN	H<br />

            	FC_NORMAL	NULL_STRING<br />

            	FC_READONLY	R<br />

            	FC_SYSTEM	S	
        </param>
      <returns>
            One or more of the characters indicated in the table above, depending upon what file attribute constants were specified in <paramref name="dwAttributes" />.<br />
            If multiple attributes are present, the characters are concatenated as a string.  You can use the string search function, At(), to determine if a particular property is set (see example below).
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FAttrib">
      <summary>
            Determine the attributes of the file found after FFCount(), FFirst(), or FNext().
        </summary>
      <returns>
            A value indicating the attributes of the current file.
            The constants in the following table can be used individually or added together to determine which attributes are applicable:
            Constant	Description	
            FA_DIRECTORY	Directory	
            FA_VOLUME	Volume	
            FC_ARCHIVED	Archived	
            FC_HIDDEN	Hidden	
            FC_NORMAL	Read/write	
            FC_READONLY	Read-only	
            FC_SYSTEM	System	
            Note:<br />
            It is not uncommon for a file to have more than one attribute.<br />
            For example, it may be read-only and archived, which would be represented as FC_READONLY + FC_ARCHIVED or _Or(FC_READONLY, FC_ARCHIVED).
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.FC_ARCHIVED">
      <summary>FCreate() attribute mode: archived</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FC_HIDDEN">
      <summary>FCreate() attribute mode: hidden file</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FC_NORMAL">
      <summary>FCreate() attribute mode: normal read/write file (default for create)</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FC_READONLY">
      <summary>FCreate() attribute mode: read-only file</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FC_SYSTEM">
      <summary>FCreate() attribute mode: system file</summary>
    </member>
    <member name="M:XSharp.Core.Functions.FChSize(System.IntPtr,System.UInt32)">
      <summary>
            Change the size of a file opened with a low-level file function.
        </summary>
      <param name="ptrHandle">The handle of the open file whose size you want to change.</param>
      <param name="dwOffset">The new length to which the file should be set.</param>
      <returns>
            The new length of the file if successful; otherwise, F_ERROR.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FClose(System.IntPtr)">
      <summary>
            Close an open file and write the buffers to disk.
        </summary>
      <param name="ptrHandle">The handle of the open file you want to close.</param>
      <returns>
            FALSE if an error occurs while writing; otherwise, TRUE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FCommit(System.IntPtr)">
      <summary>
            Flush file buffers.
        </summary>
      <param name="ptrHandle">The handle of the open file you want to flush.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.FConvertToFileStream(System.IntPtr)"></member>
    <member name="M:XSharp.Core.Functions.FConvertToMemoryStream(System.IntPtr)"></member>
    <member name="M:XSharp.Core.Functions.FCopy(System.String,System.String)">
      <summary>
            Copy a file to a new file or to a device.
        </summary>
      <param name="cSourceFile">
            The name of the source file to copy, including an optional drive, directory, and extension.<br />

            	If <paramref name="cSourceFile" /> does not exist, a runtime error is raised.<br />
            If it exists, this function attempts to open the file in shared mode and, if successful, it proceeds.<br />
            If access is denied because, for example, another process has exclusive use of the file, NetErr() is set to TRUE.
        </param>
      <param name="cTargetFile">
            The name of the target file, including an optional drive, directory, and extension.<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.  <br />

            	See SetDefault() and SetPath() for file searching and creation rules.<br />
            This function does not supply a default extension for either file name.<br /><paramref name="cTargetFile" /> can also be the name of the target device specified without a trailing colon.  When you specify one of the following device names: PRN, LPT1, LPT2, LPT3, COM1, or COM2, FCopy() searches the Windows registry for a Device entry to use for the printing device.<br />
            If there is no Device entry, it looks for the Devices entries and presents the user with a list box of devices from which to choose.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FCopy(System.String,System.String,System.Boolean)">
      <summary>
            Copy a file to a new file or to a device.
        </summary>
      <param name="lOverWrite">Should the target file be overwritten.</param>
      <param name="cSourceFile">
            The name of the source file to copy, including an optional drive, directory, and extension.<br />

            	If <paramref name="cSourceFile" /> does not exist, a runtime error is raised.<br />
            If it exists, this function attempts to open the file in shared mode and, if successful, it proceeds.<br />
            If access is denied because, for example, another process has exclusive use of the file, NetErr() is set to TRUE.
        </param>
      <param name="cTargetFile">
            The name of the target file, including an optional drive, directory, and extension.<br />

            	If <paramref name="cTargetFile" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, NetErr() is set to TRUE.  <br />

            	See SetDefault() and SetPath() for file searching and creation rules.<br />
            This function does not supply a default extension for either file name.<br /><paramref name="cTargetFile" /> can also be the name of the target device specified without a trailing colon.  When you specify one of the following device names: PRN, LPT1, LPT2, LPT3, COM1, or COM2, FCopy() searches the Windows registry for a Device entry to use for the printing device.<br />
            If there is no Device entry, it looks for the Devices entries and presents the user with a list box of devices from which to choose.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FCreate(System.String)">
      <summary>
            Create a file or open and truncate an existing file.
        </summary>
      <param name="cFileName">
            The name of the file to create, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />
            If the file already exists, its length is truncated to 0 without warning.<br />

            	This function sets NetErr() in case of a concurrency control conflict.
        </param>
      <param name="kAttributes">
            One of the following constants indicating the attribute to be set when creating the file:<br />

            	Constant	Description<br />

            	FC_ARCHIVED	Archived file<br />

            	FC_HIDDEN	Hidden file<br />

            	FC_NORMAL	Normal read/write file<br />

            	FC_READONLY	Read-only file<br />

            	FC_SYSTEM	System file	
        </param>
      <returns>
            The DOS file handle number of the new file.<br />
            If an error occurs, FCreate() returns  F_ERROR.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FCreate(System.String,System.UInt32)">
      <summary>
            Create a file or open and truncate an existing file.
        </summary>
      <param name="cFileName">
            The name of the file to create, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />
            If the file already exists, its length is truncated to 0 without warning.<br />

            	This function sets NetErr() in case of a concurrency control conflict.
        </param>
      <param name="kAttributes">
            One of the following constants indicating the attribute to be set when creating the file:<br />

            	Constant	Description<br />

            	FC_ARCHIVED	Archived file<br />

            	FC_HIDDEN	Hidden file<br />

            	FC_NORMAL	Normal read/write file<br />

            	FC_READONLY	Read-only file<br />

            	FC_SYSTEM	System file	
        </param>
      <returns>
            The DOS file handle number of the new file.<br />
            If an error occurs, FCreate() returns  F_ERROR.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FCreate2(System.String,System.UInt32)">
      <summary>
            Create a file or open and truncate an existing file, specifying two strongly typed arguments.
        </summary>
      <param name="cFileName">
            The name of the file to create, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />
            If the file already exists, its length is truncated to 0 without warning.<br />

            	This function sets NetErr() in case of a concurrency control conflict.
        </param>
      <param name="dwAttributes">
            One of the following constants indicating the attribute to be set when creating the file:<br />

            	Constant	Description<br />

            	FC_ARCHIVED	Archived file<br />

            	FC_HIDDEN	Hidden file<br />

            	FC_NORMAL	Normal read/write file<br />

            	FC_READONLY	Read-only file<br />

            	FC_SYSTEM	System file	
        </param>
      <returns>
            The DOS file handle number of the new file.<br />
            If an error occurs, FCreate2() returns  F_ERROR.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FDate">
      <summary>
            Return the date stamp of the file found by FFCount(), FFirst(), or FNext().
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.FEof(System.IntPtr)">
      <summary>
            Determine if the file pointer is positioned at the end-of-file.
        </summary>
      <param name="ptrHandle">The handle of an open file.</param>
      <returns>
            TRUE if the file pointer is at end-of-file; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FErase(System.String)">
      <summary>
            Delete a file from disk.
        </summary>
      <param name="cFileName">The file name, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.</param>
      <returns>
            TRUE if the operation succeeds; otherwise, FALSE.  In the case of a failure, FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FError">
      <summary>
            Get the error code for a file operation.
            </summary>
      <returns>The error from the last file operation or the last user-specified setting.  If there was no error, FError() returns 0.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.FError(System.UInt32)">
      <summary>
            Set the error code for a file operation.
            </summary>
      <param name="nSet"></param>
      <returns>The previous errorcode from the last file operation.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.FException">
      <summary>
            Get the last exception for a file operation.
            </summary>
      <returns>The exception from the last file operation or the last user-specified setting.  If there was no exception, FException() returns null.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.FFCount(System.String,System.UInt32)">
      <summary>
            Return the number of files that match a given file specification and attribute.
        </summary>
      <param name="pszFileSpec">
            The names of the files to include, including an optional drive, directory, and extension.<br />
            The file name and extension can include the standard wildcard characters (* and ?).<br />
            If the drive and directory are omitted, the Windows default is used.
        </param>
      <param name="dwAttributes">
            One or more of the following constants indicating the file attributes to be used with <paramref name="pszFileSpec" /> as search criteria:<br /><br />



            	Constant	Description<br />

            	FA_DIRECTORY	Directory<br />

            	FA_VOLUME	Volume<br />

            	FC_HIDDEN	Hidden<br />

            	FC_NORMAL	Visible<br />

            	FC_SYSTEM	System<br />

            	To specify more than one constant, you can either add attributes together, as in FC_SYSTEM + FC_HIDDEN, or use the _Or() operator, as in _Or(FC_SYSTEM, FC_HIDDEN).<br /><paramref name="dwAttributes" /> specifies a criterion to satisfy in addition to any "visible" files that match the <paramref name="pszFileSpec" />.  Visible files do not include directories, volumes, or hidden or system files — all other files are visible, regardless of the status of their read or archive attributes.<br />
            To include only visible files, use FC_NORMAL as the <paramref name="dwAttributes" /> argument.<br />

            	Note:To specify volume labels only, to the exclusion of all other files, specify FA_VOLUME as the sole <paramref name="dwAttributes" /> argument.
        </param>
      <returns>
            The number of files matching the specified criteria.<br />
            If no match is found, it returns zero.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FFirst(System.String,System.UInt32)">
      <summary>
            Find the first file that matches a given file specification or attribute.
        </summary>
      <param name="pszFileSpec">
            The file specification for the search.  Besides a file name, this specification can include an optional drive, directory, and extension.<br />
            The file name and extension can include the standard wildcard characters (* and ?).<br />
            If the drive and directory are omitted, the Windows default is used.
        </param>
      <param name="kAttributes">
            One or more of the following constants indicating the file attributes to be used with <paramref name="pszFileSpec" /> as search criteria:<br />

            	Constant	Description<br />

            	FA_DIRECTORY	Directory<br />

            	FA_VOLUME	Volume<br />

            	FC_HIDDEN	Hidden<br />

            	FC_NORMAL	Visible<br />

            	FC_SYSTEM	System<br />

            	To specify more than one constant, you can either add attributes together, as in FC_SYSTEM + FC_HIDDEN, or use the _Or() operator, as in _Or(FC_SYSTEM, FC_HIDDEN).<br /><paramref name="kAttributes" /> specifies a criterion to satisfy in addition to any "visible" files that match the <paramref name="pszFileSpec" />.  Visible files do not include directories, volumes, or hidden or system files — all other files are visible, regardless of the status of their read or archive attributes.<br />
            To include only visible files, use FC_NORMAL as the <paramref name="kAttributes" /> argument.<br />

            	Note:To specify volume labels only, to the exclusion of all other files, specify FA_VOLUME as the sole <paramref name="kAttributes" /> argument.
        </param>
      <returns>
            TRUE if a match is found; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FFLock(System.IntPtr,System.UInt32,System.UInt32)">
      <summary>
            Lock a portion of an open file.
        </summary>
      <param name="ptrHandle">The handle of the open file you want to lock.</param>
      <param name="offset">
            The file offset at which to start locking.<br />
            A value of zero corresponds to the first byte of the file.
        </param>
      <param name="length">The number of bytes to lock.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FFLock64(System.IntPtr,System.Int64,System.Int64)">
      <summary>
            Lock a portion of an open file.
        </summary>
      <param name="ptrHandle">The handle of the open file you want to lock.</param>
      <param name="offset">
            The file offset at which to start locking.<br />
            A value of zero corresponds to the first byte of the file.
        </param>
      <param name="length">The number of bytes to lock.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FFlush(System.IntPtr)">
      <summary>
            Flush to disk a file opened with a low-level file function.
        </summary>
      <param name="ptrHandle">The handle of the open file you want to flush.</param>
      <param name="lCommit">When you pass TRUE for this parameter then also all intermediate buffers are flushed.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.FFlush(System.IntPtr,System.Boolean)">
      <summary>
            Flush to disk a file opened with a low-level file function.
        </summary>
      <param name="ptrHandle">The handle of the open file you want to flush.</param>
      <param name="lCommit">When you pass TRUE for this parameter then also all intermediate buffers are flushed.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.FFUnLock(System.IntPtr,System.UInt32,System.UInt32)">
      <summary>
            UnLock a portion of an opened file.
        </summary>
      <param name="ptrHandle">The handle of the opened file you want to unlock.</param>
      <param name="offset">The file offset at which to start unlocking.</param>
      <param name="length">The number of bytes to unlock.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FFUnLock64(System.IntPtr,System.Int64,System.Int64)">
      <summary>
            UnLock a portion of an opened file.
        </summary>
      <param name="ptrHandle">The handle of the opened file you want to unlock.</param>
      <param name="offset">The file offset at which to start unlocking.</param>
      <param name="length">The number of bytes to unlock.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FGetBuffer(System.IntPtr,System.Int32)">
      <summary>Access or allocate the File I/O Buffer used by the X# Runtime for Low Level File Access for a file.</summary>
      <param name="pFile">
        <span>
            The handle of the file. <em>Please see the remark below about the compatibility of X# Runtime file handles and Win32 file handles.</em></span>
      </param>
      <param name="nSize">The size of the buffer that you would like to allocate.s</param>
      <returns>The Byte[] associated with the file handle for an open file.
            When the file handle is invalid then a NULL object will be returned.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.FGetFileName(System.IntPtr)">
      <summary>Return the filename for a file handle</summary>
      <param name="pFile">
        <span>
            The handle of the file. <em>Please see the remark below about the compatibility of X# Runtime file handles and Win32 file handles.</em></span>
      </param>
    </member>
    <member name="M:XSharp.Core.Functions.FGetS(System.IntPtr)">
      <summary>
            Read a line from an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="nMax">
            The maximum number of characters to read per line.  FGets() will read until a hard carriage return (Chr(13)) is reached, end-of-file is encountered, or <paramref name="nMax" /> characters are read.<br />
            The default value for <paramref name="nMax" /> is 256.
        </param>
      <returns>
            The line read.  When the end-of-file is reached, FGets() returns a NULL_STRING and FError() is set to 257.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FGetS(System.IntPtr,System.UInt32)">
      <summary>
            Read a line from an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="nMax">
            The maximum number of characters to read per line.  FGets() will read until a hard carriage return (Chr(13)) is reached, end-of-file is encountered, or <paramref name="nMax" /> characters are read.<br />
            The default value for <paramref name="nMax" /> is 256.
        </param>
      <returns>
            The line read.  When the end-of-file is reached, FGets() returns a NULL_STRING and FError() is set to 257.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FGetS2(System.IntPtr,System.UInt32)">
      <summary>
            Read a line from an open file, specifying two strongly typed arguments.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="dwMax">
            The maximum number of characters to read per line.  FGets2() will read until a hard carriage return (Chr(13)) is reached, end-of-file is encountered, or <paramref name="dwMax" /> characters are read.<br />
            The default value for <paramref name="dwMax" /> is 256.
        </param>
      <returns>
            The line read.  When the end-of-file is reached, FGets2() returns a NULL_STRING and FError() is set to 257.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FGetStream(System.IntPtr)">
      <summary>Access the FileStream object used by the X# Runtime for Low Level File Access </summary>
      <param name="pFile">
        <span>
            The handle of the file. <em>Please see the remark below about the compatibility of X# Runtime file handles and Win32 file handles.</em></span>
      </param>
      <returns>The FileStream object or NULL when the handle is not valid </returns>
    </member>
    <member name="M:XSharp.Core.Functions.File(System.String)">
      <summary>
            Determine if any file matches a given file specification.
        </summary>
      <param name="cFileSpec">
            The file specification for the search.  Besides a file name, this specification can include an optional drive, directory, and extension.<br />
            The file name and extension can include the standard wildcard characters (* and ?).<br />
            If you do not specify a drive and directory, this function searches only the SetDefault() and SetPath() settings.  Note also that File() does not recognize hidden or system files in its search.If <paramref name="cFileSpec" /> is longer than 127 characters and has no path VO searches in the current directory only
        </param>
      <returns>
            TRUE if any file matches the <paramref name="cFileSpec" /> pattern; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FName">
      <summary>
            Return the name of the file found by FFCount(), FFirst(), or FNext().
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.FNext">
      <summary>
            Find the next file that matches the file previously found by FFirst().
        </summary>
      <returns>
            TRUE if another file was found; otherwise, FALSE.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.FO_COMPAT">
      <summary>FOpen() Sharing Mode: Compatibility mode (default)</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_DENYNONE">
      <summary>FOpen() Sharing Mode: (same as FO_SHARED)</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_DENYREAD">
      <summary>FOpen() Sharing Mode: Prevent other processes from reading</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_DENYWRITE">
      <summary>FOpen() Sharing Mode: Prevent other processes from writing</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_EXCLUSIVE">
      <summary>FOpen() Sharing Mode: Exclusive</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_READ">
      <summary>FOpen() Open Mode: Open for reading (default)</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_READWRITE">
      <summary>FOpen() Open Mode: Open for reading or writing</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_SHARED">
      <summary>FOpen() Sharing Mode:  Allow other processes to read or write</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_UNBUFFERED">
      <summary>FOpen() Open Mode: UnBuffered. Added to FO_READ, FO_WRITE and FO_READWRITE</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FO_WRITE">
      <summary>FOpen() Open Mode: Open for writing</summary>
    </member>
    <member name="M:XSharp.Core.Functions.FOpen(System.String)">
      <summary>
            Open a file.
        </summary>
      <param name="cFileName">
            The file name, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />

            	This function sets NetErr() in case of a concurrency control conflict.
        </param>
      <param name="kMode">
            The DOS open mode, which determines the accessibility of the file.<br />
            The open mode is composed of elements from the two types of modes: Access mode + Sharing mode.  Specifying an access mode constant indicates how the opened file is to be accessed; the sharing mode determines how other processes can access the file.  <br />

            	Available open and sharing mode constants are listed below:<br />

            	Access Modes	Operation<br />

            	FO_READ	Open for reading (default)<br />

            	FO_READWRITE	Open for reading or writing<br />

            	FO_WRITE	Open for writing<br /><br />



            	Sharing Modes	Operation<br />

            	FO_COMPAT	Compatibility mode (default)<br />

            	FO_DENYNONE	Allow others to read or write<br />

            	FO_DENYREAD	Prevent others from reading<br />

            	FO_DENYWRITE	Prevent others from writing<br />

            	FO_EXCLUSIVE	Exclusive use<br />

            	FO_SHARED	Same as FO_DENYNONE<br />

            	The default open mode is non-sharable and read-only.<br />
            If just the access mode is used, the file is opened as non-sharable.
        </param>
      <returns>
            The file handle of the opened file in the range of 0 to 32,767.<br />
            This value is similar to an alias in the database system and is required to identify the open file to other file functions.<br />
            It is, therefore, important to assign the return value to a variable for later use, as in the example below.
            If an error occurs, FOpen() returns F_ERROR.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FOpen(System.String,System.UInt32)">
      <summary>
            Open a file.
        </summary>
      <param name="cFileName">
            The file name, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />

            	This function sets NetErr() in case of a concurrency control conflict.
        </param>
      <param name="kMode">
            The DOS open mode, which determines the accessibility of the file.<br />
            The open mode is composed of elements from the two types of modes: Access mode + Sharing mode.  Specifying an access mode constant indicates how the opened file is to be accessed; the sharing mode determines how other processes can access the file.  <br />

            	Available open and sharing mode constants are listed below:<br />

            	Access Modes	Operation<br />

            	FO_READ	Open for reading (default)<br />

            	FO_READWRITE	Open for reading or writing<br />

            	FO_WRITE	Open for writing<br /><br />



            	Sharing Modes	Operation<br />

            	FO_COMPAT	Compatibility mode (default)<br />

            	FO_DENYNONE	Allow others to read or write<br />

            	FO_DENYREAD	Prevent others from reading<br />

            	FO_DENYWRITE	Prevent others from writing<br />

            	FO_EXCLUSIVE	Exclusive use<br />

            	FO_SHARED	Same as FO_DENYNONE<br />

            	The default open mode is non-sharable and read-only.<br />
            If just the access mode is used, the file is opened as non-sharable.
        </param>
      <returns>
            The file handle of the opened file in the range of 0 to 32,767.<br />
            This value is similar to an alias in the database system and is required to identify the open file to other file functions.<br />
            It is, therefore, important to assign the return value to a variable for later use, as in the example below.
            If an error occurs, FOpen() returns F_ERROR.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FOpen2(System.String,System.UInt32)">
      <summary>
            Open a file, specifying two strongly-typed arguments.
        </summary>
      <param name="cFileName">
            The file name, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />

            	This function sets NetErr() in case of a concurrency control conflict.
        </param>
      <param name="kMode">
            This argument is the same as <paramref name="kMode" /> used with FOpen().  See FOpen() for details.
        </param>
      <returns>
            The file handle of the opened file in the range of 0 to 32,767.<br />
            If an error occurs, FOpen2() returns F_ERROR.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FPathName">
      <summary>
            Return the name and path of the file that was used by File().
        </summary>
      <returns>
            The complete name, including path, of the file that was last used by File().  Note that the system might also use File() internally.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.FPT_DEFBLOCKSIZE">
      <summary>
            Default FPT BlockSize
            </summary>
    </member>
    <member name="M:XSharp.Core.Functions.FPutS(System.IntPtr,System.String)">
      <summary>
            Write a string, a carriage-return character, and a linefeed character to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="nBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.<br />
            If <paramref name="nBytes" /> is not specified, the value of SLen(<paramref name="cBuffer" />) is used.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="nBytes" /> + 2, the operation was successful.<br />
            If the return value is less than <paramref name="nBytes" /> + 2 or 0, this means that the length of  <paramref name="cBuffer" /> was less than <paramref name="nBytes" />, or the disk is full, or another error has occurred.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FPutS(System.IntPtr,System.String,System.UInt32)">
      <summary>
            Write a string, a carriage-return character, and a linefeed character to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="nBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.<br />
            If <paramref name="nBytes" /> is not specified, the value of SLen(<paramref name="cBuffer" />) is used.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="nBytes" /> + 2, the operation was successful.<br />
            If the return value is less than <paramref name="nBytes" /> + 2 or 0, this means that the length of  <paramref name="cBuffer" /> was less than <paramref name="nBytes" />, or the disk is full, or another error has occurred.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FPutS3(System.IntPtr,System.String,System.UInt32)">
      <summary>
            Write a string, a carriage-return character, and a linefeed character to an open file, specifying three strongly-typed arguments.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="dwBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="dwBytes" /> + 2, the operation was successful.<br />
            If the return value is less than <paramref name="dwBytes" /> + 2 or 0, this means that the length of  <paramref name="cBuffer" /> was less than <paramref name="dwBytes" />, or the disk is full, or another error has occurred.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FRead(System.IntPtr,System.String@,System.UInt32)">
      <summary>
            Read characters from a file into a buffer variable that is passed by reference.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="cBufferVar">
            A variable used to store data read from the specified file.<br />
            If the length of <paramref name="cBufferVar" /> is less than <paramref name="dwBytes" />, a new string whose length is the minimum of <paramref name="dwBytes" /> and the remaining bytes in the file is allocated.  <paramref name="cBufferVar" /> must be passed by reference and, therefore, must be prefaced by the pass-by-reference operator (@).
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FRead3(System.IntPtr,System.Byte[],System.UInt32)">
      <summary>
            Read characters from a file into an allocated buffer.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="ptrBufferVar">
            Pointer to an allocated buffer used to store data read from the specified file.<br />
            The length of this variable must be greater than or equal to <paramref name="dwBytes" />.
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <param name="ptrBufferVar">An array of bytes to store the data read from the specified file. The length of this variable must be greater than or equal to the number of bytes in the next parameter.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FRead4(System.IntPtr,System.Byte[],System.UInt32,System.Boolean)">
      <summary>
            Read characters from a file into an allocated buffer.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="ptrBufferVar">
            Pointer to an allocated buffer used to store data read from the specified file.<br />
            The length of this variable must be greater than or equal to <paramref name="dwBytes" />.
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <param name="lAnsi">If FALSE an OEM to ANSI conversion is made.</param>
      <param name="ptrBufferVar">An array of bytes to store the data read from the specified file. The length of this variable must be greater than or equal to the number of bytes in the next parameter.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FReadLine(System.IntPtr,System.UInt32)">
      <summary>
            Read a line from an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="nMax">
            The maximum number of characters to read per line.  FReadLine() will read until a hard carriage return (Chr(13)) is reached, end-of-file is encountered,  or <paramref name="nMax" /> characters are read.<br />
            The default value for <paramref name="nMax" /> is 256.
        </param>
      <returns>
            The line read.  When the end-of-file is reached, FReadLine() returns a NULL_STRING and FError() is set to 257.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FReadLine2(System.IntPtr,System.UInt32)">
      <summary>
            Read a line from an open file, specifying two strongly-typed arguments.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="dwMax">
            The maximum number of characters to read per line.  FReadLine2() will read until a hard carriage return (Chr(13)) is reached, end-of-file is encountered,  or <paramref name="dwMax" /> characters are read.<br />
            The default value for <paramref name="dwMax" /> is 256.
        </param>
      <returns>
            The line read.  When the end-of-file is reached while attempting to read, FReadLine2() returns a NULL_STRING and FError() is set to 257.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FReadStr(System.IntPtr,System.UInt32)">
      <summary>
            Read characters from a file.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="dwBytes">
            The number of bytes to read, beginning at the current DOS file pointer position.  Characters are read up to <paramref name="dwBytes" /> or until end-of-file is encountered.<br />
            The file pointer is then moved forward <paramref name="dwBytes" />.<br />
            If <paramref name="dwBytes" /> is greater than the number of bytes from the pointer position to the end of the file, the file pointer is positioned at the last byte in the file.
        </param>
      <returns>
            A string.<br />
            A NULL_STRING indicates an error or end-of-file.<br />
            If end-of-file is reached while reading, FError() is set to 257.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FReadText(System.IntPtr,System.String@,System.UInt32)">
      <summary>
            Read characters from a file into a buffer variable that is passed by reference.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="cBufferVar">
            A variable used to store data read from the specified file.<br />
            If the length of <paramref name="cBufferVar" /> is less than <paramref name="dwBytes" />, a new string whose length is the minimum of <paramref name="dwBytes" /> and the remaining bytes in the file is allocated.  <paramref name="cBufferVar" /> must be passed by reference and, therefore, must be prefaced by the pass-by-reference operator (@).
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FReadText3(System.IntPtr,System.Byte[],System.UInt32)">
      <summary>
            Read characters from a file into an allocated buffer, with possible OEM to ANSI conversion, based on the current SetAnsi() setting.
        </summary>
      <param name="ptrHandle">The handle of the file to read from.</param>
      <param name="ptrBufferVar">
            Pointer to an allocated buffer used to store data read from the specified file.<br />
            The length of this variable must be greater than or equal to <paramref name="dwBytes" />.
        </param>
      <param name="dwBytes">The number of bytes to read into the buffer.</param>
      <returns>
            The number of bytes successfully read.<br />
            A return value less than <paramref name="dwBytes" /> or 0 indicates end-of-file or some other read error.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FRename(System.String,System.String)">
      <summary>
            Change the name of a file.
        </summary>
      <param name="cOldFile">The original file name, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.</param>
      <param name="cNewFile">
            The new file name, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />
            If the source directory is different from the target directory, the file moves to the target directory.<br />
            If <paramref name="cNewFile" /> exists or is currently open, FRename() fails and returns FALSE.
        </param>
      <returns>
            TRUE if the operation succeeds; otherwise, FALSE.  In the case of a failure, FError() can be used to determine the specific error.
            Warning!  Files must be closed before renaming.<br />
            Attempting to rename an open file will produce unpredictable results.  When a database file is renamed, the associated memo file, if any, must also be renamed.  Failure to do so can compromise the integrity of your databases.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.FRENCH">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.FRewind(System.IntPtr)">
      <summary>
            Set the file pointer at the top of an open file.
        </summary>
      <param name="ptrHandle">The handle of the open file.</param>
      <returns></returns>
    </member>
    <member name="F:XSharp.Core.Functions.FS_END">
      <summary>FSeek() Seek Offset: Seek from end of file</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FS_RELATIVE">
      <summary>FSeek() Seek Offset: Seek from current file position</summary>
    </member>
    <member name="F:XSharp.Core.Functions.FS_SET">
      <summary>FSeek() Seek Offset: Seek from beginning of file</summary>
    </member>
    <member name="M:XSharp.Core.Functions.FSeek3(System.IntPtr,System.Int32,System.UInt32)">
      <summary>
            Set the file pointer to a new position, specifying three strongly-typed arguments.
        </summary>
      <param name="ptrHandle">The handle of the open file.</param>
      <param name="liOffset">
            The number of bytes to move the file pointer from the position defined by <paramref name="dwOrigin" />.<br />
            It can be a positive or negative number.<br />
            A positive number moves the pointer forward in the file, and a negative number moves the pointer backward.
        </param>
      <param name="dwOrigin">
            The same as <paramref name="nOrigin" /> with FSeek(), except required.  See FSeek() for details.
        </param>
      <returns>
            The new position of the file pointer, relative to the beginning of the file (position 0).  (The original position of the file pointer does not matter.)
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FSize">
      <summary>
            Return the size of the file found by FFCount(), FFirst(), or FNext().
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.FSize(System.IntPtr)">
      <summary>Returns the size in bytes of a specified file. </summary>
      <param name="pFile">
        <span>
            The handle of the file. <em>Please see the remark below about the compatibility of X# Runtime file handles and Win32 file handles.</em></span>
      </param>
      <returns>The size of the file or -1 when the file handle is not valid.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.FSize(System.String)">
      <summary>Returns the size in bytes of a specified file. </summary>
      <param name="cFileName">Specifies a file for which FSIZE( ) returns the size in bytes.</param>
      <returns>The size of the file or -1 when the file is not found.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.FTell(System.IntPtr)">
      <summary>
            Return the current position of the file pointer.
        </summary>
      <param name="ptrHandle">The handle of the file to examine.</param>
      <returns>
            The current position of the file pointer, relative to the beginning of the file.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FTell64(System.IntPtr)">
      <summary>
            Return the current position of the file pointer.
        </summary>
      <param name="ptrHandle">The handle of the file to examine.</param>
      <returns>
            The current position of the file pointer, relative to the beginning of the file.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FTime">
      <summary>
            Return the time stamp of the file found by FFCount(), FFirst(), or FNext().
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.FWrite(System.IntPtr,System.String)"></member>
    <member name="M:XSharp.Core.Functions.FWrite(System.IntPtr,System.String,System.UInt32)">
      <summary>
            Write a string to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="nBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.<br />
            If omitted, the entire contents of <paramref name="cBuffer" /> is written.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="nBytes" />, the operation was successful.<br />
            If the return value is less than <paramref name="nBytes" /> or 0, this means that the length of <paramref name="cBuffer" /> is less than <paramref name="nBytes" />, or the disk is full, or another error has occurred.  FError() can be used to determine the specific error.  When a disk full error occurs, FError() is set to 256.
            FWrite() and FWrite3 are assumed to handle raw binary data and are not dependent upon the status of SetAnsi().  FWriteText() and FWrite4(), on the other hand, are dependent upon SetAnsi().
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FWrite(System.IntPtr,System.String,System.UInt32,System.Boolean)">
      <param name="lAnsi">If FALSE an OEM to ANSI conversion is made. </param>
    </member>
    <member name="M:XSharp.Core.Functions.FWrite3(System.IntPtr,System.Byte[],System.UInt32)">
      <summary>
            Write the contents of a buffer to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="ptrBuffer">A pointer to the buffer to write.</param>
      <param name="dwBytes">
            The number of bytes in <paramref name="ptrBuffer" /> to write, beginning at the current file pointer position.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="dwBytes" />, the operation was successful.<br />
            If the return value is less than <paramref name="dwBytes" /> or 0, this means that the length of <paramref name="ptrBuffer" /> is less than <paramref name="dwBytes" />, or the disk is full, or another error has occurred.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FWrite4(System.IntPtr,System.Byte[],System.UInt32,System.Boolean)">
      <summary>
            Write the contents of a buffer to an open file, with an ANSI to OEM conversion option.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="ptrBuffer">A pointer to the buffer to write</param>
      <param name="dwBytes">
            The number of bytes in <paramref name="ptrBuffer" /> to write, beginning at the current file pointer position.
        </param>
      <param name="lAnsi">If FALSE , an ANSI to OEM conversion is made.</param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="dwBytes" />, the operation was successful.<br />
            If the return value is less than <paramref name="dwBytes" /> or 0, this means that the length of <paramref name="ptrBuffer" /> is less than <paramref name="dwBytes" />, or the disk is full, or another error has occurred.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FWriteLine(System.IntPtr,System.String)">
      <summary>
            Write a string, a carriage-return character, and a linefeed character to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="nBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.<br />
            If <paramref name="nBytes" /> is not specified, the value of SLen(<paramref name="cBuffer" />) is used.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="nBytes" /> + 2, the operation was successful.<br />
            If the return value is less than <paramref name="nBytes" /> + 2 or 0, this means that the length of  <paramref name="cBuffer" /> was less than <paramref name="nBytes" />, or the disk is full, or another error has occurred.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FWriteLine(System.IntPtr,System.String,System.UInt32)">
      <summary>
            Write a string, a carriage-return character, and a linefeed character to an open file.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="nBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.<br />
            If <paramref name="nBytes" /> is not specified, the value of SLen(<paramref name="cBuffer" />) is used.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="nBytes" /> + 2, the operation was successful.<br />
            If the return value is less than <paramref name="nBytes" /> + 2 or 0, this means that the length of  <paramref name="cBuffer" /> was less than <paramref name="nBytes" />, or the disk is full, or another error has occurred.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FWriteLine3(System.IntPtr,System.String,System.UInt32)">
      <summary>
            Write a string, a carriage-return character, and a linefeed character to an open file, specifying two strongly-typed arguments.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="cBuffer">The string to write.</param>
      <param name="dwBytes">
            The number of bytes in <paramref name="cBuffer" /> to write, beginning at the current file pointer position.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="dwBytes" /> + 2, the operation was successful.<br />
            If the return value is less than <paramref name="dwBytes" /> + 2 or 0, this means that the length of  <paramref name="cBuffer" /> was less than <paramref name="dwBytes" />, or the disk is full, or another error has occurred.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.FWriteText3(System.IntPtr,System.Byte[],System.UInt32)">
      <summary>
            Write the contents of a buffer to an open file, with SetAnsi() dependency.
        </summary>
      <param name="ptrHandle">The handle of the file to write to.</param>
      <param name="ptrBuffer">A pointer to the buffer to write.</param>
      <param name="dwBytes">
            The number of bytes in <paramref name="ptrBuffer" /> to write, beginning at the current file pointer position.
        </param>
      <returns>
            The number of bytes written.<br />
            If the value returned is equal to <paramref name="dwBytes" />, the operation was successful.<br />
            If the return value is less than <paramref name="dwBytes" /> or 0, this means that the length of <paramref name="ptrBuffer" /> is less than <paramref name="dwBytes" />, or the disk is full, or another error has occurred.  FError() can be used to determine the specific error.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.GERMAN">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.GetAMExt">
      <summary>
            Returns a string representing the morning extension for time strings in 12-hour format.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetAmPm">
      <summary>
            Return and optionally change the setting that determines whether time strings are in 12-hour or 24-hour format.
        </summary>
      <param name="lNewSetting">
            TRUE indicates 12-hour format.  FALSE indicates 24-hour format.<br />
            The initial default depends on SetInternational(), which you can refer to for more information.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetAMPM() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetAnsi">
      <summary>
            Return and optionally change the setting that determines whether database files are created using ANSI or OEM format and whether certain text file operations convert between the two character sets.
        </summary>
      <param name="lNewSetting">
            TRUE specifies the ANSI format; FALSE specifies the OEM format.<br />
            If the Ansi entry in the X# section of WIN.INI is not present, an entry of Ansi=1 will be written, setting the initial default to TRUE; if this entry is set to 0, the initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetAnsi() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetChunkBase64(System.Byte,System.Byte,System.Byte,System.Int32)">
      <summary></summary>
      <param name="pBuffer"></param>
      <param name="nSize"></param>
      <param name="b1"></param>
      <param name="b2"></param>
      <param name="b3"></param>
      <param name="nPad"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetCurPath">
      <summary>
            Get the current X# search path for opening file.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetCursorProperty(System.String)"></member>
    <member name="M:XSharp.Core.Functions.GetDateFormat">
      <summary>
            Return the current date format.
        </summary>
      <returns>
            The default date format supplied with X# or a customized date format defined via the SetDateFormat() or SetDateCountry() functions.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetDefault">
      <summary>
            Return the X# default drive and directory.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetDefaultDir">
      <summary>
            Return the current SetDefault() setting.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetDosError">
      <summary>
            Return the DOS error code from any application.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetEnv(System.String)">
      <summary>
            Retrieve the contents of a DOS environment variable.
        </summary>
      <param name="cEnvVariable">The name of the environment variable whose contents you want to retrieve.  (Note that GetEnv() is not case-sensitive.)</param>
      <returns>
            The contents of the specified environment variable.<br />
            If the variable cannot be found, GetEnv() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetFAttr(System.String)">
      <summary>
            Convert file attributes to numbers.
        </summary>
      <param name="uAttributes">
            One or more of the following constants or strings:<br />

            	Character	Constant	Description<br />

            	A	FC_ARCHIVED	Archived<br />

            	D	FA_DIRECTORY	Directory<br />

            	H	FC_HIDDEN	Hidden<br />

            	NULL_STRING	FC_NORMAL	Read/write<br />

            	R	FC_READONLY	Read-only<br />

            	S	FC_SYSTEM	System<br />

            	V	FA_VOLUME	Search for the DOS volume label and exclude all other files<br />

            	To specify more than one constant, you can either add attributes together, as in FC_SYSTEM + FC_HIDDEN, or use the _Or() operator, as in _Or(FC_SYSTEM, FC_HIDDEN).<br />
            To specify more than one string, simply concatenate them, as in "SH."
        </param>
      <returns>
            A number that represents the file attribute specified.<br />
            This number could represent two or more file attributes added together.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetFAttr(System.UInt32)">
      <summary>
            Convert file attributes to numbers.
        </summary>
      <param name="uAttributes">
            One or more of the following constants or strings:<br />

            	Character	Constant	Description<br />

            	A	FC_ARCHIVED	Archived<br />

            	D	FA_DIRECTORY	Directory<br />

            	H	FC_HIDDEN	Hidden<br />

            	NULL_STRING	FC_NORMAL	Read/write<br />

            	R	FC_READONLY	Read-only<br />

            	S	FC_SYSTEM	System<br />

            	V	FA_VOLUME	Search for the DOS volume label and exclude all other files<br />

            	To specify more than one constant, you can either add attributes together, as in FC_SYSTEM + FC_HIDDEN, or use the _Or() operator, as in _Or(FC_SYSTEM, FC_HIDDEN).<br />
            To specify more than one string, simply concatenate them, as in "SH."
        </param>
      <returns>
            A number that represents the file attribute specified.<br />
            This number could represent two or more file attributes added together.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetFMask(System.String)">
      <summary>
            Prepare a file specification for wildcard searching.
        </summary>
      <param name="cString">The name of a drive and/or directory and/or file.</param>
      <returns>
            If <paramref name="cString" /> ends with ":" or "\", the modified <paramref name="cString" /> +"*.*" is returned; otherwise <paramref name="cString" /> is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetMacroCompiler">
      <summary>
            Get the type of the class that is used to compile macros
            </summary>
      <returns>The type of the currently defined MacroCompiler. This may be NULL if no type has been set yet and no macros have been compiled.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetMimType(System.String)">
      <summary>This function is not implemented yet</summary>
    </member>
    <member name="M:XSharp.Core.Functions.GetNatDLL">
      <summary>
            Get the current DLL for nation-dependent operations and messages.
        </summary>
      <returns>
            The name of the current nation-dependent DLL.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetPartialEnumName(System.String,System.Type)"></member>
    <member name="M:XSharp.Core.Functions.GetPMExt">
      <summary>
            Returns a string representing the evening extension for time strings in 12-hour format.
        </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetSQLProperty(System.String)"></member>
    <member name="M:XSharp.Core.Functions.GetTimeSep">
      <summary>
            Return the current separation character used in time strings.
        </summary>
      <returns>
            The ASCII value of the current time separator (the character being used to separate hours, minutes and seconds in time strings).  Since the default time separator is a colon (:), GetTimeSep() returns 58 by default.  Note that you can use the Chr() function to convert this return value to a character.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetTimeZoneDiff">
      <summary>
            Returns TimeZone difference for current timezone in Hours
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.GetYield"></member>
    <member name="M:XSharp.Core.Functions.HardCR(System.String)">
      <summary>
            Replace all soft carriage returns (Chr(141)) in a string with hard carriage returns (Chr(13)).
        </summary>
      <param name="cString">The string to convert.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Hex2C(System.String)">
      <summary></summary>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.HiByte(System.UInt16)">
      <summary>
            Return the high-order (leftmost) byte in a number.
        </summary>
      <param name="wValue">The number whose high-order byte you want to get.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.HiWord(System.UInt32)">
      <summary>
            Return the high-order (leftmost) word in a number.
        </summary>
      <param name="dwValue">The number whose high-order word you want to get.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.I2Bin(System.Int16)">
      <summary>
            Convert a short integer to a string containing a 16-bit signed integer.
        </summary>
      <param name="siValue">The value to convert.  Decimal digits are truncated.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Instr(System.String,System.String)">
      <summary>
            Indicate whether a substring is contained in a string.
        </summary>
      <param name="cSearch">The substring to search for.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            TRUE if the substring was found; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsAlNum(System.String)">
      <summary>
            Determine if the leftmost character in a string is alphanumeric.
        </summary>
      <param name="pszString">The string to examine.</param>
      <returns>
            TRUE if the first character in <paramref name="pszString" /> is either alphabetic or numeric; FALSE if the string begins with any character other than a number or letter.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsAlpha(System.String)">
      <summary>
            Determine if the leftmost character in a string is alphabetic.
        </summary>
      <param name="pszString">The string to examine.</param>
      <returns>
            TRUE if the first character in <paramref name="pszString" /> is alphabetic; FALSE if the string begins with a digit or any other non-alphabetic character.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsAlphaNum(System.String)">
      <summary>Determine if the leftmost character in a string is alphanumeric..</summary>
      <param name="cSource">The string to examine.</param>
      <returns>TRUE if the first character is either alphabetic or numeric otherwise FALSE.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsBDigit(System.String)">
      <summary>
            Determine if the leftmost character in a string is a binary digit (0 or 1).
        </summary>
      <param name="pszString">The string to examine.</param>
      <returns>
            TRUE if the first character of the string is 0 or 1; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsDigit(System.String)">
      <summary>
            Determine if the leftmost character in a string is a digit (that is, a numeric digit between 0 and 9).
        </summary>
      <param name="pszString">The string to examine.</param>
      <returns>
            TRUE if the first character of the string is a number from 0 to 9; otherwise; FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsLower(System.String)">
      <summary>
            Determine if the leftmost character in a string is a lowercase letter.
        </summary>
      <param name="pszString">The string to examine.</param>
      <returns>
            TRUE if the first character of the string is a lowercase letter; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsRunningOnWindows"></member>
    <member name="M:XSharp.Core.Functions.IsSpace(System.String)">
      <summary>
            Determine if the leftmost character in a string is a blank (that is, Chr(9) through Chr(13) or Chr(32)).
        </summary>
      <param name="pszString">The string to examine.</param>
      <returns>
            TRUE if the first character is blank; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsUpper(System.String)">
      <summary>
            Determine if the leftmost character in a string is uppercase.
        </summary>
      <param name="pszString">The string to examine.</param>
      <returns>
            TRUE if the first character is an uppercase letter; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.IsXDigit(System.String)">
      <summary>
            Determine if the leftmost character in a string is a hex character (that is, digits from 1 through 9 and letters from A through F).
        </summary>
      <param name="pszString">The string to examine.</param>
      <returns>
            TRUE if the first character is hex; otherwise, FALSE.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.ITALIAN">
      <summary>DateFormat define</summary>
    </member>
    <member name="F:XSharp.Core.Functions.JAPANESE">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.L2Bin(System.Int32)">
      <summary>
            Convert a long integer to a string containing a 32-bit signed integer.
        </summary>
      <param name="liValue">The value to convert.  Decimal digits are truncated.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Left(System.String,System.UInt32)">
      <summary>
            Extract a substring beginning with the first character in a string.
        </summary>
      <param name="cString">The string from which to extract characters.</param>
      <param name="dwCount">The number of characters to extract.</param>
      <returns>
            The leftmost <paramref name="dwCount" /> characters of <paramref name="cString" />.<br />
            If <paramref name="dwCount" /> is negative or 0, Left() returns a NULL_STRING.<br />
            If <paramref name="dwCount" /> is larger than the length of the string, Left() returns the entire string.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Like(System.String,System.String)">
      <summary>Determine if a string matches a wildcard pattern (like the wildcard pattern for the DIR command in the OS).</summary>
      <param name="sWildCard">The wildcard to use. '*' matches 0 or more characters until the next non-wildcard character, '?' matches any character, all other characters must match exactly.</param>
      <param name="sSource">The string to examine.</param>
    </member>
    <member name="M:XSharp.Core.Functions.LoByte(System.UInt16)">
      <summary>
            Return the low-order (rightmost) byte in a number.
        </summary>
      <param name="wValue">The number whose low-order byte you want to get.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.LockTries">
      <summary></summary>
      <param name="n"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.LockTries(System.UInt32)">
      <summary></summary>
      <param name="n"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Logic2Bin(System.Boolean)">
      <summary>
            Convert a logical value to a string containing an 8-bit logical value.
        </summary>
      <param name="lValue">The logical value to convert.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Lower(System.String)">
      <summary>
            Convert the uppercase and mixed case characters in a string to lowercase.
        </summary>
      <param name="cString">The string to convert to lowercase.</param>
      <returns>
        <paramref name="cString" /> with all alphabetic characters converted to lowercase.<br />
            All other characters remain the same as in the original string.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.LowerA(System.String@)">
      <summary>
            Convert the uppercase and mixed case characters in a string to lowercase, changing the contents of the argument as well as the return value.
        </summary>
      <param name="cString">The string to convert to lowercase.</param>
      <returns>
        <paramref name="cString" /> with all alphabetic characters converted to lowercase.<br />
            All other characters remain the same as in the original string.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.LoWord(System.UInt32)">
      <summary>
            Return the low-order (rightmost) word in a number.
        </summary>
      <param name="dwValue">The number whose low-order word you want to get.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.LTOC(System.Boolean)">
      <summary>
            Convert a logical value to a string.
        </summary>
      <param name="lValue">The logical value to convert.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.LTrim(System.String)">
      <summary>
            Remove leading spaces from a string.
        </summary>
      <param name="cString">The string to trim.</param>
      <returns>
        <paramref name="cString" /> with the leading spaces removed.<br />
            If <paramref name="cString" /> is a NULL_STRING or all spaces, LTrim() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MakeDWord(System.UInt16,System.UInt16)">
      <summary>
            Create a DWORD from two words
        </summary>
      <param name="wLow">The number you want to have in the Low word of the Dword</param>
      <param name="wHigh">The number you want to have in the High word of the Dword</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.MakeLong(System.UInt16,System.UInt16)">
      <summary>
            Create a long from two words
        </summary>
      <param name="wLow">The number you want to have in the Low word of the Long</param>
      <param name="wHigh">The number you want to have in the High word of the Long</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.MakeShort(System.Byte,System.Byte)">
      <summary>
            Create a Short from two bytes
        </summary>
      <param name="bLow">The number you want to have in the Low byte of the Short</param>
      <param name="bHigh">The number you want to have in the High byte of the Short</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.MakeWord(System.Byte,System.Byte)">
      <summary>
            Create a Short from two bytes
        </summary>
      <param name="bLow">The number you want to have in the Low byte of the Word</param>
      <param name="bHigh">The number you want to have in the High byte of the Word</param>
      <returns></returns>
    </member>
    <member name="F:XSharp.Core.Functions.MDY">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.MemLines(System.String)">
      <summary>
            Count the number of lines in a string or memo field.
        </summary>
      <param name="cString">The string in which to count.</param>
      <returns>
            The number of lines in <paramref name="cString" />, depending on the <paramref name="nLineLength" />, the <paramref name="nTabSize" />, and whether word wrapping is on or off.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MemoLine(System.String,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
      <summary>
            Extract a line of text from a string.
        </summary>
      <param name="cString">The string from which to extract a line of text.</param>
      <param name="nLineLength">
            The number of characters per line.<br />
            This can be a value between 4 and 254.<br />
            The default is 79.
        </param>
      <param name="nLineNumber">
            The line number to extract.<br />
            The default is 1.
        </param>
      <param name="nTabSize">
            The number of characters to insert when the user presses Tab.<br />
            If <paramref name="nTabSize" /> is not specified, 4 spaces are inserted.<br />
            If <paramref name="nTabSize" /> is greater than or equal to <paramref name="nLineLength" />, the tab size is automatically converted to <paramref name="nLineLength" /> minus 1.
        </param>
      <param name="lWrap">
            TRUE toggles word wrap on; FALSE toggles it off.<br />
            The default is TRUE.
        </param>
      <returns>
            The line of text specified by <paramref name="nLineNumber" /> in <paramref name="cString" />.<br />
            If the line has fewer characters than the indicated length, the return value is padded with blanks.<br />
            If the line number is greater than the total number of lines in <paramref name="cString" />, MemoLine() returns a NULL_STRING.
            If <paramref name="lWrap" /> is TRUE and the indicated line length breaks the line in the middle of a word, that word is not included as part of the return value but shows up at the beginning of the next line extracted with MemoLine().
            If <paramref name="lWrap" /> is FALSE, MemoLine() returns only the number of characters specified by the line length.<br />
            The next line extracted by MemoLine() begins with the character following the next hard carriage return, and all intervening characters are not processed.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MemoRead(System.String)">
      <summary>
            Return the contents of a text file as a string.
        </summary>
      <param name="cFileName">The name of the text file to read from disk, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.</param>
      <returns>
            The contents of the file.<br />
            The maximum file size that can be read is MAX_ALLOC bytes — the maximum size of a string.
            If <paramref name="cFileName" /> does not exist, MemoRead() returns a NULL_STRING.<br />
            If it exists, this function attempts to open the file in shared mode and, if successful, it proceeds.<br />
            If access is denied because, for example, another process has exclusive use of the file, MemoRead() returns a NULL_STRING and NetErr() is set to TRUE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MemoReadBinary(System.String)">
      <summary>
            Return the contents of a binary file as an array of bytes.
            Use this function in stead of MemoRead() to read the contents of a binary file.
            </summary>
      <param name="cFile">The name of the binary file to read from disk, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed</param>
      <returns>The file as an array of bytes</returns>
    </member>
    <member name="M:XSharp.Core.Functions.MemoWrit(System.String,System.Byte[])">
      <summary>
            Write a string to a disk file.
        </summary>
      <param name="cFileName">
            The name of the target disk file, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />

            	If <paramref name="cFileName" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, MemoWrit() returns FALSE and NetErr() is set to TRUE.
        </param>
      <param name="cString">
            The string to write to <paramref name="cFileName" />.
        </param>
      <returns>
            TRUE if the writing operation is successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MemoWrit(System.String,System.String)">
      <summary>
            Write a string to a disk file.
        </summary>
      <param name="cFileName">
            The name of the target disk file, including an optional drive, directory, and extension.  SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and directory as part of the file name.  No extension is assumed.<br />

            	If <paramref name="cFileName" /> does not exist, it is created.<br />
            If it exists, this function attempts to open the file in exclusive mode and, if successful, the file is overwritten without warning or error.<br />
            If access is denied because, for example, another process is using the file, MemoWrit() returns FALSE and NetErr() is set to TRUE.
        </param>
      <param name="cString">
            The string to write to <paramref name="cFileName" />.
        </param>
      <returns>
            TRUE if the writing operation is successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MemoWritBinary(System.String,System.Byte[])">
      <summary>
            Write binary data  o a disk file. Use this function for binary files instead of MemoWrit(). This day may be read with MemoReadBinary().
            </summary>
      <param name="cFile">The name of the target disk file, including an optional drive, directory, and extension.
            SetDefault() and SetPath() settings are ignored; the Windows default is used unless you specify a drive and
            directory as part of the file name.  No extension is assumed.
            If the file does not exist, it is created.  If it exists, this function attempts to open the file in exclusive
            mode and, if successful, the file is overwritten without warning or error.  If access is denied because,
            for example, another process is using the file, MemoWrit() returns FALSE and NetErr() is set to TRUE.</param>
      <param name="bData">The contents to write</param>
      <returns>TRUE if the writing operation is successful; otherwise, FALSE</returns>
    </member>
    <member name="M:XSharp.Core.Functions.MLCount1(System.String)">
      <summary>
            Count the number of lines in a string.
        </summary>
      <param name="cString">The string to count.</param>
      <returns>
            The number of lines in <paramref name="cString" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MLcToPos(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
      <summary>
            Return the position of a character in a formatted string.
        </summary>
      <param name="cText">A string.</param>
      <param name="nWidth">
            The length of each line after <paramref name="cText" /> is formatted.
        </param>
      <param name="nLine">The line number in the formatted text, starting from the top at 1.</param>
      <param name="nCol">The column number in the formatted text, starting from the left at 0.</param>
      <param name="nTabSize">
            The number of characters to insert when the user presses Tab.<br />
            If <paramref name="nTabSize" /> is not specified, 4 spaces are inserted.
        </param>
      <param name="lWrap">
            The word-wrap flag.<br />
            The default is TRUE.
        </param>
      <returns>
            The byte position of the character within <paramref name="cText" />, counting from 1.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MLine(System.String,System.UInt32)">
      <summary>
            Extract a line of text from a string, specifying an optional offset argument.
        </summary>
      <param name="cString">The string that contains the line of text.</param>
      <param name="nLine">The line number to extract.</param>
      <param name="nOffset">
            The position from which to extract characters.<br />
            An offset of 0 corresponds to the first byte in <paramref name="cString" />.<br />
            This is the default.<br />
            Alternatively, <paramref name="nOffset" /> may be passed by reference (preceded by an @) in which case, after the function call, it will contain the size of the returned line.
        </param>
      <returns>
            The specified line.<br />
            If the specified line does not exist, the return value is a NULL_STRING.<br />
            A new line begins when a hard-carriage return is encountered.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MLine(System.String,System.UInt32,System.UInt32)">
      <summary>
            Extract a line of text from a string, specifying an optional offset argument.
        </summary>
      <param name="cString">The string that contains the line of text.</param>
      <param name="nLine">The line number to extract.</param>
      <param name="nOffset">
            The position from which to extract characters.<br />
            An offset of 0 corresponds to the first byte in <paramref name="cString" />.<br />
            This is the default.<br />
            Alternatively, <paramref name="nOffset" /> may be passed by reference (preceded by an @) in which case, after the function call, it will contain the size of the returned line.
        </param>
      <returns>
            The specified line.<br />
            If the specified line does not exist, the return value is a NULL_STRING.<br />
            A new line begins when a hard-carriage return is encountered.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MLine(System.String,System.UInt32,System.UInt32@)">
      <summary>
            Extract a line of text from a string, specifying an optional offset argument.
        </summary>
      <param name="cString">The string that contains the line of text.</param>
      <param name="nLine">The line number to extract.</param>
      <param name="nOffset">
            The position from which to extract characters.<br />
            An offset of 0 corresponds to the first byte in <paramref name="cString" />.<br />
            This is the default.<br />
            Alternatively, <paramref name="nOffset" /> may be passed by reference (preceded by an @) in which case, after the function call, it will contain the size of the returned line.
        </param>
      <returns>
            The specified line.<br />
            If the specified line does not exist, the return value is a NULL_STRING.<br />
            A new line begins when a hard-carriage return is encountered.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MLine3(System.String,System.UInt32,System.UInt32@)">
      <summary>
            Extract a line of text from a string, specifying a required offset argument.
        </summary>
      <param name="cString">The string that contains the line of text.</param>
      <param name="dwLine">The line number to extract.</param>
      <param name="ptrN">
        <paramref name="ptrN" /> must be a DWORD variable that is passed by reference.<br />
            At the end of the function call, <paramref name="ptrN" /> will contain the offset of the last character of the returned line (cLineString).
        </param>
      <returns>
            The specified line.<br />
            If the specified line does not exist, the return value is NULL_STRING and <paramref name="ptrN" /> contains a 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.MLPos2(System.String,System.UInt32)">
      <summary>
            Determine the position of a line in a string.
        </summary>
      <param name="cString">A string.</param>
      <param name="dwLine">The line number.</param>
      <returns>
            The character position of <paramref name="dwLine" /> in <paramref name="cString" />.<br />
            If <paramref name="dwLine" /> is greater than the number of lines in <paramref name="cString" />, MLPos2() returns the length of <paramref name="cString" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Mod(System.Double,System.Double)">
      <summary>
            Return the remainder of one number divided by another number.
        </summary>
      <param name="nDividend">The dividend of the division operation.</param>
      <param name="nDivisor">The divisor of the division operation.</param>
      <returns>
            A number representing the remainder of <paramref name="nDividend" /> divided by <paramref name="nDivisor" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Mod(System.Int32,System.Int32)">
      <summary>
            Return the remainder of one number divided by another number.
        </summary>
      <param name="nDividend">The dividend of the division operation.</param>
      <param name="nDivisor">The divisor of the division operation.</param>
      <returns>
            A number representing the remainder of <paramref name="nDividend" /> divided by <paramref name="nDivisor" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Mod(System.Int64,System.Int64)">
      <summary>
            Return the remainder of one number divided by another number.
        </summary>
      <param name="nDividend">The dividend of the division operation.</param>
      <param name="nDivisor">The divisor of the division operation.</param>
      <returns>
            A number representing the remainder of <paramref name="nDividend" /> divided by <paramref name="nDivisor" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ModuleName(System.Boolean)"></member>
    <member name="M:XSharp.Core.Functions.NetErr">
      <summary>
            Detect a concurrency conflict.
        </summary>
      <param name="lNewError">Sets the value returned by NetErr() to either TRUE or FALSE.  Setting NetErr() allows the runtime error handler to control the way certain concurrency control errors are handled.</param>
      <returns>
            TRUE if a concurrency conflict occurs or if programmatically set to TRUE via the <paramref name="lNewError" /> argument; otherwise, FALSE.<br />
            The initial value is FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.NetErr(System.Boolean)">
      <summary>
            Detect a concurrency conflict.
        </summary>
      <param name="lNewError">Sets the value returned by NetErr() to either TRUE or FALSE.  Setting NetErr() allows the runtime error handler to control the way certain concurrency control errors are handled.</param>
      <returns>
            TRUE if a concurrency conflict occurs or if programmatically set to TRUE via the <paramref name="lNewError" /> argument; otherwise, FALSE.<br />
            The initial value is FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.NetName">
      <summary>
            Identify the current workstation.
        </summary>
      <returns>
            The workstation ID as a string up to 15 characters in length.<br />
            If the workstation ID was never set or the application is not operating under Microsoft LAN Manager, it returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.NToCDoW(System.UInt32)">
      <summary>
            Convert the number that identifies a day into the name of the day.
        </summary>
      <param name="dwDayNum">A number from 1 to 7.</param>
      <returns>
            The name of the day that corresponds to <paramref name="dwDayNum" />, where Sunday is 1, Monday is 2, and so on.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.NToCMonth(System.UInt32)">
      <summary>
            Convert the number that identifies a month into the name of the month.
        </summary>
      <param name="dwMonthNum">A number from 1 to 12.</param>
      <returns>
            The name of the month that corresponds to <paramref name="dwMonthNum" />, where January is 1, February is 2, and so on through December, which is 12.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Occurs(System.String,System.String)">
      <summary>
            Return the number of times a substring occurs in a string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.  (To specify an offset, use Occurs3()).</param>
      <returns>
            The number of times that <paramref name="cSearch" /> appears in <paramref name="cTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Occurs2(System.String,System.String)">
      <summary>
            Return the number of times a substring occurs in a string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.  (To specify an offset, use Occurs3()).</param>
      <returns>
            The number of times that <paramref name="cSearch" /> appears in <paramref name="cTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Occurs3(System.String,System.String,System.UInt32)">
      <summary>
            Return the number of times a substring occurs in a string, starting at a specified position.
        </summary>
      <param name="cSearch">The substring to search for.</param>
      <param name="cTarget">The string in which to search.</param>
      <param name="dwOffset">
            The position in the string at which to start searching.<br />
            A value of zero (0) specifies the first byte.
        </param>
      <returns>
            The number of times that <paramref name="cSearch" /> appears in <paramref name="cTarget" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Oem2Ansi(System.Byte[])">
      <summary>
            Convert an array of OEM characters to ANSI characters.
            </summary>
      <param name="bSource">A byte array that contains the string to convert</param>
    </member>
    <member name="M:XSharp.Core.Functions.Oem2Ansi(System.Byte[],System.Int32)">
      <summary>
            Convert an array of OEM characters to ANSI characters.
            </summary>
      <param name="iLen">The number of characters to convert</param>
      <param name="bSource">A byte array that contains the string to convert</param>
      <returns>String converted to Ansi</returns>
    </member>
    <member name="M:XSharp.Core.Functions.Oem2Ansi(System.String)">
      <summary>
            Convert a string of OEM characters to ANSI characters.
        </summary>
      <param name="cOemString">A source string of OEM characters.</param>
      <returns>
            A converted string of ANSI characters.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Oem2AnsiA(System.Byte[])">
      <summary>Represents text as a sequence of UTF-16 code units.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
      <param name="bSource">A byte array that contains the string to convert</param>
    </member>
    <member name="M:XSharp.Core.Functions.Oem2AnsiA(System.String@)">
      <summary>
            Convert a string of OEM characters to ANSI characters, changing the contents of the argument as well as the return value.
        </summary>
      <param name="cOemString">A source string of OEM characters.</param>
      <returns>
            A converted string of ANSI characters.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Oem2AnsiBuff(System.Byte[],System.Byte[],System.UInt32)">
      <summary>
            Convert a specified number of OEM characters in a source buffer to a buffer of corresponding, if any, ANSI characters.
        </summary>
      <param name="pszTarget">A pointer to the buffer that will contain the converted string.</param>
      <param name="pszSource">A pointer to the buffer that contains the string to convert.</param>
      <param name="dwCount">The number of characters to convert.</param>
      <returns>
            A pointer to the buffer that contains the converted string.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.OS">
      <summary>
            Return the operating system name.
        </summary>
      <param name="lExtended">This can contain anything.</param>
      <returns>
            OS() returns the name of the disk operating system under which the current workstation is operating, followed by the version number.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.OS(System.Boolean)">
      <summary>
            Return the operating system name.
        </summary>
      <param name="lExtended">This can contain anything.</param>
      <returns>
            OS() returns the name of the disk operating system under which the current workstation is operating, followed by the version number.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcFile">
      <summary>
            Return the name of the activated module.
        </summary>
      <param name="wActivation">
            Specifies which activation to query.<br />
            A value of 0 refers to the current activation, a value of 1 refers to the previous activation, and so on.<br />
            The default value is 0.
        </param>
      <returns>
            For the current activation, ProcFile() returns the name of the current module.<br />
            For a previous activation, ProcFile() returns the name of the module that invoked the current module.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcFile(System.Int32)">
      <summary>
            Return the name of the activated module.
        </summary>
      <param name="wActivation">
            Specifies which activation to query.<br />
            A value of 0 refers to the current activation, a value of 1 refers to the previous activation, and so on.<br />
            The default value is 0.
        </param>
      <returns>
            For the current activation, ProcFile() returns the name of the current module.<br />
            For a previous activation, ProcFile() returns the name of the module that invoked the current module.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcFile(System.UInt32)">
      <summary>
            Return the name of the activated module.
        </summary>
      <param name="wActivation">
            Specifies which activation to query.<br />
            A value of 0 refers to the current activation, a value of 1 refers to the previous activation, and so on.<br />
            The default value is 0.
        </param>
      <returns>
            For the current activation, ProcFile() returns the name of the current module.<br />
            For a previous activation, ProcFile() returns the name of the module that invoked the current module.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcLine">
      <summary>
            Return the source line number of the last line executed in an activated entity.
        </summary>
      <param name="dwActivation">
            Specifies which activation to query.  0 refers to the current activation, 1 refers to the previous activation, and so on.<br />
            The default value is 0.
        </param>
      <returns>
            For the current activation, ProcLine() returns the number of the current line.<br />
            For a previous activation, ProcLine() returns the number of the line that invoked the procedure, function, or method in which ProcLine() is invoked.
            Since X# is not file-based, the line number is relative to the beginning of the activated entity and not relative to the beginning of the source file containing the entity.<br />
            A line can include a comment, a blank line, a user defined command, or a continued line.<br />
            A multistatement line is counted as a single line.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcLine(System.Int32)">
      <summary>
            Return the source line number of the last line executed in an activated entity.
        </summary>
      <param name="dwActivation">
            Specifies which activation to query.  0 refers to the current activation, 1 refers to the previous activation, and so on.<br />
            The default value is 0.
        </param>
      <returns>
            For the current activation, ProcLine() returns the number of the current line.<br />
            For a previous activation, ProcLine() returns the number of the line that invoked the procedure, function, or method in which ProcLine() is invoked.
            Since X# is not file-based, the line number is relative to the beginning of the activated entity and not relative to the beginning of the source file containing the entity.<br />
            A line can include a comment, a blank line, a user defined command, or a continued line.<br />
            A multistatement line is counted as a single line.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcLine(System.UInt32)">
      <summary>
            Return the source line number of the last line executed in an activated entity.
        </summary>
      <param name="dwActivation">
            Specifies which activation to query.  0 refers to the current activation, 1 refers to the previous activation, and so on.<br />
            The default value is 0.
        </param>
      <returns>
            For the current activation, ProcLine() returns the number of the current line.<br />
            For a previous activation, ProcLine() returns the number of the line that invoked the procedure, function, or method in which ProcLine() is invoked.
            Since X# is not file-based, the line number is relative to the beginning of the activated entity and not relative to the beginning of the source file containing the entity.<br />
            A line can include a comment, a blank line, a user defined command, or a continued line.<br />
            A multistatement line is counted as a single line.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcName">
      <summary>
            Return the name of an activated entity.
        </summary>
      <param name="wActivation">
            Specifies which activation to query.<br />
            A value of 0 refers to the current activation, a value of 1 refers to the previous activation, and so on.<br />
            The default value is 0.
        </param>
      <returns>
            For the current activation, ProcName() returns the name of the current procedure, function, or method.<br />
            For a previous activation, ProcName() returns the name of the procedure, function, or method that invoked the current entity.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcName(System.Int32)">
      <summary>
            Return the name of an activated entity.
        </summary>
      <param name="wActivation">
            Specifies which activation to query.<br />
            A value of 0 refers to the current activation, a value of 1 refers to the previous activation, and so on.<br />
            The default value is 0.
        </param>
      <returns>
            For the current activation, ProcName() returns the name of the current procedure, function, or method.<br />
            For a previous activation, ProcName() returns the name of the procedure, function, or method that invoked the current entity.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProcName(System.Int32,System.Boolean)"></member>
    <member name="M:XSharp.Core.Functions.Proper(System.String)">
      <summary>
            Change the first character of each word to uppercase
        </summary>
      <param name="cText">A string of text.</param>
      <returns>
        <paramref name="cText" /> with uppercase letters at the beginning of each word.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ProperA(System.String@)">
      <summary>
            Capitalize a proper name correctly, changing the contents of the argument as well as the return value.
        </summary>
      <param name="cName">A proper name.</param>
      <returns>
        <paramref name="cName" /> with uppercase letters at the beginning of each word.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Ptr2Bin(System.IntPtr)">
      <summary>
            Convert a intptr to a string
            </summary>
    </member>
    <member name="M:XSharp.Core.Functions.QPEncString(System.String)">
      <summary></summary>
      <param name="cIn"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.RAt(System.String,System.String)">
      <summary>
            Return the position of the last occurrence of a substring within a string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.  (To specify an offset, use RAt3()).</param>
      <returns>
            The position of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, RAt() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.RAt2(System.String,System.String)">
      <summary>
            Return the position of the last occurrence of a substring within a string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.  (To specify an offset, use RAt3()).</param>
      <returns>
            The position of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, RAt() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.RAt3(System.String,System.String,System.UInt32)">
      <summary>
            Return the position of the last occurrence of a substring within a string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.</param>
      <param name="dwOffSet">
            The position in the string at which to start searching.<br />
            A value of zero (0) specifies the first byte.
        </param>
      <returns>
            The position of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, RAt3() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.RAtLine(System.String,System.String)">
      <summary>
            Return the line number of the last occurrence of a substring within a multiline string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            The position of the last occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, RAtLine() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.RATLine2(System.String,System.String)">
      <summary>
            Return the line number of the last occurrence of a substring within a multiline string.
        </summary>
      <param name="cSearch">The substring for which to search.</param>
      <param name="cTarget">The string in which to search.</param>
      <returns>
            The position of the last occurrence of <paramref name="cSearch" /> within <paramref name="cTarget" />.<br />
            If <paramref name="cSearch" /> is not found, RAtLine2() returns 0.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.ReadOsVersionFromRegistry(System.Boolean)"></member>
    <member name="M:XSharp.Core.Functions.Real42Bin(System.Single)">
      <summary>
            Convert a Real4 value to a string containing a 32-bit floating point number.
        </summary>
      <param name="r4Value">The value to convert.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Real82Bin(System.Double)">
      <summary>
            Convert a Real8 value to a string containing an 8-byte floating point number.
        </summary>
      <param name="r8Value">The value to convert.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.RegisterFileSearch(XSharp.FileSearcher)">
      <summary>
            Register Worker function for File Search API.
            </summary>
      <param name="newWorker">Function that implements the worker. Must implement the FileSearcher delegate, so take STRING parameter and return a STRING</param>
      <returns>
            current Worker function
            </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Repl(System.String,System.UInt32)">
      <summary>
            Repeat a string a specified number of times.
        </summary>
      <param name="cString">The string to repeat.</param>
      <param name="dwCount">
            The number of times to repeat <paramref name="cString" />, up to a maximum of MAX_ALLOC. Specifying a value of zero returns a NULL_STRING.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Replicate(System.String,System.UInt32)">
      <summary>
            Repeat a string a specified number of times.
        </summary>
      <param name="cString">The string to repeat.</param>
      <param name="dwCount">
            The number of times to repeat <paramref name="cString" />, up to a maximum of MAX_ALLOC. Specifying a value of zero returns a NULL_STRING.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.RGB(System.Byte,System.Byte,System.Byte)">
      <summary>
            Get a particular Windows color.
        </summary>
      <param name="bRed">The amount of red in the color, as a number from 0 to 255.</param>
      <param name="bGreen">The amount of green in the color, as a number from 0 to 255.</param>
      <param name="bBlue">The amount of blue in the color, as a number from 0 to 255.</param>
      <returns>
            The number that Windows uses to identify the color described.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Right(System.String,System.UInt32)">
      <summary>
            Return a substring beginning with the rightmost character.
        </summary>
      <param name="cString">The string from which to extract characters.</param>
      <param name="dwCount">The number of characters to extract.</param>
      <returns>
            The rightmost <paramref name="dwCount" /> characters of <paramref name="cString" />.<br />
            If <paramref name="dwCount" /> is 0, Right() returns a NULL_STRING.<br />
            A negative value is not allowed since a WORD cannot be negative.<br />
            If <paramref name="dwCount" />  larger than the length of the string, Right() returns <paramref name="cString" />.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.RTrim(System.String)">
      <summary>
            Remove trailing spaces from a string.
        </summary>
      <param name="cString">The string to trim.</param>
      <returns>
        <paramref name="cString" /> with the trailing spaces removed.<br />
            If <paramref name="cString" /> is a NULL_STRING or all spaces, RTrim() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SClone(System.String)"></member>
    <member name="F:XSharp.Core.Functions.SCOPE_BOTH">
      <summary>
            Scope value for <c>DbScope()</c>, <c>DbSetScope()</c> and <c>DbClearScope()</c>.
        </summary>
    </member>
    <member name="F:XSharp.Core.Functions.SCOPE_BOTTOM">
      <summary>
            Scope value for <c>DbScope()</c>, <c>DbSetScope()</c> and <c>DbClearScope()</c>.
        </summary>
    </member>
    <member name="F:XSharp.Core.Functions.SCOPE_TOP">
      <summary>
            Scope value for <c>DbScope()</c>, <c>DbSetScope()</c> and <c>DbClearScope()</c>.
        </summary>
    </member>
    <member name="M:XSharp.Core.Functions.Seconds">
      <summary>
            Return the number of seconds that have elapsed since midnight.
        </summary>
      <returns>
            The number of seconds that have elapsed since midnight in the form seconds.hundredths.  Numbers range from 0 to 86,399.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Secs(System.String)">
      <summary>
            Return a time as the number of seconds that have elapsed since midnight.
        </summary>
      <param name="cTime">The time to convert to seconds, in the form hh:mO:ss.</param>
      <returns>
            The number of seconds from midnight to the time specified.<br />
            The return value cannot be greater than 86,400, the number of seconds in a day.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetAMExt">
      <summary>
            Set the morning extension for time strings in 12-hour format.
        </summary>
      <param name="cAMExt">
            The extension to be used for time strings that occur in the morning hours.<br />
            This string can be up to eight characters in length — additional characters are ignored.<br />
            The initial default depends on SetInternational(), which you can refer to for more information.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetAMExt(System.String)">
      <summary>
            Set the morning extension for time strings in 12-hour format.
        </summary>
      <param name="cAMExt">
            The extension to be used for time strings that occur in the morning hours.<br />
            This string can be up to eight characters in length — additional characters are ignored.<br />
            The initial default depends on SetInternational(), which you can refer to for more information.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetAmPm">
      <summary>
            Return and optionally change the setting that determines whether time strings are in 12-hour or 24-hour format.
        </summary>
      <param name="lNewSetting">
            TRUE indicates 12-hour format.  FALSE indicates 24-hour format.<br />
            The initial default depends on SetInternational(), which you can refer to for more information.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetAMPM() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetAmPm(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether time strings are in 12-hour or 24-hour format.
        </summary>
      <param name="lNewSetting">
            TRUE indicates 12-hour format.  FALSE indicates 24-hour format.<br />
            The initial default depends on SetInternational(), which you can refer to for more information.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetAMPM() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetAnsi">
      <summary>
            Return and optionally change the setting that determines whether database files are created using ANSI or OEM format and whether certain text file operations convert between the two character sets.
        </summary>
      <param name="lNewSetting">
            TRUE specifies the ANSI format; FALSE specifies the OEM format.<br />
            If the Ansi entry in the X# section of WIN.INI is not present, an entry of Ansi=1 will be written, setting the initial default to TRUE; if this entry is set to 0, the initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetAnsi() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetAnsi(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether database files are created using ANSI or OEM format and whether certain text file operations convert between the two character sets.
        </summary>
      <param name="lNewSetting">
            TRUE specifies the ANSI format; FALSE specifies the OEM format.<br />
            If the Ansi entry in the X# section of WIN.INI is not present, an entry of Ansi=1 will be written, setting the initial default to TRUE; if this entry is set to 0, the initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetAnsi() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetBeep">
      <summary>
            Return and optionally change the setting that determines whether a beep is sounded by the error system when an error occurs.
        </summary>
      <param name="lNewSetting">
            TRUE turns beeping on; FALSE turns it off.<br />
            If the Beep entry in the Windows section of WIN.INI is not present or is set to yes, the initial default is TRUE; if this entry is set to no, the initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetBeep() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetBeep(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether a beep is sounded by the error system when an error occurs.
        </summary>
      <param name="lNewSetting">
            TRUE turns beeping on; FALSE turns it off.<br />
            If the Beep entry in the Windows section of WIN.INI is not present or is set to yes, the initial default is TRUE; if this entry is set to no, the initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetBeep() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetCentury">
      <summary>
            Return and optionally change the setting that determines whether to include or omit century digits in the date format.
        </summary>
      <param name="lNewSetting">
            TRUE includes century digits, meaning the date format contains four digits for the year and can include a century other than 19xx.  FALSE omits century digits, meaning the date format contains only two digits for the year.<br />
            This means that century digits of dates are not displayed and cannot be input.<br />
            The initial default is TRUE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetCentury() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetCentury(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether to include or omit century digits in the date format.
        </summary>
      <param name="lNewSetting">
            TRUE includes century digits, meaning the date format contains four digits for the year and can include a century other than 19xx.  FALSE omits century digits, meaning the date format contains only two digits for the year.<br />
            This means that century digits of dates are not displayed and cannot be input.<br />
            The initial default is TRUE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetCentury() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetCollation">
      <summary>
            Return and optionally change the setting that determines the internal collation routine used for string comparisons.
        </summary>
      <param name="symNewSetting">
            The collation mode to use.<br />
            The available modes are #Windows (the default) and #Clipper.
        </param>
      <returns>
            If <paramref name="symNewSetting" /> is not specified, SetCollation() returns the current setting.<br />
            If <paramref name="symNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetCollation(System.String)">
      <summary>
            Return and optionally change the setting that determines the internal collation routine used for string comparisons.
        </summary>
      <param name="symNewSetting">
            The collation mode to use.<br />
            The available modes are #Windows (the default) and #Clipper.
        </param>
      <param name="cCollation">The collation mode to use. The available modes are "Windows" (the default),  "Clipper", "Unicode" and "Ordinal". </param>
      <returns>
            If <paramref name="symNewSetting" /> is not specified, SetCollation() returns the current setting.<br />
            If <paramref name="symNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetCompatible"></member>
    <member name="M:XSharp.Core.Functions.SetCompatible(System.Boolean)"></member>
    <member name="M:XSharp.Core.Functions.SetCpu">
      <summary>
            Return and optionally change the setting that determines the type of central processor you have.
        </summary>
      <param name="nNewSetting">
            A value, like 386 or 486, for the new setting.<br />
            The initial default is the numeric identifier of your central processor.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetCPU() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetCpu(System.UInt32)">
      <summary>
            Return and optionally change the setting that determines the type of central processor you have.
        </summary>
      <param name="nNewSetting">
            A value, like 386 or 486, for the new setting.<br />
            The initial default is the numeric identifier of your central processor.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetCPU() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDateCountry">
      <summary>
            Return and optionally change the setting that determines the X# date format by selecting from a list of constants with corresponding date formats.
        </summary>
      <param name="dwNewSetting">One of the following constants which initializes the corresponding date format (the number of characters in the year value is control by SetCentury()):</param>
      <returns>
            If <paramref name="dwNewSetting" /> is not specified, SetDateCountry() returns one of the numeric values described above indicating the current date and country setting.<br />
            If <paramref name="dwNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDateCountry(System.UInt32)">
      <summary>
            Return and optionally change the setting that determines the X# date format by selecting from a list of constants with corresponding date formats.
        </summary>
      <param name="dwNewSetting">One of the following constants which initializes the corresponding date format (the number of characters in the year value is control by SetCentury()):</param>
      <returns>
            If <paramref name="dwNewSetting" /> is not specified, SetDateCountry() returns one of the numeric values described above indicating the current date and country setting.<br />
            If <paramref name="dwNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDateFormat(System.String)">
      <summary>
            Change the setting that determines the X# date format.
        </summary>
      <param name="cNewSetting">
            The new date format to be set, in a string of 37 characters or less.<br />
            The date format can be specified in a number of ways, but must contain one or more occurrences of the letters D, M, and Y (respectively).<br />
            For example:
        </param>
      <returns>
            TRUE if the argument is the same as the current setting; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDecimal">
      <summary>
            Return and optionally change the setting that determines the number of decimal places used to display numbers.
        </summary>
      <param name="nNewSetting">
            The number of decimal places to display.<br />
            The initial default is 2.<br />
            A negative value specifies that all significant digits are returned
        </param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetDecimal() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDecimal(System.UInt32)">
      <summary>
            Return and optionally change the setting that determines the number of decimal places used to display numbers.
        </summary>
      <param name="nNewSetting">
            The number of decimal places to display.<br />
            The initial default is 2.<br />
            A negative value specifies that all significant digits are returned
        </param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetDecimal() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDecimalSep">
      <summary>
            Return and optionally change the setting that determines the decimal separation character to be used in numeric-to-string conversion functions.
        </summary>
      <param name="nNewSetting">
            An ASCII code representing the new decimal separator.<br />
            The initial default is 46, which is the ASCII code for the "." character.<br />
            Possible values are ASC(".") and ASC(",").
        </param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetDecimalSep() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDecimalSep(System.UInt32)">
      <summary>
            Return and optionally change the setting that determines the decimal separation character to be used in numeric-to-string conversion functions.
        </summary>
      <param name="nNewSetting">
            An ASCII code representing the new decimal separator.<br />
            The initial default is 46, which is the ASCII code for the "." character.<br />
            Possible values are ASC(".") and ASC(",").
        </param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetDecimalSep() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDefault">
      <summary>
            Change the setting that determines the X# default drive and directory.
        </summary>
      <param name="cPathSpec">
            The default disk drive and directory.<br />
            If you specify both a drive and directory, a colon must be included after the drive letter.  (Use GetDefault() to get the current setting.)
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDefault(System.String)">
      <summary>
            Change the setting that determines the X# default drive and directory.
        </summary>
      <param name="cPathSpec">
            The default disk drive and directory.<br />
            If you specify both a drive and directory, a colon must be included after the drive letter.  (Use GetDefault() to get the current setting.)
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDefaultDir">
      <summary>
            Change the setting that determines the location of the error log file.
        </summary>
      <param name="cPathSpec">
            The disk drive and directory where you want the application to create and search for the error log file.<br />
            If you specify both a drive and directory, a colon must be included after the drive letter.<br />
            The initial default for SetDefaultDir() is the current directory.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDefaultDir(System.String)">
      <summary>
            Change the setting that determines the location of the error log file.
        </summary>
      <param name="cPathSpec">
            The disk drive and directory where you want the application to create and search for the error log file.<br />
            If you specify both a drive and directory, a colon must be included after the drive letter.<br />
            The initial default for SetDefaultDir() is the current directory.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDeleted">
      <summary>
            Return and optionally change the setting that determines whether to ignore or include records that are marked for deletion.
        </summary>
      <param name="lNewSetting">
            TRUE ignores deleted records; FALSE processes deleted records.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetDeleted() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDeleted(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether to ignore or include records that are marked for deletion.
        </summary>
      <param name="lNewSetting">
            TRUE ignores deleted records; FALSE processes deleted records.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetDeleted() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDigit">
      <summary>
            Return and optionally change the setting that determines the number of digits that will be shown to the left of the decimal point when a number is displayed.
        </summary>
      <param name="nNewSetting">
            The number of digits to show.<br />
            The initial default is 10.<br />
            A negative value indicates that only the significant whole digits to the left of the decimal point (the mantissa) are returned.<br />
            Any right padding is also suppressed.
        </param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetDigit() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDigit(System.UInt32)">
      <summary>
            Return and optionally change the setting that determines the number of digits that will be shown to the left of the decimal point when a number is displayed.
        </summary>
      <param name="nNewSetting">
            The number of digits to show.<br />
            The initial default is 10.<br />
            A negative value indicates that only the significant whole digits to the left of the decimal point (the mantissa) are returned.<br />
            Any right padding is also suppressed.
        </param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetDigit() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDigitFixed">
      <summary>
            Return and optionally change the setting that fixes the number of digits used to display numeric output.
        </summary>
      <param name="lNewSetting">
            TRUE fixes the number of digits displayed.  FALSE leaves the number of digits displayed unfixed.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetDigitFixed() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetDigitFixed(System.Boolean)">
      <summary>
            Return and optionally change the setting that fixes the number of digits used to display numeric output.
        </summary>
      <param name="lNewSetting">
            TRUE fixes the number of digits displayed.  FALSE leaves the number of digits displayed unfixed.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetDigitFixed() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetEnv(System.String,System.String)">
      <summary>
            Update or replace the contents of a DOS environment variable.
        </summary>
      <param name="cVar">The environment variable to be modified.</param>
      <param name="cValue">The new value to assign to the environment variable.</param>
      <param name="lAppend">Logical value indicating whether the new value should be appended to the old value (TRUE) or if it should replace the old value (FALSE).</param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetEnv(System.String,System.String,System.Boolean)">
      <summary>
            Update or replace the contents of a DOS environment variable.
        </summary>
      <param name="cVar">The environment variable to be modified.</param>
      <param name="cValue">The new value to assign to the environment variable.</param>
      <param name="lAppend">Logical value indicating whether the new value should be appended to the old value (TRUE) or if it should replace the old value (FALSE).</param>
      <returns>
            TRUE if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetEpoch">
      <summary>
            Return and optionally change the setting that determines how dates without century digits are interpreted.
        </summary>
      <param name="nNewSetting">
            Specifies the base year of a 100-year period in which all dates containing only two year digits are assumed to fall.<br />
            The initial default is 1900, causing dates with no century digits to be interpreted as falling within the twentieth century.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetEpoch() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetEpoch(System.UInt32)">
      <summary>
            Return and optionally change the setting that determines how dates without century digits are interpreted.
        </summary>
      <param name="nNewSetting">
            Specifies the base year of a 100-year period in which all dates containing only two year digits are assumed to fall.<br />
            The initial default is 1900, causing dates with no century digits to be interpreted as falling within the twentieth century.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetEpoch() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetErrorLog">
      <summary>
            Return and optionally change the setting that determines whether error information is written to the error log file by the default runtime error handler.
        </summary>
      <param name="lNewSetting">
            TRUE causes error information to be written to a text file, known as a X# error log file.  FALSE suppresses the recording of errors in the error log file.<br />

            	If the ErrorLog entry in the X# section of WIN.INI is not present, an entry of ErrorLog=1 will be written, setting the initial default to TRUE; if this entry is set to 0, the initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetErrorLog() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetErrorLog(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether error information is written to the error log file by the default runtime error handler.
        </summary>
      <param name="lNewSetting">
            TRUE causes error information to be written to a text file, known as a X# error log file.  FALSE suppresses the recording of errors in the error log file.<br />

            	If the ErrorLog entry in the X# section of WIN.INI is not present, an entry of ErrorLog=1 will be written, setting the initial default to TRUE; if this entry is set to 0, the initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetErrorLog() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetErrorLogFile">
      <summary>Get the name of the current errorlog file</summary>
      <returns>Current name of the error log file.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetErrorLogFile(System.String)">
      <summary>Set the name of the current errorlog file</summary>
      <param name="cNewSetting">New name of error log file </param>
      <returns>Previous name of the error log file.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetErrorStackVOFormat(System.Boolean)">
      <summary>This function allows you to enable or disable the VO compatible Errorstack format.</summary>
      <param name="lNew">Specify TRUE to enable the new format.</param>
      <returns>The current setting for the ErrorStack format.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetExact">
      <summary>
            Toggles an exact match for character string comparisons.
        </summary>
      <param name="lNewSetting">
            TRUE causes strings to be compared for length and value; FALSE causes strings to be compared by length and position only. The initial default is FALSE.<br />

            	This function is equivalent to the == operator for string evaluation and is preferred for most string evaluations.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetExact() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetExact(System.Boolean)">
      <summary>
            Toggles an exact match for character string comparisons.
        </summary>
      <param name="lNewSetting">
            TRUE causes strings to be compared for length and value; FALSE causes strings to be compared by length and position only. The initial default is FALSE.<br />

            	This function is equivalent to the == operator for string evaluation and is preferred for most string evaluations.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetExact() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetExclusive">
      <summary>
            Return and optionally change the setting that determines whether to open database files in exclusive or shared mode.
        </summary>
      <param name="lNewSetting">
            TRUE causes database files to be opened in exclusive (nonshared) mode; FALSE causes database files to be opened in shared mode.<br />
            The initial default is TRUE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetExclusive() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetExclusive(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether to open database files in exclusive or shared mode.
        </summary>
      <param name="lNewSetting">
            TRUE causes database files to be opened in exclusive (nonshared) mode; FALSE causes database files to be opened in shared mode.<br />
            The initial default is TRUE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetExclusive() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetFieldStore">
      <summary>
            Return and optionally change the setting that determines whether assignments are made to fields or to memory variables.
        </summary>
      <param name="lNewSetting">
            TRUE turns field assignment on; FALSE turns it off.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetFieldStore() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetFieldStore(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether assignments are made to fields or to memory variables.
        </summary>
      <param name="lNewSetting">
            TRUE turns field assignment on; FALSE turns it off.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetFieldStore() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetFixed">
      <summary>
            Return and optionally change the setting that fixes the number of decimal digits used to display numbers.
        </summary>
      <param name="lNewSetting">TRUE displays numeric output using the current SetDecimal() setting.  FALSE ignores SetDecimal(), allowing the operation or function to determine the number of decimal places to display, according to the default rules for numeric display.</param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetDecimal() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetFixed(System.Boolean)">
      <summary>
            Return and optionally change the setting that fixes the number of decimal digits used to display numbers.
        </summary>
      <param name="lNewSetting">TRUE displays numeric output using the current SetDecimal() setting.  FALSE ignores SetDecimal(), allowing the operation or function to determine the number of decimal places to display, according to the default rules for numeric display.</param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetDecimal() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetInternational">
      <summary>
            Return and optionally change the setting that determines the international mode for the application.
        </summary>
      <param name="symNewSetting">
            The international mode to use.<br />
            The available modes are #Windows (the default) and #Clipper.
        </param>
      <returns>
            If <paramref name="symNewSetting" /> is not specified, SetInternational() returns the current setting.<br />
            If <paramref name="symNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetInternational(System.String)">
      <summary>
            Return and optionally change the setting that determines the international mode for the application.
        </summary>
      <param name="symNewSetting">
            The international mode to use.<br />
            The available modes are #Windows (the default) and #Clipper.
        </param>
      <returns>
            If <paramref name="symNewSetting" /> is not specified, SetInternational() returns the current setting.<br />
            If <paramref name="symNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetMacroCompiler(System.Type)">
      <summary>
            Set the type of the class that must be used to compile macros
            </summary>
      <param name="oCompiler">The type of the class that implements the macro compiler. This type MUST implement IMacroCompiler.</param>
      <returns>The type of the previously defined MacroCompiler. This may be NULL if no type has been set yet and no macros have been compiled.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetMacroCompiler(XSharp.IMacroCompiler)">
      <summary>
            Set the class that must be used to compile macros
            </summary>
      <param name="oCompiler">The object that implements the macro compiler.</param>
      <returns>The previously defined MacroCompiler. This may be NULL if no compiler has been set yet and no macros have been compiled.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetMacroDuplicatesResolver(XSharp.MacroCompilerResolveAmbiguousMatch)">
      <summary>
            Set the delegate that may be used to decide which symbol to call for ambiguous symbols
            </summary>
      <param name="resolver">The delegate to call.</param>
      <returns>The previously delegate.</returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetMath">
      <summary>
            Return and optionally change the setting that determines the internal operational characteristics of the underlying floating-point system.
        </summary>
      <param name="nNewSetting">One of the following values, indicating the type of math processor to be used:</param>
      <param name="Value">Indicates</param>
      <param name="0">No floating point is present.	</param>
      <param name="387">A 387 math coprocessor is in use.	</param>
      <param name="486">At least a 486 with a built-in math coprocessor is in use.</param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetMath() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetMath(System.UInt32)">
      <summary>
            Return and optionally change the setting that determines the internal operational characteristics of the underlying floating-point system.
        </summary>
      <param name="nNewSetting">One of the following values, indicating the type of math processor to be used:</param>
      <param name="Value">Indicates</param>
      <param name="0">No floating point is present.	</param>
      <param name="387">A 387 math coprocessor is in use.	</param>
      <param name="486">At least a 486 with a built-in math coprocessor is in use.</param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetMath() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetNatDLL(System.String)">
      <summary>
            Activate a new DLL for nation-dependent operations and messages.
        </summary>
      <param name="cNewDLL">The name of the new DLL to use.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetPath">
      <summary>
            Change the setting that determines the X# search path for opening files.
        </summary>
      <param name="cPathList">
            The paths X# uses when searching for a file not found in the default directory.<br />
            A path is a pointer to a directory.<br />
            It consists of an optional drive letter and colon, followed by a list of directories from the root to the desired directory separated by backslash (\) characters.<br />
            A path list is the sequence of paths to search, each separated by a comma or semicolon.<br />

            	If omitted, the path list is released so that X# searches only the default directory.  (Use GetCurPath() to get the current setting.)
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetPath(System.String)">
      <summary>
            Change the setting that determines the X# search path for opening files.
        </summary>
      <param name="cPathList">
            The paths X# uses when searching for a file not found in the default directory.<br />
            A path is a pointer to a directory.<br />
            It consists of an optional drive letter and colon, followed by a list of directories from the root to the desired directory separated by backslash (\) characters.<br />
            A path list is the sequence of paths to search, each separated by a comma or semicolon.<br />

            	If omitted, the path list is released so that X# searches only the default directory.  (Use GetCurPath() to get the current setting.)
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetPathArray">
      <summary>
            Return the Path array that is used by the File() function to locate files outside of the current directory.
            This is a combination of the SetDefault() and SetPath() variables.
            This may be null if the file function has never been called or never been called for files outside of the current
            directory.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetPathArray(System.String[])">
      <summary>
            Set the Path array that is used by the File() function to locate files outside of the current directory.
            This is a combination of the SetDefault() and SetPath() variables.
            This array gets cleared when SetPath() or SetDefault() is called and is initialized the first time File() or a related function
            </summary>
      <param name="aPath"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetPMExt">
      <summary>
            Set the evening extension for time strings in 12-hour format.
        </summary>
      <param name="cPMExt">
            The extension to be used for time strings that occur in the evening hours.<br />
            This string can be up to eight characters in length — additional characters are ignored.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetPMExt(System.String)">
      <summary>
            Set the evening extension for time strings in 12-hour format.
        </summary>
      <param name="cPMExt">
            The extension to be used for time strings that occur in the evening hours.<br />
            This string can be up to eight characters in length — additional characters are ignored.
        </param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetSafety"></member>
    <member name="M:XSharp.Core.Functions.SetSafety(System.Boolean)"></member>
    <member name="M:XSharp.Core.Functions.SetScience">
      <summary>
            Return and optionally change the setting that displays numbers in scientific notation.
        </summary>
      <param name="lNewSetting">
            TRUE turns scientific notation on; specifying FALSE turns it off.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetScience() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetScience(System.Boolean)">
      <summary>
            Return and optionally change the setting that displays numbers in scientific notation.
        </summary>
      <param name="lNewSetting">
            TRUE turns scientific notation on; specifying FALSE turns it off.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetScience() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetSoftSeek">
      <summary>
            Return and optionally change the setting that determines whether a seek operation will find a close match when no exact match is found.
        </summary>
      <param name="lNewSetting">
            TRUE moves the record pointer to the next record with a higher key after a failed order search; FALSE moves the record point to the end of the file after a failed order search.<br />

            	The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetSoftSeek() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetSoftSeek(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether a seek operation will find a close match when no exact match is found.
        </summary>
      <param name="lNewSetting">
            TRUE moves the record pointer to the next record with a higher key after a failed order search; FALSE moves the record point to the end of the file after a failed order search.<br />

            	The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetSoftSeek() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetSpace">
      <summary>
            Return the setting that determines whether a space is displayed between fields or expressions when you use the ? or ?? command.
            </summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetSpace(System.Boolean)">
      <summary>
            Change the setting that determines whether a space is displayed between fields or expressions when you use the ? or ?? command.
            </summary>
      <param name="lSet"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetThousandSep">
      <summary>
            Return and optionally change the setting that determines the thousands separation character to be used in numeric-to-string conversion functions.
        </summary>
      <param name="nNewSetting">
            An ASCII code representing the new thousands separator.<br />
            The initial default depends on SetInternational(), which you can refer to for more information.
        </param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetThousandSep() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetThousandSep(System.UInt32)">
      <summary>
            Return and optionally change the setting that determines the thousands separation character to be used in numeric-to-string conversion functions.
        </summary>
      <param name="nNewSetting">
            An ASCII code representing the new thousands separator.<br />
            The initial default depends on SetInternational(), which you can refer to for more information.
        </param>
      <returns>
            If <paramref name="nNewSetting" /> is not specified, SetThousandSep() returns the current setting.<br />
            If <paramref name="nNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetTimeFormat(System.String)"></member>
    <member name="M:XSharp.Core.Functions.SetTimeSep">
      <summary>
            Change the setting that determines the separation character to be used in time strings.
        </summary>
      <param name="dwNewSetting">
            The ASCII code for a character to be used as the time string separator (for example, periods or dashes).<br />
            The initial default is a colon (:), which is ASCII code 58.  (Use GetTimeSep() to get the current setting.)
        </param>
      <returns>
            The previous setting.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetTimeSep(System.UInt32)">
      <summary>
            Change the setting that determines the separation character to be used in time strings.
        </summary>
      <param name="dwNewSetting">
            The ASCII code for a character to be used as the time string separator (for example, periods or dashes).<br />
            The initial default is a colon (:), which is ASCII code 58.  (Use GetTimeSep() to get the current setting.)
        </param>
      <returns>
            The previous setting.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetUnique">
      <summary>
            Return and optionally change the setting that determines whether to include unique record keys in an order.
        </summary>
      <param name="lNewSetting">
            TRUE creates orders with unique records only; FALSE creates orders with all records, even if their keys are the same.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetUnique() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetUnique(System.Boolean)">
      <summary>
            Return and optionally change the setting that determines whether to include unique record keys in an order.
        </summary>
      <param name="lNewSetting">
            TRUE creates orders with unique records only; FALSE creates orders with all records, even if their keys are the same.<br />
            The initial default is FALSE.
        </param>
      <returns>
            If <paramref name="lNewSetting" /> is not specified, SetUnique() returns the current setting.<br />
            If <paramref name="lNewSetting" /> is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetYield">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SetYield(System.Boolean)">
      <summary></summary>
      <param name="lSet"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SLen(System.String)">
      <summary>
            Return the length of a strongly typed string.
        </summary>
      <param name="cString">The string to count.</param>
      <returns>
            The length of a string.<br />
            If the string is a NULL_STRING, SLen() returns 0.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.SMT_DEFBLOCKSIZE">
      <summary>
            Default SMT Blocksize
            </summary>
    </member>
    <member name="M:XSharp.Core.Functions.SoundEx(System.String)">
      <summary>
            Convert a string to Soundex form.
        </summary>
      <param name="cString">The string to convert.</param>
      <returns>
            A 4-digit string starting with an alphabetic character and ending with three digits.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Space(System.UInt32)">
      <summary>
            Create a string of spaces.
        </summary>
      <param name="dwSize">
            The number of spaces to return, up to a maximum of MAX_ALLOC byes.<br />
            If <paramref name="dwSize" /> is 0, Space() returns a NULL_STRING.
        </param>
      <returns>
            A string of spaces.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SToDt(System.String)">
      <summary>
            Convert an Date string to DateTime
            </summary>
      <param name="cDate"></param>
      <returns>
    
            The date value that corresponds to the numbers specified in <paramref name="cDate" />.<br />
            If <paramref name="cDate" /> is not a valid date, CToD() returns a NULL_DATE.
        
  </returns>
    </member>
    <member name="M:XSharp.Core.Functions.String2FAttr(System.String)">
      <param name="cAttr"> One or more of the following constants or strings: ADHSRV</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Stuff(System.String,System.UInt32,System.UInt32,System.String)">
      <summary>
            Delete and insert characters in a string.
        </summary>
      <param name="cTarget">The string into which characters are inserted and deleted.</param>
      <param name="dwStart">
            The position in <paramref name="cTarget" /> where the insertion/deletion occurs.
        </param>
      <param name="dwDelete">The number of characters to delete.</param>
      <param name="cInsert">The string to insert.</param>
      <returns>
        <paramref name="cTarget" /> with the specified characters deleted and <paramref name="cInsert" /> inserted.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SubStr2(System.String,System.UInt32)">
      <summary>
            Extract a substring from a string, using strong typing and only two arguments.
        </summary>
      <param name="cTarget">The string from which to extract a substring.</param>
      <param name="dwStart">
            The starting position in <paramref name="cTarget" />.  Since this argument is a WORD, it cannot be negative.
        </param>
      <returns>
            The substring.<br />
            If the substring is not found, a NULL_STRING is returned.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SubStr3(System.String,System.UInt32,System.UInt32)">
      <summary>
            Extract a substring from a string, using strong typing and three required arguments.
        </summary>
      <param name="cTarget">The string from which to extract a substring.</param>
      <param name="dwStart">
            The starting position in <paramref name="cTarget" />.  Since this argument is a WORD, it cannot be negative.
        </param>
      <param name="dwLen">
            The number of characters to extract.<br />
            If omitted, the substring begins at <paramref name="dwStart" /> and continues to the end of the string.<br />
            If <paramref name="dwLen" /> is greater than the number of characters from <paramref name="dwStart" /> to the end of <paramref name="cTarget" />, the extra is ignored.
        </param>
      <returns>
            The substring.<br />
            If the substring is not found, it returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SwapByte(System.Byte)">
      <summary>
            Exchange the right and left halves of a byte.
        </summary>
      <param name="bSwap">The byte whose nibbles you want to swap.</param>
      <returns>
            The byte value with swapped nibbles.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SwapDWord(System.UInt32)">
      <summary>
            Exchange the right and left halves of a double word.
        </summary>
      <param name="dwSwap">The double word value whose words you want to swap.</param>
      <returns>
            The swapped double word.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SwapInt(System.Int32)">
      <summary>
            Exchange the right and left halves of an integer.
        </summary>
      <param name="liSwap">The integer whose bytes you want to swap.</param>
      <returns>
            The swapped integer.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SwapInt64(System.Int64)">
      <summary>
            Exchange the right and left halves of a Int64
            </summary>
      <param name="i64"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.SwapLong(System.Int32)">
      <summary>
            Exchange the right and left halves of a long integer.
        </summary>
      <param name="liSwap">The long integer whose words you want to swap.</param>
      <returns>
            The swapped long integer.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SwapQWord(System.UInt64)"></member>
    <member name="M:XSharp.Core.Functions.SwapShort(System.Int16)">
      <summary>
            Exchange the right and left halves of a short integer.
        </summary>
      <param name="siSwap">The short integer whose bytes you want to swap.</param>
      <returns>
            The swapped short integer.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SwapWord(System.UInt16)">
      <summary>
            Exchange the right and left halves of a word.
        </summary>
      <param name="wSwap">The word whose bytes you want to swap.</param>
      <returns>
            The swapped word.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.SystemTypeToUsualType(System.Type)">
      <summary>
            Calculate the Usual Type for a System Type
            </summary>
      <param name="oType">The type of the value to check</param>
      <returns>A value from the __UsualType enum</returns>
    </member>
    <member name="F:XSharp.Core.Functions.TAIWAN">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.Time">
      <summary>
            Return the system time in a format determined by various international settings.
        </summary>
      <returns>
            The format of the return value is dependent on several functions, including SetAMPM(), SetAMExt(), SetPMExt(), and SetInternational(), which you can refer to for more information.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Time24">
      <summary>
            Return the system time in 24-hour format.
        </summary>
      <returns>
            The system time in the form hh:mO:ss, where hh is hours in 24-hour format, mm is minutes, and ss is seconds.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.Trim(System.String)">
      <summary>
            Remove trailing spaces from a string.
        </summary>
      <param name="cString">The string to trim.</param>
      <returns>
        <paramref name="cString" /> with the trailing spaces removed.<br />
            If <paramref name="cString" /> is a NULL_STRING or all spaces, Trim() returns a NULL_STRING.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.TruePath(System.String)"></member>
    <member name="M:XSharp.Core.Functions.TString(System.Double)">
      <summary>
            Convert a specified number of seconds to a time string.
        </summary>
      <param name="nSeconds">The number of seconds to convert.  </param>
      <returns>
            The format of the return value is dependent on several functions, including SetAMPM(), SetAMExt(), SetPMExt(), and SetInternational(), which you can refer to for more information.<br />
            If <paramref name="nSeconds" /> is greater than 86,400 (the number of seconds in one day), the number of seconds past the whole number of days is returned (see the second example below).
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.TString(System.UInt32)">
      <summary>
            Convert a specified number of seconds to a time string.
        </summary>
      <param name="nSeconds">The number of seconds to convert.  </param>
      <returns>
            The format of the return value is dependent on several functions, including SetAMPM(), SetAMExt(), SetPMExt(), and SetInternational(), which you can refer to for more information.<br />
            If <paramref name="nSeconds" /> is greater than 86,400 (the number of seconds in one day), the number of seconds past the whole number of days is returned (see the second example below).
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.TypeString(System.UInt32)">
      <summary>Return a descriptive name (in upper case) for a X# (Usual) Type</summary>
      <param name="dwType">Type number to check for</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.Upper(System.String)">
      <summary>
            Convert the lowercase and mixed case characters in a string to uppercase.
        </summary>
      <param name="cString">The string to convert to uppercase.</param>
      <returns>
        <paramref name="cString" /> with all alphabetical characters converted to uppercase.<br />
            All other characters remain the same as in the original string.
        </returns>
    </member>
    <member name="M:XSharp.Core.Functions.UpperA(System.String@)">
      <summary>
            Convert the lowercase and mixed case characters in a string to uppercase, changing the contents of the argument as well as the return value.
        </summary>
      <param name="cString">The string to convert to uppercase.</param>
      <returns>
        <paramref name="cString" /> with all alphabetical characters converted to uppercase.<br />
            All other characters remain the same as in the original string.
        </returns>
    </member>
    <member name="F:XSharp.Core.Functions.USA">
      <summary>DateFormat define</summary>
    </member>
    <member name="M:XSharp.Core.Functions.UseBufferedFileStream">
      <summary>Retrieve the buffered File IO setting for the runtime</summary>
      <returns>Current setting for the buffered file IO</returns>
    </member>
    <member name="M:XSharp.Core.Functions.UseBufferedFileStream(System.Boolean)">
      <summary>Control the buffered File IO setting for the runtime</summary>
      <param name="lUse">Should the buffer file IO be used ?</param>
      <returns>Previous setting for the buffered file IO</returns>
    </member>
    <member name="M:XSharp.Core.Functions.UUDecodeLine(System.String,System.IntPtr)">
      <summary>This function is not implemented yet</summary>
      <param name="cLine"></param>
      <param name="hfOut"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.UUEncFile(System.String)">
      <summary>This function is not implemented yet</summary>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.UUEncLine(System.String)">
      <summary>This function is not implemented yet</summary>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.W2Bin(System.UInt16)">
      <summary>
            Convert a word to a string containing a 16-bit unsigned integer.
        </summary>
      <param name="wValue">The value to convert.  Decimal values are truncated.</param>
      <returns></returns>
    </member>
    <member name="M:XSharp.Core.Functions.WorkDir">
      <summary>
            Return the currently selected working directory.
        </summary>
      <returns></returns>
    </member>
    <member name="F:XSharp.Core.Functions.YMD">
      <summary>DateFormat define</summary>
    </member>
    <member name="T:XSharp.Internal.ActualTypeAttribute">
      <summary>
            This class is used to mark IntPtr _DLL arguments with the actual type
            </summary>
    </member>
    <member name="M:XSharp.Internal.ActualTypeAttribute.#ctor(System.Type)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.ActualTypeAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.Internal.ActualTypeAttribute.Value">
      <summary>The actual type of the parameter.</summary>
    </member>
    <member name="T:XSharp.Internal.AllowLateBindingAttribute">
      <summary>
            This class is used to mark type that allow LateBound calls without the need of the /lb compiler option
            </summary>
    </member>
    <member name="M:XSharp.Internal.AllowLateBindingAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.AllowLateBindingAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:XSharp.Internal.ClassLibraryAttribute">
      <summary>
            This class exposes the namespace and globalclass in an assembly
            </summary>
    </member>
    <member name="M:XSharp.Internal.ClassLibraryAttribute.#ctor(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.ClassLibraryAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.Internal.ClassLibraryAttribute.DefaultNameSpace">
      <summary>Default namespace of the assembly.</summary>
    </member>
    <member name="P:XSharp.Internal.ClassLibraryAttribute.GlobalClassName">
      <summary>Name of the class where functions, defines and globals are stored.</summary>
    </member>
    <member name="T:XSharp.Internal.ClipperCallingConventionAttribute">
      <summary>
            This class documents the parameter names for methods and functions
            with Clipper calling convention
            </summary>
    </member>
    <member name="M:XSharp.Internal.ClipperCallingConventionAttribute.#ctor(System.String[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.ClipperCallingConventionAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.Internal.ClipperCallingConventionAttribute.ParameterNames">
      <summary>List of parameter names for the method or constructor </summary>
    </member>
    <member name="T:XSharp.Internal.CompilerVersionAttribute">
      <summary>
            This class records the compiler version used to build an assembly
            </summary>
    </member>
    <member name="M:XSharp.Internal.CompilerVersionAttribute.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.CompilerVersionAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.Internal.CompilerVersionAttribute.Version">
      <summary>The version and dialect of the compiler that created the assembly.</summary>
    </member>
    <member name="T:XSharp.Internal.DefaultParameterValueAttribute">
      <summary>
            this class is used to mark default parameter values in the middle of a parameter list.
            </summary>
    </member>
    <member name="M:XSharp.Internal.DefaultParameterValueAttribute.#ctor(System.Object,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.DefaultParameterValueAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.Internal.DefaultParameterValueAttribute.Flag">
      <summary>Flag indicating the type of the default parameter</summary>
    </member>
    <member name="P:XSharp.Internal.DefaultParameterValueAttribute.Value">
      <summary>Value of the default parameter</summary>
    </member>
    <member name="T:XSharp.Internal.IsInstanceAttribute">
      <summary>
            This class is used to describe fields that have been declared with the INSTANCE modifier
            </summary>
    </member>
    <member name="M:XSharp.Internal.IsInstanceAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.IsInstanceAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:XSharp.Internal.NeedsAccessToLocalsAttribute">
      <summary>
            This class is used to mark methods, properties etc. that want access to Local Variables by name.
            </summary>
    </member>
    <member name="M:XSharp.Internal.NeedsAccessToLocalsAttribute.#ctor(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.NeedsAccessToLocalsAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.Internal.NeedsAccessToLocalsAttribute.WritesToLocals"></member>
    <member name="T:XSharp.Internal.TypesChangedAttribute">
      <summary>
            This class is used to mark a class and indicate that the property types and or parameter types in this class were changed.
            When the compiler detects that a subclass does not have the right parameter or property types then the subclass will be automatically
            adjusted to preserved the types from the parent class.
            </summary>
    </member>
    <member name="M:XSharp.Internal.TypesChangedAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.TypesChangedAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:XSharp.Internal.VoStructAttribute">
      <summary>
            This class is used to describe VOSTRUCT and UNION structures which have a different semantics
            AS actually means Struct PTR. IS means Struct
            Please note that the size assumes x86 (32 bits) OS.
            </summary>
    </member>
    <member name="M:XSharp.Internal.VoStructAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.VoStructAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.Internal.VoStructAttribute.LargestMemberSize">
      <summary>Size of the largest member.</summary>
    </member>
    <member name="P:XSharp.Internal.VoStructAttribute.Size">
      <summary>Total size of the VOSTRUCT or UNION.</summary>
    </member>
    <member name="T:XSharp.Internal.WrappedException">
      <summary>Helper class for the BREAK statement</summary>
    </member>
    <member name="M:XSharp.Internal.WrappedException.#ctor(System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.Internal.WrappedException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.Internal.WrappedException.Value">
      <summary>The property that is passed by the BREAK statement</summary>
    </member>
    <member name="T:XSharp.IO.XsBufferedFileStream">
      <summary>This class performs buffered IO to files opened exclusively</summary>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.IO.XsBufferedFileStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.IO.XsBufferedFileStream.BUFF_MASK"></member>
    <member name="F:XSharp.IO.XsBufferedFileStream.BUFF_SIZE"></member>
    <member name="M:XSharp.IO.XsBufferedFileStream.Close">
      <summary>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.</summary>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.Flush(System.Boolean)">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</summary>
      <param name="flushToDisk">
        <see langword="true" /> to flush all intermediate file buffers; otherwise, <see langword="false" />. </param>
    </member>
    <member name="P:XSharp.IO.XsBufferedFileStream.Length">
      <summary>Gets the length in bytes of the stream.</summary>
      <returns>A long value representing the length of the stream in bytes.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.FileStream.CanSeek" /> for this stream is <see langword="false" />. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as the file being closed, occurred. </exception>
    </member>
    <member name="P:XSharp.IO.XsBufferedFileStream.Position">
      <summary>Gets or sets the current position of this stream.</summary>
      <returns>The current position of this stream.</returns>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. - or -The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the position to a negative value. </exception>
      <exception cref="T:System.IO.EndOfStreamException">Attempted seeking past the end of a stream that does not support this. </exception>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from the stream and writes the data in a given buffer.</summary>
      <param name="array">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1<paramref name=")" /> replaced by the bytes read from the current source. </param>
      <param name="offset">The byte offset in <paramref name="array" /> at which the read bytes will be placed. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of this stream to the given value.</summary>
      <param name="offset">The point relative to <paramref name="origin" /> from which to begin seeking. </param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />. </param>
      <returns>The new position in the stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the <see langword="FileStream" /> is constructed from a pipe or console output. </exception>
      <exception cref="T:System.ArgumentException">Seeking is attempted before the beginning of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.SetLength(System.Int64)">
      <summary>Sets the length of this stream to the given value.</summary>
      <param name="value">The new length of the stream. </param>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the <paramref name="value" /> parameter to less than 0. </exception>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the file stream.</summary>
      <param name="array">The buffer containing data to write to the stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="array" /> from which to begin copying bytes to the stream. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. - or -Another thread may have caused an unexpected change in the position of the operating system's file handle. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">The current stream instance does not support writing. </exception>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the file stream.</summary>
      <param name="value">A byte to write to the stream. </param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.XRead(System.Int64,System.Byte[],System.Int32)">
      <summary>Bypass the buffered Read mechanism and call the original Read() method in the base class</summary>
    </member>
    <member name="M:XSharp.IO.XsBufferedFileStream.XWrite(System.Int64,System.Byte[],System.Int32)">
      <summary>Bypass the buffered Write mechanism and call the original Write() method in the base class</summary>
    </member>
    <member name="T:XSharp.IO.XsFileStream">
      <summary>Special Filestream class that sets the runtime IO Errorstate when an error occurs. </summary>
    </member>
    <member name="M:XSharp.IO.XsFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate. </param>
      <param name="mode">A constant that determines how to open or create the file. </param>
      <param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file. </param>
      <param name="share">A constant that determines how the file will be shared by processes. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <param name="options">A value that specifies additional file options.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative or zero.-or- 
              <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access. -or-
              <see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:XSharp.IO.XsFileStream.CreateFileStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>Create a XsFileStream object on Windows and a normal FileStream object on other OS-es</summary>
    </member>
    <member name="P:XSharp.IO.XsFileStream.FileName">
      <summary>The name of the file opened in the stream.</summary>
    </member>
    <member name="M:XSharp.IO.XsFileStream.Flush">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file.</summary>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:XSharp.IO.XsFileStream.Flush(System.Boolean)">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</summary>
      <param name="flushToDisk">
        <see langword="true" /> to flush all intermediate file buffers; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:XSharp.IO.XsFileStream.Lock(System.Int64,System.Int64)">
      <summary>Prevents other processes from reading from or writing to the <see cref="T:System.IO.FileStream" />.</summary>
      <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). </param>
      <param name="length">The range to be locked. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> or <paramref name="length" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The file is closed. </exception>
      <exception cref="T:System.IO.IOException">The process cannot access the file because another process has locked a portion of the file.</exception>
    </member>
    <member name="M:XSharp.IO.XsFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from the stream and writes the data in a given buffer.</summary>
      <param name="array">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1<paramref name=")" /> replaced by the bytes read from the current source. </param>
      <param name="offset">The byte offset in <paramref name="array" /> at which the read bytes will be placed. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:XSharp.IO.XsFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of this stream to the given value.</summary>
      <param name="offset">The point relative to <paramref name="origin" /> from which to begin seeking. </param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />. </param>
      <returns>The new position in the stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the <see langword="FileStream" /> is constructed from a pipe or console output. </exception>
      <exception cref="T:System.ArgumentException">Seeking is attempted before the beginning of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:XSharp.IO.XsFileStream.SetLength(System.Int64)">
      <summary>Sets the length of this stream to the given value.</summary>
      <param name="value">The new length of the stream. </param>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the <paramref name="value" /> parameter to less than 0. </exception>
    </member>
    <member name="M:XSharp.IO.XsFileStream.Unlock(System.Int64,System.Int64)">
      <summary>Allows access by other processes to all or part of a file that was previously locked.</summary>
      <param name="position">The beginning of the range to unlock. </param>
      <param name="length">The range to be unlocked. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> or <paramref name="length" /> is negative. </exception>
    </member>
    <member name="M:XSharp.IO.XsFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the file stream.</summary>
      <param name="array">The buffer containing data to write to the stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="array" /> from which to begin copying bytes to the stream. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. - or -Another thread may have caused an unexpected change in the position of the operating system's file handle. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">The current stream instance does not support writing. </exception>
    </member>
    <member name="M:XSharp.IO.XsFileStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the file stream.</summary>
      <param name="value">A byte to write to the stream. </param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
    </member>
    <member name="T:XSharp.IO.XsWin32FileStream">
      <summary>This class is used for Shared diskaccess on Windows. </summary>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.Flush">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file.</summary>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.Flush(System.Boolean)">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</summary>
      <param name="flushToDisk">
        <see langword="true" /> to flush all intermediate file buffers; otherwise, <see langword="false" />. </param>
    </member>
    <member name="P:XSharp.IO.XsWin32FileStream.Length">
      <summary>Gets the length in bytes of the stream.</summary>
      <returns>A long value representing the length of the stream in bytes.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.FileStream.CanSeek" /> for this stream is <see langword="false" />. </exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as the file being closed, occurred. </exception>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.Lock(System.Int64,System.Int64)">
      <summary>Prevents other processes from reading from or writing to the <see cref="T:System.IO.FileStream" />.</summary>
      <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). </param>
      <param name="length">The range to be locked. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> or <paramref name="length" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The file is closed. </exception>
      <exception cref="T:System.IO.IOException">The process cannot access the file because another process has locked a portion of the file.</exception>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from the stream and writes the data in a given buffer.</summary>
      <param name="array">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1<paramref name=")" /> replaced by the bytes read from the current source. </param>
      <param name="offset">The byte offset in <paramref name="array" /> at which the read bytes will be placed. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of this stream to the given value.</summary>
      <param name="offset">The point relative to <paramref name="origin" /> from which to begin seeking. </param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />. </param>
      <returns>The new position in the stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the <see langword="FileStream" /> is constructed from a pipe or console output. </exception>
      <exception cref="T:System.ArgumentException">Seeking is attempted before the beginning of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.SetLength(System.Int64)">
      <summary>Sets the length of this stream to the given value.</summary>
      <param name="value">The new length of the stream. </param>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the <paramref name="value" /> parameter to less than 0. </exception>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.Unlock(System.Int64,System.Int64)">
      <summary>Allows access by other processes to all or part of a file that was previously locked.</summary>
      <param name="position">The beginning of the range to unlock. </param>
      <param name="length">The range to be unlocked. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> or <paramref name="length" /> is negative. </exception>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the file stream.</summary>
      <param name="array">The buffer containing data to write to the stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="array" /> from which to begin copying bytes to the stream. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. - or -Another thread may have caused an unexpected change in the position of the operating system's file handle. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">The current stream instance does not support writing. </exception>
    </member>
    <member name="M:XSharp.IO.XsWin32FileStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the file stream.</summary>
      <param name="value">A byte to write to the stream. </param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
    </member>
    <member name="T:XSharp.RDD.BaseIndex">
      <summary>Base Index class. Does not implement anything. </summary>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.#ctor(XSharp.RDD.Workarea)">
      <summary>Create the BaseIndex object</summary>
      <param name="oArea">Workarea object that 'owns' this index object </param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.Flush">
      <summary>Flush the changes to the index.</summary>
    </member>
    <member name="P:XSharp.RDD.BaseIndex.Found">
      <summary>Result of the last seek operation for the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about the current index.</summary>
      <param name="nOrdinal"></param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info"></param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
    </member>
    <member name="T:XSharp.RDD.BaseMemo">
      <summary>Base Memo class. Does not implement anything. </summary>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.#ctor(XSharp.RDD.Workarea)">
      <summary>Create the BaseMemo object</summary>
      <param name="oArea">Workarea object that 'owns' this memo object </param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.CloseMemFile">
      <summary>Close the memo file</summary>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.Flush">
      <summary>Flush the changes to the memo file </summary>
    </member>
    <member name="P:XSharp.RDD.BaseMemo.FullPath"></member>
    <member name="M:XSharp.RDD.BaseMemo.GetValue(System.Int32)">
      <summary>Get a value from a memo file for the specified column.</summary>
      <param name="nFldPos">1 based column number for which the value should be retrieved.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">1 based column number for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">1 based column number for which the length should be retrieved.</param>
    </member>
    <member name="P:XSharp.RDD.BaseMemo.LastWrittenBlockNumber"></member>
    <member name="M:XSharp.RDD.BaseMemo.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.PutValue(System.Int32,System.Object)">
      <summary>Write a value to a memo file for a specified column</summary>
      <param name="nFldPos">1 based column number for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the memo file for this column.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">1 based column number for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.Zap">
      <summary>Physically remove all memos from the memofile.</summary>
    </member>
    <member name="T:XSharp.RDD.CursorProperty">
      <summary>Enum that matches the various FoxPro cursor properties, used in CursorGetProp() and CursorSetProp()</summary>
    </member>
    <member name="T:XSharp.RDD.DatabasePropertyCollection">
      <summary>This collection is used to store additional properties for fields and servers
            such as captions, descriptions etc.</summary>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DatabasePropertyCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.Add(XSharp.RDD.DatabasePropertyType,System.Object)">
      <summary>Add a property - value pair to the collection.</summary>
      <param name="key">Propery to store.</param>
      <param name="val">Value to store</param>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.GetValue(System.String)">
      <summary>Get the value for a property</summary>
      <param name="cProp">Property name to look for.</param>
      <returns>The value from the collection or an empty value of the right type.</returns>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.GetValue``1(XSharp.RDD.DatabasePropertyType)">
      <summary>Get the value for a property or an empty value when the property has not been defined </summary>
      <param name="key">Property to look for.</param>
      <typeparam name="T">Expected return type for the value</typeparam>
      <returns>The value from the collection or an empty value of the right type.</returns>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.IsValidProperty(System.String)"></member>
    <member name="T:XSharp.RDD.DatabasePropertyType">
      <summary>Enum that matches the various FoxPro database properties, used in DbGetProp() and DbSetProp()</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Null">
      <summary>Null (Internal) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Path">
      <summary>The relative path with respect to the DBC to the table including the name of the file. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Class">
      <summary>Class (Internal) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_3">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_4">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_5">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_6">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Comment">
      <summary>The text of the field comment. (C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_8">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RuleExpression">
      <summary>The rule expression. (C)</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RuleText">
      <summary>The row rule error text.(C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DefaultValue">
      <summary>The field default value.(C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ParameterList">
      <summary>The WHERE clause parameters. The format for the parameters is ''ParameterName1, 'Type1'; ParameterName2, 'Type2'; ...'' </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RelatedChild">
      <summary>ChildTag for a Relation Object</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.InsertTrigger">
      <summary>The Insert trigger expression.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UpdateTrigger">
      <summary>The Update trigger expression.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DeleteTrigger">
      <summary>The Delete trigger expression.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.IsUnique">
      <summary>The IsUnique flag for an Index Object</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RelatedTable">
      <summary>Related table for a Relation Object</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RelatedTag">
      <summary>Related tag for a Relatin Object</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.PrimaryKey">
      <summary>The tag name of the primary key. (C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_21">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_22">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_23">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Version">
      <summary>The database version number. (N) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_25">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_26">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_27">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.BatchUpdateCount">
      <summary>The number of update statements sent to the back end for views. 1 is the default. Adjusting this value can greatly increase update performance. (N) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DataSource">
      <summary>The name of the data source as defined in the Odbc.ini file.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_30">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_31">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ConnectName">
      <summary>The named connection used when the view is opened. (C)</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_33">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_34">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UpdateName">
      <summary>The name of the field used when data in the field is updated to the remote table. By default, the remote table field name.Read/write. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.FetchMemo">
      <summary>Contains true (.T.) (default) if memo and general fields are fetched with the view results; otherwise, contains false (.F.).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.FetchSize">
      <summary>Contains the number of records fetched at a time from the remote tables. The default is 100 records. Setting FetchSize to –1 retrieves the complete result set, limited by the MaxRecords setting</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.KeyField">
      <summary>Contains True (.T.) if the field is specified in an index key expression; otherwise, contains False (.F.). (L)  </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.MaxRecords">
      <summary>The maximum number of records fetched when result sets are returned. (N) The default is – 1 (all rows are returned). A value of 0 specifies that the view is executed but no results are fetched.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ShareConnection">
      <summary>Contains true (.T.) if the view can share its connection handle with other connections; otherwise, contains false (.F.).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.SourceType">
      <summary>The view source. (N) SourceType may assume the following values: 1 - The view uses local tables.2 - The view uses remote tables.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.SQL">
      <summary>The SQL statement executed when the view is opened.(C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Tables">
      <summary>A comma-delimited list of the names of the tables.(C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.SendUpdates">
      <summary>Contains true (.T.) if a SQL update query is sent to update remote tables; otherwise, contains false (.F.) (default).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Updatable">
      <summary>Contains True (.T.) if the field can be updated; otherwise, contains False (.F.). </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UpdateType">
      <summary>The update type. Valid values are: 1 or DB_UPDATE (from Foxpro.h). The old data is updated with the new data (default). 2 or DB_DELETEINSERT (from Foxpro.h). The old data is deleted and the new data is inserted.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UseMemoSize">
      <summary>The minimum size (in bytes) for which result columns are returned in memo fields. For example, if the width of a column result is greater than the value of UseMemoSize, the column result is stored in a memo field. UseMemoSize may vary from 1 to 255; the default value is 255.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.WhereType">
      <summary>The WHERE clause for updates to remote tables.WhereType may assume the following values: 1 or DB_KEY , 2 or DB_KEYANDUPDATABLE, 3 or DB_KEYANDMODIFIED and 4 or DB_KEYANDTIMESTAMP </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_49">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DisplayClass">
      <summary>Name of the class used for field mapping. (C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DisplayClassLibrary">
      <summary>Path to the class library specified with the DisplayClass property.(C)  </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_52">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_53">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.InputMask">
      <summary>The field input format. (C) .Read/write. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Format">
      <summary>The field display format. (C) .Read/write. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Caption">
      <summary>The field caption. (C) If an equal sign (=) precedes the value of this property, Visual FoxPro evaluates the value as an expression. Otherwise, it is treated as a string literal.Read/write. FIELD</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_57">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_58">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_59">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_60">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_61">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_62">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_63">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Asynchronous">
      <summary>The connection mode. (Default) False (.F.) specifies a synchronous connection. True (.T.) specifies an asynchronous connection.Read/write.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.BatchMode">
      <summary>The batch-processing mode. (Default) True (.T.) specifies the connection that operates in batch mode.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ConnectString">
      <summary>The login connection string.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ConnectTimeout">
      <summary>The connection timeout interval in seconds. The default is 0 (wait indefinitely).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DispLogin">
      <summary>Contains a numeric value that determines when the ODBC Login dialog box is displayed.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DispWarnings">
      <summary>Contains a numeric value that determines when the ODBC Login dialog box is displayed.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.IdleTimeout">
      <summary>The idle timeout interval in minutes. Timeout is checked no more than once per minute, therefore it is possible that active connections might deactivate one or two minutes later after the specified time interval has elapsed. The default value is 0 (wait indefinitely).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.QueryTimeOut">
      <summary>The query timeout interval in seconds. The default value is 0 (wait indefinitely).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Password">
      <summary>The connection password.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Transactions">
      <summary>Contains a numeric value that determines how the connection manages transactions on the remote table. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UserId">
      <summary>The user identification.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.WaitTime">
      <summary>The amount of time in milliseconds that elapses before Visual FoxPro checks whether the SQL statement has completed executing. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.TimeStamp">
      <summary>Timestamp (internal)</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DataType">
      <summary>The data type for a field in a view. Initially set to the data type for the field in the data source.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.PacketSize">
      <summary>The size of the network packet used by the connection. Adjusting this value can improve performance. The default value is 4096 bytes (4K).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Database">
      <summary>The name of the server database specified with the DATABASE clause in the CREATE CONNECTION command or in the Connection Designer.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Prepared">
      <summary>Contains True (.T.) if SQL statements are prepared for subsequent REQUERY( ) function calls. REQUERY( ) is used to retrieve data again for a SQL view. See SQLPREPARE( ) for additional information about preparing SQL statements. The default is false (.F.).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.CompareMemo">
      <summary>Contains true (.T.) (default) if memo fields (of type Memo, General, or Picture, or, for remote views, type Timestamp) are included in the WHERE clause for updates; otherwise, contains false (.F.).Read/write.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.FetchAsNeeded">
      <summary>If True (.T.), data is fetched only when needed, such as when record pointer moves to a row that has not been fetched. If False (.F.), additional data is fetched during idle time. (Default)</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_83">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.OfflineRecs">
      <summary>When this property is found the table is offline. The Path property then returns the OffLinePath</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.OfflineRemRecs">
      <summary># of remote records offline.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DBCEventFileName">
      <summary>Relative path and filename of external program file containing DBC Events code. (C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DBCEvents">
      <summary>Enabled state of DBC Events. Set to True (.T.) to enable. (L) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.AllowSimultaneousFetch">
      <summary>Applies when using remote views, a shared connection, and to cursors created using ODBC. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DisconnectRollback">
      <summary>Specifies if a pending transaction is committed or rolled back when SQLDISCONNECT( ) is called for the last connection handle.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.OffLine">
      <summary>Is the table offline (this is not stored as a real property but derived from the extistence of the properties OfflineRecs, OfflineRemRecs and Path.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ColumnName">
      <summary>X# Column Name property (not persisted in DBC)</summary>
    </member>
    <member name="T:XSharp.RDD.DataSession">
      <summary>The DataSession class contains a list of workareas/cursors</summary>
    </member>
    <member name="M:XSharp.RDD.DataSession.#ctor(System.Int32,System.String)">
      <summary>Construct a new datasession</summary>
      <param name="cName">The name for this datasession.</param>
      <param name="nId">The ID for the datasession.</param>
    </member>
    <member name="M:XSharp.RDD.DataSession.#ctor(System.String)">
      <summary>Construct a new datasession</summary>
      <param name="cName">The name for this datasession.</param>
    </member>
    <member name="M:XSharp.RDD.DataSession.Add(XSharp.RDD.DataSession)">
      <summary>Add a DataSession to the list of open datasessions</summary>
      <param name="session">The DataSession to add </param>
    </member>
    <member name="M:XSharp.RDD.DataSession.Close(XSharp.RDD.DataSession)">
      <summary>Remove a DataSession from the list of open datasessions</summary>
      <param name="session">The DataSession to remove </param>
    </member>
    <member name="P:XSharp.RDD.DataSession.Id">
      <summary>The unique id for the datasession</summary>
    </member>
    <member name="P:XSharp.RDD.DataSession.Name">
      <summary>The name for the datasession.</summary>
    </member>
    <member name="P:XSharp.RDD.DataSession.Sessions">
      <summary>List of all open DataSessions</summary>
    </member>
    <member name="T:XSharp.RDD.Dbc">
      <summary>Helper class to open, close and select a database</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.Close(System.Boolean)"></member>
    <member name="M:XSharp.RDD.Dbc.Close(System.String)">
      <summary>Close a database.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.Create(System.String)">
      <summary>Create a database.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.Dump(System.String)">
      <summary>Dump a database to the terminal window.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.DumpProperties(System.Int32,XSharp.RDD.DatabasePropertyCollection)">
      <summary>Dump the conents of a properties collection.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.FindDatabase(System.String)">
      <summary>Find a database by name.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.GetCurrent">
      <summary>Get the current active database.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.IsUsed(System.String)">
      <summary>Check if a database is used/opened.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.IsValidObjectType(System.String)">
      <summary>Validate a property type.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.IsValidPropertyName(System.String)">
      <summary>Validate a property name.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.Open(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Open a database.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.Select">
      <summary>DeSelect a database.</summary>
    </member>
    <member name="M:XSharp.RDD.Dbc.Select(System.String)">
      <summary>Select a database.</summary>
    </member>
    <member name="T:XSharp.RDD.DbcConnection">
      <summary>Class that stores information about an ODBC connection in a DBC</summary>
    </member>
    <member name="M:XSharp.RDD.DbcConnection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcConnection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:XSharp.RDD.DbcDatabase">
      <summary>Class that stores information about a database.</summary>
    </member>
    <member name="P:XSharp.RDD.DbcDatabase.Active">
      <summary>Is the database active ?</summary>
    </member>
    <member name="P:XSharp.RDD.DbcDatabase.Area">
      <summary>Area number for the cursor in the Databases Datasession</summary>
    </member>
    <member name="P:XSharp.RDD.DbcDatabase.Connections">
      <summary>List of connections</summary>
    </member>
    <member name="P:XSharp.RDD.DbcDatabase.FileName">
      <summary>Filename for the database</summary>
    </member>
    <member name="M:XSharp.RDD.DbcDatabase.FindConnection(System.String)">
      <summary>Find a connection in the Database container.</summary>
      <param name="cConnection">The connection name to look for.</param>
    </member>
    <member name="M:XSharp.RDD.DbcDatabase.FindTable(System.String)">
      <summary>Find a table in the Database container.</summary>
      <param name="cTable">The table name to look for.</param>
    </member>
    <member name="M:XSharp.RDD.DbcDatabase.FindView(System.String)">
      <summary>Find a view in the Database container.</summary>
      <param name="cView">The view name to look for.</param>
    </member>
    <member name="M:XSharp.RDD.DbcDatabase.GetData">
      <summary>Loads the tables, views and connections from the DBC file</summary>
    </member>
    <member name="M:XSharp.RDD.DbcDatabase.GetProp(System.String,System.String,System.String)">
      <summary>Worker method for DbGetProp() </summary>
    </member>
    <member name="P:XSharp.RDD.DbcDatabase.Name">
      <summary>Alias name for the database</summary>
    </member>
    <member name="M:XSharp.RDD.DbcDatabase.SetProp(System.String,System.String,System.String,System.Object)">
      <summary>-- todo --</summary>
    </member>
    <member name="P:XSharp.RDD.DbcDatabase.Tables">
      <summary>List of tables</summary>
    </member>
    <member name="P:XSharp.RDD.DbcDatabase.Views">
      <summary>List of views</summary>
    </member>
    <member name="T:XSharp.RDD.DbcField">
      <summary>Class that stores information about a field in a DBC</summary>
    </member>
    <member name="M:XSharp.RDD.DbcField.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcField</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:XSharp.RDD.DbcIndex">
      <summary>Class that stores information about an index in a DBC</summary>
    </member>
    <member name="M:XSharp.RDD.DbcIndex.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcIndex</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:XSharp.RDD.DbcManager">
      <summary>This classes manages open database. Both databases that are opened explicitely and also databases that are opened
            for "free" tables that have a backlink to a database</summary>
    </member>
    <member name="M:XSharp.RDD.DbcManager.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcManager</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.DbcManager.Activate(XSharp.RDD.DbcDatabase)"></member>
    <member name="M:XSharp.RDD.DbcManager.Close(System.String)">
      <summary>Close a Database</summary>
      <param name="cName">Alias name of the database to close.</param>
      <returns>TRUE when the Database was open and was closed succesfully, otherwise FALSE.</returns>
    </member>
    <member name="M:XSharp.RDD.DbcManager.CreateDatabase(System.String)">
      <summary>Create a new DBC file</summary>
      <param name="cFileName">The fully qualified filename to create.</param>
      <returns>TRUE when the database file was created successfully.</returns>
    </member>
    <member name="P:XSharp.RDD.DbcManager.Databases"></member>
    <member name="M:XSharp.RDD.DbcManager.ExtendDbName(System.String)">
      <summary>Enhance the DBC name. Adds the extension and path when needed.</summary>
      <param name="cFileName">Name of the file. The extension and path are optional.</param>
      <returns>Name with DBC extension when needed and with full path information when found.</returns>
    </member>
    <member name="M:XSharp.RDD.DbcManager.FindDatabase(System.String)">
      <summary>Search a Database by file name</summary>
      <param name="cFileName">The fully qualified filename to look for, so MUST have an extension and path.</param>
      <returns>The database object (when found) otherwise NULL_OBJECT.</returns>
    </member>
    <member name="M:XSharp.RDD.DbcManager.FindDatabaseByName(System.String)">
      <summary>Search a Database by name</summary>
      <param name="cName">Alias name of the database to close.</param>
      <returns>The database object (when found) otherwise NULL_OBJECT.</returns>
    </member>
    <member name="M:XSharp.RDD.DbcManager.Open(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Open a DBC file. This does NOT make the database the active database</summary>
      <param name="cFileName">Filename of the database to open.</param>
      <param name="lShared">Should the database be opened in Shared mode</param>
      <param name="lReadOnly">Should the database be opened Readonly</param>
      <param name="lValidate">Should the structure of the database be validated.</param>
      <returns>TRUE when opened succesfully. When the database was already open then FALSE is returned.</returns>
    </member>
    <member name="M:XSharp.RDD.DbcManager.ValidateStructure">
      <summary>Validate the DBC structure</summary>
      <returns>TRUE when the structure is OK, otherwise FALSE.</returns>
    </member>
    <member name="T:XSharp.RDD.DbcObject">
      <summary>Base class for objects read from the Database Container</summary>
    </member>
    <member name="M:XSharp.RDD.DbcObject.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.DbcObject.DecodeProperties"></member>
    <member name="M:XSharp.RDD.DbcObject.GetData"></member>
    <member name="P:XSharp.RDD.DbcObject.HasProperties"></member>
    <member name="M:XSharp.RDD.DbcObject.LoadChildren(System.UInt32)"></member>
    <member name="P:XSharp.RDD.DbcObject.ObjectID"></member>
    <member name="P:XSharp.RDD.DbcObject.ObjectKey"></member>
    <member name="P:XSharp.RDD.DbcObject.ObjectName"></member>
    <member name="P:XSharp.RDD.DbcObject.ObjectType"></member>
    <member name="P:XSharp.RDD.DbcObject.Parent"></member>
    <member name="P:XSharp.RDD.DbcObject.ParentID"></member>
    <member name="P:XSharp.RDD.DbcObject.Properties"></member>
    <member name="M:XSharp.RDD.DbcObject.Read"></member>
    <member name="M:XSharp.RDD.DbcObject.ReadChild"></member>
    <member name="M:XSharp.RDD.DbcObject.ReadField(System.UInt32)"></member>
    <member name="T:XSharp.RDD.DbColumnInfo">
      <summary>This class describes extended information for a field in a workarea, for fields that come from a SQL backend.</summary>
    </member>
    <member name="M:XSharp.RDD.DbColumnInfo.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the DbColumnInfo class</summary>
    </member>
    <member name="M:XSharp.RDD.DbColumnInfo.#ctor(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Initializes a new instance of the DbColumnInfo class</summary>
    </member>
    <member name="M:XSharp.RDD.DbColumnInfo.CalculateColumnType">
      <summary>Calculate the column type from the FieldType</summary>
    </member>
    <member name="P:XSharp.RDD.DbColumnInfo.DotNetType">
      <summary>DotNet datatype of the column</summary>
    </member>
    <member name="P:XSharp.RDD.DbColumnInfo.NumericPrecision">
      <summary>Numeric Precision</summary>
    </member>
    <member name="P:XSharp.RDD.DbColumnInfo.NumericScale">
      <summary>Numeric Scale</summary>
    </member>
    <member name="T:XSharp.RDD.DbcOther">
      <summary>Class that stores other info about Databases, such as the source and object code for Database </summary>
    </member>
    <member name="M:XSharp.RDD.DbcOther.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcOther</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.RDD.DbcOther.Code"></member>
    <member name="M:XSharp.RDD.DbcOther.Read"></member>
    <member name="P:XSharp.RDD.DbcOther.Source"></member>
    <member name="T:XSharp.RDD.DbcRelation">
      <summary>Class that stores information about a relation in a DBC</summary>
    </member>
    <member name="M:XSharp.RDD.DbcRelation.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcRelation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.DbcRelation.Read"></member>
    <member name="P:XSharp.RDD.DbcRelation.RIInfo">
      <summary>The relational rules for Insert, Update, Delete.</summary>
    </member>
    <member name="T:XSharp.RDD.DbcTable">
      <summary>Class that stores information about a table in a DBC</summary>
    </member>
    <member name="M:XSharp.RDD.DbcTable.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.RDD.DbcTable.Database">
      <summary>The database in which this table is defined.</summary>
    </member>
    <member name="P:XSharp.RDD.DbcTable.Fields">
      <summary>The collection of fields</summary>
    </member>
    <member name="M:XSharp.RDD.DbcTable.GetData"></member>
    <member name="P:XSharp.RDD.DbcTable.Indexes">
      <summary>The collection of indexes</summary>
    </member>
    <member name="P:XSharp.RDD.DbcTable.Path">
      <summary>The Table path as stored in the DBC file.</summary>
    </member>
    <member name="P:XSharp.RDD.DbcTable.Relations">
      <summary>The collection of relations</summary>
    </member>
    <member name="T:XSharp.RDD.DbcView">
      <summary>Class that stores information about a view in a DBC</summary>
    </member>
    <member name="M:XSharp.RDD.DbcView.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbcView</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.RDD.DbcView.Database">
      <summary>The database in which this table is defined.</summary>
    </member>
    <member name="P:XSharp.RDD.DbcView.Fields">
      <summary>The collection of fields</summary>
    </member>
    <member name="M:XSharp.RDD.DbcView.GetData"></member>
    <member name="T:XSharp.RDD.DbDate">
      <summary>Implementation of the IDate interface that can be used by the RDD system. </summary>
    </member>
    <member name="M:XSharp.RDD.DbDate.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbDate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.RDD.DbDate.Day">
      <summary>Day part of the date. A number between 0 an 31</summary>
      <returns>Integer value</returns>
    </member>
    <member name="P:XSharp.RDD.DbDate.IsEmpty">
      <summary>Is the date empty (NULL_DATE)</summary>
      <returns>Logical value</returns>
    </member>
    <member name="P:XSharp.RDD.DbDate.Month">
      <summary>Month part of the date. A number between 0 an 12</summary>
      <returns>Integer value</returns>
    </member>
    <member name="M:XSharp.RDD.DbDate.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:XSharp.RDD.DbDate.Value">
      <summary>Date as System.DateTime structure</summary>
      <returns>System.DateTime value</returns>
    </member>
    <member name="P:XSharp.RDD.DbDate.Year">
      <summary>Year part of the date. A number between 0 and 9999</summary>
      <returns>Integer value</returns>
    </member>
    <member name="T:XSharp.RDD.DbFloat">
      <summary>Implementation of the IFloat interface that can be used by the RDD system. </summary>
    </member>
    <member name="M:XSharp.RDD.DbFloat.#ctor(System.Double,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbFloat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.RDD.DbFloat.Decimals">
      <summary>Number of decimals.</summary>
      <returns>Integer value</returns>
    </member>
    <member name="P:XSharp.RDD.DbFloat.Digits">
      <summary>Number of digits (includes the optional decimal separator and decimals).</summary>
      <returns>Integer value</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.GetTypeCode"></member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:XSharp.RDD.DbFloat.Value">
      <summary>Double value of the Float</summary>
      <returns>Integer value</returns>
    </member>
    <member name="T:XSharp.RDD.IBlobData">
      <summary>
            Interface that is used for BLOB operations for memo files
            </summary>
    </member>
    <member name="P:XSharp.RDD.IBlobData.Data">
      <summary>
            Data to write to the blob file. This can be a BYTE[] but also other values.
            At this moment the FPT RDD supports BYTE[], String, Logic
            Other value types may follow later
            </summary>
    </member>
    <member name="P:XSharp.RDD.IBlobData.Length">
      <summary>
            Length of the data to write or return. Defaults to all data
            </summary>
    </member>
    <member name="P:XSharp.RDD.IBlobData.Pointer">
      <summary>
            Pointer for which to write or return the data
            </summary>
    </member>
    <member name="P:XSharp.RDD.IBlobData.Start">
      <summary>
            Start of the data to write or return. Defaults to 0
            </summary>
    </member>
    <member name="T:XSharp.RDD.IDbRow">
      <summary>This interface defines a row in a .Net Table.</summary>
    </member>
    <member name="P:XSharp.RDD.IDbRow.RecNo"></member>
    <member name="T:XSharp.RDD.IMemo">
      <summary>This interface defines the mimimum methods that a RDD that supports memos should implement.</summary>
    </member>
    <member name="M:XSharp.RDD.IMemo.CloseMemFile">
      <summary>Close the memo file</summary>
    </member>
    <member name="M:XSharp.RDD.IMemo.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.Flush">
      <summary>Flush the changes to the memo file </summary>
    </member>
    <member name="P:XSharp.RDD.IMemo.FullPath"></member>
    <member name="M:XSharp.RDD.IMemo.GetValue(System.Int32)">
      <summary>Get a value from a memo file for the specified column.</summary>
      <param name="nFldPos">1 based column number for which the value should be retrieved.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">1 based column number for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">1 based column number for which the length should be retrieved.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.PutValue(System.Int32,System.Object)">
      <summary>Write a value to a memo file for a specified column</summary>
      <param name="nFldPos">1 based column number for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the memo file for this column.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">1 based column number for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.Zap">
      <summary>Physically remove all memos from the memofile.</summary>
    </member>
    <member name="T:XSharp.RDD.IOrder">
      <summary>This interface defines the mimimum methods that a RDD that supports indexes should implement.</summary>
    </member>
    <member name="M:XSharp.RDD.IOrder.Flush">
      <summary>Flush the changes to the index.</summary>
    </member>
    <member name="P:XSharp.RDD.IOrder.Found">
      <summary>Result of the last seek operation for the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about the current index.</summary>
      <param name="nOrdinal"></param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info"></param>
      <param name="info">An object containing information about the orderlist (file) to delete.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.IOrder.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
    </member>
    <member name="T:XSharp.RDD.IRawData">
      <summary>
            An RDD that implements this interface will return the data for memo fields as BYTE[] when
            the ReturnRawData property is set TRUE
            </summary>
    </member>
    <member name="P:XSharp.RDD.IRawData.ReturnRawData">
      <summary>
            Return Memo values as BYTE[] ?
            </summary>
    </member>
    <member name="T:XSharp.RDD.IRdd">
      <summary>Definition for the interface that each RDD must implement</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.AddField(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Add a column.</summary>
      <param name="info">RddFieldInfo object.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Alias">
      <summary>Retrieve the alias name.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.Append(System.Boolean)">
      <summary>Append a blank row and position the cursor to the new row.</summary>
      <param name="lReleaseLock">A flag that is TRUE if you want to clear all pending row locks before appending the new row and FALSE if you want to add the new row to the end of the current lock list.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.AppendLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Add a newly appended row to the list of locked rows.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Area">
      <summary>Retrieve the Workarea number.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.BlobInfo(System.UInt32,System.UInt32)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
    </member>
    <member name="P:XSharp.RDD.IRdd.BoF">
      <summary>Is the table at the logical beginning-of-file.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.ChildEnd(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ChildStart(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ChildSync(XSharp.RDD.Support.DbRelInfo)">
      <summary>Post a pending relational movement, indicating that the specified child work area has been affected by a parental movement.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ClearFilter">
      <summary>Clear the active filter condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ClearRel">
      <summary>Clear relations.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ClearScope">
      <summary>Clear the active locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Close">
      <summary>Close a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.CloseMemFile">
      <summary>Close the memo file</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Compile(System.String)">
      <summary>Compile an expression.</summary>
      <param name="sBlock">The expression to compile.</param>
    </member>
    <member name="M:XSharp.RDD.IRdd.Continue">
      <summary>Goto the next record based on the corrent locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Create(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create a table.</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.CreateFields(XSharp.RDD.Support.RddFieldInfo[])">
      <summary>Add columns defined in an array.</summary>
      <param name="aFields">Array of RddFieldInfo objects.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.DbEval(XSharp.RDD.Support.DbEvalInfo)">
      <summary>Evaluate a code block for each row.</summary>
      <param name="info">object containing the information about which rows to visit.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Delete">
      <summary>Mark the row at the current cursor position for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Deleted">
      <summary>Is the current row deleted?</summary>
    </member>
    <member name="P:XSharp.RDD.IRdd.Driver">
      <summary>Driver (RDD) name of the object.</summary>
    </member>
    <member name="P:XSharp.RDD.IRdd.EoF">
      <summary>Is the table at the logical end-of-file.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.EvalBlock(XSharp.ICodeblock)">
      <summary>Evaluate a code block.</summary>
      <param name="sBlock">The code block to evaluate.</param>
    </member>
    <member name="P:XSharp.RDD.IRdd.Exclusive">
      <summary>Is the Workarea opened Exclusively</summary>
    </member>
    <member name="P:XSharp.RDD.IRdd.FieldCount">
      <summary>The # of fields in the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.FieldIndex(System.String)">
      <summary>Return the ONE based field index for a field name.</summary>
      <param name="fieldName">The name of the field in the database file structure. When the name is not found it will also check for a field alias with this name.</param>
      <returns>The ONE based position of the field in the database file structure.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.FieldInfo(System.Int32,System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>The current value for the property indicated with &lt;nOrdinal&gt;</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.FieldName(System.Int32)">
      <summary>Retrieve a column name based on its ONE based column number.</summary>
      <param name="nFldPos">The ONE based position of the column whose name you want to obtain.</param>
      <returns>The name of the column.</returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.FilterText">
      <summary>The filter condition as a string.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.Flush">
      <summary>Flush the changes to the table, its indexes and memo file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ForceRel">
      <summary>Force all pending relational seeks to be performed.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Found">
      <summary>The outcome of the last search operation.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetField(System.Int32)">
      <summary>Retrieve the field information for a column based on its ONE based column number.</summary>
      <param name="nFldPos">The ONE based position of the column whose info you want to obtain.</param>
      <returns>The Field information for the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetRec">
      <summary>Retrieve the RDD's record buffer as array of bytes.</summary>
      <returns>Record buffer of the RDD. This is the original buffer, so changing this buffer may cause corruption !</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetScope">
      <summary>Retrieve the active locate condition.</summary>
      <returns>The current scope information for the RDD.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetValue(System.Int32)">
      <summary>Get a value for the specified column.</summary>
      <param name="nFldPos">The ONE based position of the column whose value you want to obtain.</param>
      <returns>The value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">ONE based position for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
      <returns>TRUE when the operation succeeded. Otherwise FALSE to indicate a failure.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">ONE based position for which the length should be retrieved.</param>
      <returns>The length of the value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoBottom">
      <summary>Position the cursor to the last logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoCold">
      <summary>Write the contents of a work area's memory to the data store (usually a disk).</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoHot">
      <summary>Mark a data buffer as hot, indicating that it needs to be written to the data store.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoTo(System.Int32)">
      <summary>Position the cursor to a specific, physical row.</summary>
      <param name="nRec">The ONE based row number of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoToId(System.Object)">
      <summary>Position the cursor to a specific, physical identity.</summary>
      <param name="oRec">The ONE based row ID of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoTop">
      <summary>Position the cursor to the first logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.HeaderLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Lock or unlock the header of a database file.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Info(System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a work area.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="M:XSharp.RDD.IRdd.Lock(XSharp.RDD.Support.DbLockInfo@)">
      <summary>Perform a lock.</summary>
      <param name="uiMode">An object specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Open(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open a table.</summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about an index.</summary>
      <param name="info">An object containing information about the order to retrieve the info for.</param>
      <param name="nOrdinal">Specifies the type of information to retrieve.</param>
      <returns>The requested value for the specified index.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info" />
      <param name="info">An object containing information about the orderlist (file) to delete.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Pack">
      <summary>Physically remove rows marked for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.PutRec(System.Byte[])">
      <summary>Replace the row at the current cursor position with the contents of a byte array.</summary>
      <param name="aRec">The buffer containing the information that you want to write.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.PutValue(System.Int32,System.Object)">
      <summary>Write a value for a specified column</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the table this column.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Recall">
      <summary>Remove the deletion marker from the row at the current cursor position.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.RecCount">
      <summary>The number of rows.</summary>
    </member>
    <member name="P:XSharp.RDD.IRdd.RecId">
      <summary>The row identifier at the current cursor position.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.RecInfo(System.Int32,System.Object,System.Object)">
      <summary>Retrieve and optionally change information about a row.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oRecid">If specified (not null), then this parameter is used to specify for which object to retrieve the info.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="P:XSharp.RDD.IRdd.RecNo">
      <summary>The physical row identifier at the current cursor position.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.Refresh">
      <summary>Discard all changes to the current record and reread the buffer from disk. When the current buffer is in Append mode then the server will move to the bottom of the file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.RelArea(System.UInt32)">
      <summary>Retrieve the logical number of a related work area.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the logical number.</param>
      <returns>The area number of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.RelEval(XSharp.RDD.Support.DbRelInfo)">
      <summary>Evaluate a code block against the relation in a work area.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.RelText(System.UInt32)">
      <summary>Retrieve the key expression of a relation.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the key expression. </param>
      <returns>The key expression of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SetFieldExtent(System.Int32)">
      <summary>Set the Number of Fields the AddField Method will add.</summary>
      <param name="fieldCount">Number of fields that will be added.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SetFilter(XSharp.RDD.Support.DbFilterInfo)">
      <summary>Set the filter condition.</summary>
      <param name="info">object containing the filter information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SetRel(XSharp.RDD.Support.DbRelInfo)">
      <summary>Set a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SetScope(XSharp.RDD.Support.DbScopeInfo)">
      <summary>Set the locate condition.</summary>
      <param name="info">object containing the scope information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Shared">
      <summary>Is the current Workarea opened Shared?</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.Skip(System.Int32)">
      <summary>Position the cursor relative to its current position.</summary>
      <param name="nToSkip">The number of rows to skip.
            If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SkipFilter(System.Int32)">
      <summary>Position the cursor, respecting scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive,
            the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SkipRaw(System.Int32)">
      <summary>Position the cursor regardless of scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SkipScope(System.Int32)">
      <summary>Position the cursor relative to its current position within the current scope.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Sort(XSharp.RDD.Support.DbSortInfo)">
      <summary>Physically reorder a table.</summary>
      <param name="info">An object containing information about now to sort the table.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SyncChildren">
      <summary>Force relational movement in child work areas to synchronize them with the parent work area.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Trans(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy one or more rows from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.TransRec(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy a single row from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.UnLock(System.Object)">
      <summary>Release locks.</summary>
      <param name="oRecId">The row number to unlock.  This argument is provided for drivers that support multiple row locks.  By convention, a value of zero indicates that all rows should be unlocked.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Zap">
      <summary>Physically remove all rows from a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="T:XSharp.RDD.RddError">
      <summary>Error subclass used by the RDD system.</summary>
    </member>
    <member name="M:XSharp.RDD.RddError.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RddError</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RddError.#ctor(System.Exception,System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RddError</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RddError.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RddError</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RddError.#ctor(System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RddError</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RddError.PostArgumentError(System.String,System.UInt32,System.String,System.UInt32,System.Object[])"></member>
    <member name="M:XSharp.RDD.RddError.PostError(System.String,System.UInt32,System.UInt32)"></member>
    <member name="M:XSharp.RDD.RddError.PostNoTableError(System.String)"></member>
    <member name="T:XSharp.RDD.RegisteredRDD">
      <summary>This class is used to register RDD names with the matching System.Types</summary>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.#ctor(System.String,System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RegisteredRDD</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.#ctor(System.String,System.Type)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RegisteredRDD</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.Add(XSharp.RDD.RegisteredRDD)">
      <summary>Add a registration for a new RDD.</summary>
      <returns>FALSE when the RDD name is already registered, TRUE when the registration succeeded.</returns>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.Assembly">
      <summary>Assembly object where the RDD is defined</summary>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.AssemblyName">
      <summary>Name of the assembly where the RDD is defined.</summary>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.Find(System.String)">
      <summary>Locate an entry for a particular RDD name</summary>
      <returns>NULL when no RDD registration found.</returns>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.Load">
      <summary> try to resolve the RDD </summary>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.RddName">
      <summary>'Common' name of the RDD</summary>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.RddType">
      <summary>Type of the RDD</summary>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.TypeName">
      <summary>Fully qualified type name of the RDD</summary>
    </member>
    <member name="T:XSharp.RDD.SQLProperty">
      <summary>Enum that matches the various FoxPro Sql properties, used in SqlGetProp() and SqlSetProp()</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.Asynchronous">
      <summary>Specifies whether result sets are returned synchronously.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.BatchMode">
      <summary>Specifies whether SqlExec( ) returns result sets all at once (True (.T.), the default),
            or individually with SqlMoreResults( ) (False (.F.)).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ConnectBusy">
      <summary>Contains True (.T.) if a shared connection is busy; otherwise contains False (.F.).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ConnectString">
      <summary>The login connection string.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ConnectTimeOut">
      <summary>Specifies the time to wait (in seconds) before returning a connection time-out error.
            If you specify 0, the wait is indefinite and a time-out error is never returned. ConnectTimeOut can be 0 to 600. The default is 15.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.DataSource">
      <summary>The name of the data source as defined in the ODBC.INI file.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.DisconnectRollback">
      <summary>Specifies if a pending transaction is committed or rolled back when SqlDisconnect( ) is called for the last connection handle.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.DispLogin">
      <summary>Contains a numeric value that determines when the ODBC Login dialog box is displayed.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.DispWarnings">
      <summary>Specifies if error messages are displayed (True (.T.)) or are not displayed (False (.F.), the default).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.IdleTimeout">
      <summary>The idle timeout interval in minutes. Active connections are deactivated after the specified time interval.
            The default value is 0 (wait indefinitely).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.NativeCommand">
      <summary>The native commandtext in the SQLStatement object.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ODBChdbc">
      <summary>The internal ODBC connection, which may be used by external code to call ODBC.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ODBChstmt">
      <summary>The internal ODBC statement , which may be used by external code to call ODBC.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.PacketSize">
      <summary>The size of the network packet used by the connection. Adjusting this value can improve performance.
            The default value is 4096 bytes (4K).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.Password">
      <summary>The connection password.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.QueryTimeOut">
      <summary>Specifies the time to wait (in seconds) before returning a general time-out error.
            If you specify 0 (the default), the wait is indefinite and a time-out error is never returned. QueryTimeOut can be 0 to 600.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.Shared">
      <summary>Specifies whether the underlying connection is a shared connection (True (.T.)), or not (False (.F.)).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.Transactions">
      <summary>Contains a numeric value that determines how the connection manages transactions on the remote table.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.UserId">
      <summary>The user identification.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.WaitTime">
      <summary>The amount of time in milliseconds that elapses before Visual FoxPro checks if the SQL statement
            has completed executing. The default is 100 milliseconds.</summary>
    </member>
    <member name="T:XSharp.RDD.Workarea">
      <summary>Base class for DBF based RDDs. Holds common properties such as the Workarea number, Alias, Fields list and various flags.</summary>
    </member>
    <member name="F:XSharp.RDD.Workarea._Fields">
      <summary>List of Fields</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea._getMemoBlockNumber(System.Int32)"></member>
    <member name="M:XSharp.RDD.Workarea.AddField(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Add a column.</summary>
      <param name="info">RddFieldInfo object.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Alias">
      <summary>Retrieve the alias name.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Append(System.Boolean)">
      <summary>Append a blank row and position the cursor to the new row.</summary>
      <param name="lReleaseLock">A flag that is TRUE if you want to clear all pending row locks before appending the new row and FALSE if you want to add the new row to the end of the current lock list.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.AppendLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Add a newly appended row to the list of locked rows.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Area">
      <summary>Retrieve the Workarea number.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.BlobInfo(System.UInt32,System.UInt32)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
    </member>
    <member name="P:XSharp.RDD.Workarea.BoF">
      <summary>Is the table at the logical beginning-of-file.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.Bottom">
      <summary>Is at bottom ?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.ChildEnd(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ChildStart(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ChildSync(XSharp.RDD.Support.DbRelInfo)">
      <summary>Post a pending relational movement, indicating that the specified child work area has been affected by a parental movement.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ClearFilter">
      <summary>Clear the active filter condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ClearRel">
      <summary>Clear relations.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ClearScope">
      <summary>Clear the active locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Close">
      <summary>Close a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Closed"></member>
    <member name="M:XSharp.RDD.Workarea.CloseMemFile">
      <summary>Close the memo file</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Compile(System.String)">
      <summary>Compile an expression.</summary>
      <param name="sBlock">The expression to compile.</param>
    </member>
    <member name="M:XSharp.RDD.Workarea.Continue">
      <summary>Goto the next record based on the corrent locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Create(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create a table.</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.CreateFields(XSharp.RDD.Support.RddFieldInfo[])">
      <summary>Add columns defined in an array.</summary>
      <param name="aFields">Array of RddFieldInfo objects.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.DbEval(XSharp.RDD.Support.DbEvalInfo)">
      <summary>Evaluate a code block for each row.</summary>
      <param name="info">object containing the information about which rows to visit.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Delete">
      <summary>Mark the row at the current cursor position for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Deleted">
      <summary>Is the current row deleted?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>XSharp.RDD.Workarea</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>XSharp.RDD.Workarea</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>XSharp.RDD.Workarea</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:XSharp.RDD.Workarea.Driver">
      <summary>Driver (RDD) name of the object.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.EoF">
      <summary>Is the table at the logical end-of-file.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.EvalBlock(XSharp.ICodeblock)">
      <summary>Evaluate a code block.</summary>
      <param name="sBlock">The code block to evaluate.</param>
    </member>
    <member name="P:XSharp.RDD.Workarea.Exclusive">
      <summary>Is the Workarea opened Exclusively</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.FieldCount">
      <summary>The # of fields in the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.FieldIndex(System.String)">
      <summary>Return the ONE based field index for a field name.</summary>
      <param name="fieldName">The name of the field in the database file structure. When the name is not found it will also check for a field alias with this name.</param>
      <returns>The ONE based position of the field in the database file structure.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.FieldInfo(System.Int32,System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>The current value for the property indicated with &lt;nOrdinal&gt;</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.FieldName(System.Int32)">
      <summary>Retrieve a column name based on its ONE based column number.</summary>
      <param name="nFldPos">The ONE based position of the column whose name you want to obtain.</param>
      <returns>The name of the column.</returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.FileName">
      <summary>File name of the main file</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.FilterInfo">
      <summary>Current Filter</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.FilterText">
      <summary>The filter condition as a string.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Flush">
      <summary>Flush the changes to the table, its indexes and memo file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ForceRel">
      <summary>Force all pending relational seeks to be performed.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Found">
      <summary>The outcome of the last search operation.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetField(System.Int32)"></member>
    <member name="M:XSharp.RDD.Workarea.GetRec">
      <summary>Retrieve the RDD's record buffer as array of bytes.</summary>
      <returns>Record buffer of the RDD. This is the original buffer, so changing this buffer may cause corruption !</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetScope">
      <summary>Retrieve the active locate condition.</summary>
      <returns>The current scope information for the RDD.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetValue(System.Int32)">
      <summary>Get a value for the specified column.</summary>
      <param name="nFldPos">The ONE based position of the column whose value you want to obtain.</param>
      <returns>The value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">ONE based position for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
      <returns>TRUE when the operation succeeded. Otherwise FALSE to indicate a failure.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">ONE based position for which the length should be retrieved.</param>
      <returns>The length of the value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoBottom">
      <summary>Position the cursor to the last logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoCold">
      <summary>Write the contents of a work area's memory to the data store (usually a disk).</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoHot">
      <summary>Mark a data buffer as hot, indicating that it needs to be written to the data store.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoTo(System.Int32)">
      <summary>Position the cursor to a specific, physical row.</summary>
      <param name="nRec">The ONE based row number of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoToId(System.Object)">
      <summary>Position the cursor to a specific, physical identity.</summary>
      <param name="oRec">The ONE based row ID of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoTop">
      <summary>Position the cursor to the first logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.HasProperties"></member>
    <member name="M:XSharp.RDD.Workarea.HeaderLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Lock or unlock the header of a database file.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Info(System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a work area.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="M:XSharp.RDD.Workarea.Lock(XSharp.RDD.Support.DbLockInfo@)">
      <summary>Perform a lock.</summary>
      <param name="uiMode">An object specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Memo">
      <summary>Current memo implementation.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Open(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open a table.</summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.OrderCondInfo">
      <summary>Current Order condition</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about an index.</summary>
      <param name="info">An object containing information about the order to retrieve the info for.</param>
      <param name="nOrdinal">Specifies the type of information to retrieve.</param>
      <returns>The requested value for the specified index.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info" />
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Pack">
      <summary>Physically remove rows marked for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Properties"></member>
    <member name="M:XSharp.RDD.Workarea.PutRec(System.Byte[])">
      <summary>Replace the row at the current cursor position with the contents of a byte array.</summary>
      <param name="aRec">The buffer containing the information that you want to write.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.PutValue(System.Int32,System.Object)">
      <summary>Write a value for a specified column</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the table this column.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.ReadOnly">
      <summary> Is the file opened ReadOnly ?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Recall">
      <summary>Remove the deletion marker from the row at the current cursor position.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.RecCount">
      <summary>The number of rows.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.RecId">
      <summary>The row identifier at the current cursor position.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.RecInfo(System.Int32,System.Object,System.Object)">
      <summary>Retrieve and optionally change information about a row.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oRecid">If specified (not null), then this parameter is used to specify for which object to retrieve the info.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="P:XSharp.RDD.Workarea.RecNo">
      <summary>The physical row identifier at the current cursor position.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.RecordBuffer">
      <summary>Current Record</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Refresh">
      <summary>Discard all changes to the current record and reread the buffer from disk. When the current buffer is in Append mode then the server will move to the bottom of the file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.RelArea(System.UInt32)">
      <summary>Retrieve the logical number of a related work area.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the logical number.</param>
      <returns>The area number of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.RelEval(XSharp.RDD.Support.DbRelInfo)">
      <summary>Evaluate a code block against the relation in a work area.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.RelText(System.UInt32)">
      <summary>Retrieve the key expression of a relation.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the key expression. </param>
      <returns>The key expression of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SetFieldExtent(System.Int32)">
      <summary>Set the Number of Fields the AddField Method will add.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.SetFilter(XSharp.RDD.Support.DbFilterInfo)">
      <summary>Set the filter condition.</summary>
      <param name="info">object containing the filter information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SetRel(XSharp.RDD.Support.DbRelInfo)">
      <summary>Set a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SetScope(XSharp.RDD.Support.DbScopeInfo)">
      <summary>Set the locate condition.</summary>
      <param name="info">object containing the scope information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Shared">
      <summary>Is the current Workarea opened Shared?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Skip(System.Int32)">
      <summary>Position the cursor relative to its current position.</summary>
      <param name="nToSkip">The number of rows to skip.
            If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SkipFilter(System.Int32)">
      <summary>Position the cursor, respecting scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive,
            the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SkipRaw(System.Int32)">
      <summary>Position the cursor regardless of scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SkipScope(System.Int32)">
      <summary>Position the cursor relative to its current position within the current scope.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Sort(XSharp.RDD.Support.DbSortInfo)">
      <summary>Physically reorder a table.</summary>
      <param name="info">An object containing information about now to sort the table.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SyncChildren">
      <summary>Force relational movement in child work areas to synchronize them with the parent work area.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Top">
      <summary>Is at top?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Trans(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy one or more rows from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.TransRec(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy a single row from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.UnLock(System.Object)">
      <summary>Release locks.</summary>
      <param name="oRecId">The row number to unlock.  This argument is provided for drivers that support multiple row locks.  By convention, a value of zero indicates that all rows should be unlocked.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Zap">
      <summary>Physically remove all rows from a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="T:XSharp.RDD.Workareas">
      <summary>Class that contains the list of open Workareas. Each thread will have its own list.</summary>
    </member>
    <member name="M:XSharp.RDD.Workareas._CloseArea(XSharp.RDD.IRdd)"></member>
    <member name="M:XSharp.RDD.Workareas._FindRDD(XSharp.RDD.IRdd,XSharp.RDD.Workareas@)"></member>
    <member name="M:XSharp.RDD.Workareas._Remove(XSharp.RDD.IRdd)"></member>
    <member name="M:XSharp.RDD.Workareas.CloseAll">
      <summary>Close All RDDs referenced by this Workarea list</summary>
      <returns>TRUE when all areas were closed succesfully. When one or more areas failed to close then FALSE is returned.</returns>
    </member>
    <member name="M:XSharp.RDD.Workareas.CloseArea(System.UInt32)">
      <summary>Close area with 1 based Workarea number</summary>
      <param name="nArea">1 based Area number for which to find the alias</param>
      <returns>TRUE when the area was closed succesfully.</returns>
    </member>
    <member name="M:XSharp.RDD.Workareas.CloseArea(XSharp.RDD.IRdd)">
      <summary>Close the area where this RDD object is used.</summary>
      <param name="oRDD">Object of te RDD that needs to be closed.</param>
      <returns>TRUE when the area was closed.</returns>
    </member>
    <member name="M:XSharp.RDD.Workareas.CommitAll">
      <summary>Commit changes in all workares in this Workarea list</summary>
      <returns>TRUE when all areas were committed succesfully. When one or more areas failed to commit then FALSE is returned.</returns>
    </member>
    <member name="P:XSharp.RDD.Workareas.CurrentWorkarea">
      <summary>Get Current Workarea Object</summary>
    </member>
    <member name="P:XSharp.RDD.Workareas.CurrentWorkareaNO">
      <summary>Get 1 based Current Workarea Number</summary>
    </member>
    <member name="M:XSharp.RDD.Workareas.FindAlias(System.String)">
      <summary> Return 1 based Workarea Number for Alias or 0 when no found</summary>
      <param name="sAlias">Alias of area to look for. Case INsensitive </param>
      <returns>Area number of an the table with the given alias.</returns>
    </member>
    <member name="M:XSharp.RDD.Workareas.FindEmptyArea(System.Boolean)">
      <summary> Return 1 based empty Workarea</summary>
      <param name="fromStart">Do we start to search from the start (TRUE) or the end (FALSE)</param>
      <returns>Area number of an area where no table is open.</returns>
    </member>
    <member name="M:XSharp.RDD.Workareas.GetAlias(System.UInt32)">
      <summary>Get Alias for 1 based Workarea Number</summary>
      <param name="nArea">1 based Area number for which to find the alias</param>
      <returns>Alias or an empty string when there is no table open in the area</returns>
    </member>
    <member name="M:XSharp.RDD.Workareas.GetCargo(System.UInt32)"></member>
    <member name="M:XSharp.RDD.Workareas.GetRDD(System.UInt32)">
      <summary>Get RDD object for 1 based Workarea Number</summary>
    </member>
    <member name="F:XSharp.RDD.Workareas.MaxWorkareas"></member>
    <member name="M:XSharp.RDD.Workareas.SetArea(System.UInt32,XSharp.RDD.IRdd)">
      <summary>Set RDD object and ALias for 1 based Workarea Number</summary>
    </member>
    <member name="M:XSharp.RDD.Workareas.SetCargo(System.UInt32,System.Object)"></member>
    <member name="M:XSharp.RDD.Workareas.UnLockAll">
      <summary>Unlock All RDDs referenced by this Workarea list</summary>
    </member>
    <member name="T:XSharp.RDD.WrapperRDD">
      <summary>This class can be used to wrap an existing RDD and add some functionality to it, such as
             logging, encryption etc. <br />
             To use it, create a subclass of this class and implement the methods that you want to override.<br />
             The constructor of this class takes an existing RDD object and automatically replaces it in the
             Workarea table.
             </summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.#ctor(XSharp.RDD.IRdd)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.WrapperRDD</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.AddField(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Add a column.</summary>
      <param name="info">RddFieldInfo object.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.Alias">
      <summary>Retrieve the alias name.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Append(System.Boolean)">
      <summary>Append a blank row and position the cursor to the new row.</summary>
      <param name="lReleaseLock">A flag that is TRUE if you want to clear all pending row locks before appending the new row and FALSE if you want to add the new row to the end of the current lock list.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.AppendLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Add a newly appended row to the list of locked rows.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.Area">
      <summary>Retrieve the Workarea number.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.BlobInfo(System.UInt32,System.UInt32)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.BoF">
      <summary>Is the table at the logical beginning-of-file.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.ChildEnd(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.ChildStart(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.ChildSync(XSharp.RDD.Support.DbRelInfo)">
      <summary>Post a pending relational movement, indicating that the specified child work area has been affected by a parental movement.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.ClearFilter">
      <summary>Clear the active filter condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.ClearRel">
      <summary>Clear relations.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.ClearScope">
      <summary>Clear the active locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Close">
      <summary>Close a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.CloseMemFile">
      <summary>Close the memo file</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Compile(System.String)">
      <summary>Compile an expression.</summary>
      <param name="sBlock">The expression to compile.</param>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Continue">
      <summary>Goto the next record based on the corrent locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Create(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create a table.</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.CreateFields(XSharp.RDD.Support.RddFieldInfo[])">
      <summary>Add columns defined in an array.</summary>
      <param name="aFields">Array of RddFieldInfo objects.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.DbEval(XSharp.RDD.Support.DbEvalInfo)">
      <summary>Evaluate a code block for each row.</summary>
      <param name="info">object containing the information about which rows to visit.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.DebuggerDisplay"></member>
    <member name="M:XSharp.RDD.WrapperRDD.Delete">
      <summary>Mark the row at the current cursor position for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.Deleted">
      <summary>Is the current row deleted?</summary>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.Driver">
      <summary>Driver (RDD) name of the object.</summary>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.EoF">
      <summary>Is the table at the logical end-of-file.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.EvalBlock(XSharp.ICodeblock)">
      <summary>Evaluate a code block.</summary>
      <param name="sBlock">The code block to evaluate.</param>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.Exclusive">
      <summary>Is the Workarea opened Exclusively</summary>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.FieldCount">
      <summary>The # of fields in the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.FieldIndex(System.String)">
      <summary>Return the ONE based field index for a field name.</summary>
      <param name="fieldName">The name of the field in the database file structure. When the name is not found it will also check for a field alias with this name.</param>
      <returns>The ONE based position of the field in the database file structure.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.FieldInfo(System.Int32,System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>The current value for the property indicated with &lt;nOrdinal&gt;</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.FieldName(System.Int32)">
      <summary>Retrieve a column name based on its ONE based column number.</summary>
      <param name="nFldPos">The ONE based position of the column whose name you want to obtain.</param>
      <returns>The name of the column.</returns>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.FilterText">
      <summary>The filter condition as a string.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Flush">
      <summary>Flush the changes to the table, its indexes and memo file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.ForceRel">
      <summary>Force all pending relational seeks to be performed.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.Found">
      <summary>The outcome of the last search operation.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GetField(System.Int32)">
      <summary>Retrieve the field information for a column based on its ONE based column number.</summary>
      <param name="nFldPos">The ONE based position of the column whose info you want to obtain.</param>
      <returns>The Field information for the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GetRec">
      <summary>Retrieve the RDD's record buffer as array of bytes.</summary>
      <returns>Record buffer of the RDD. This is the original buffer, so changing this buffer may cause corruption !</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GetScope">
      <summary>Retrieve the active locate condition.</summary>
      <returns>The current scope information for the RDD.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GetValue(System.Int32)">
      <summary>Get a value for the specified column.</summary>
      <param name="nFldPos">The ONE based position of the column whose value you want to obtain.</param>
      <returns>The value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">ONE based position for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
      <returns>TRUE when the operation succeeded. Otherwise FALSE to indicate a failure.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">ONE based position for which the length should be retrieved.</param>
      <returns>The length of the value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GoBottom">
      <summary>Position the cursor to the last logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GoCold">
      <summary>Write the contents of a work area's memory to the data store (usually a disk).</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GoHot">
      <summary>Mark a data buffer as hot, indicating that it needs to be written to the data store.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GoTo(System.Int32)">
      <summary>Position the cursor to a specific, physical row.</summary>
      <param name="nRec">The ONE based row number of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GoToId(System.Object)">
      <summary>Position the cursor to a specific, physical identity.</summary>
      <param name="oRec">The ONE based row ID of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.GoTop">
      <summary>Position the cursor to the first logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.HeaderLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Lock or unlock the header of a database file.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Info(System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a work area.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Lock(XSharp.RDD.Support.DbLockInfo@)">
      <summary>Perform a lock.</summary>
      <param name="uiMode">An object specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Open(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open a table.</summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about an index.</summary>
      <param name="info">An object containing information about the order to retrieve the info for.</param>
      <param name="nOrdinal">Specifies the type of information to retrieve.</param>
      <returns>The requested value for the specified index.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info" />
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Pack">
      <summary>Physically remove rows marked for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.PutRec(System.Byte[])">
      <summary>Replace the row at the current cursor position with the contents of a byte array.</summary>
      <param name="aRec">The buffer containing the information that you want to write.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.PutValue(System.Int32,System.Object)">
      <summary>Write a value for a specified column</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the table this column.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Recall">
      <summary>Remove the deletion marker from the row at the current cursor position.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.RecCount">
      <summary>The number of rows.</summary>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.RecId">
      <summary>The row identifier at the current cursor position.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.RecInfo(System.Int32,System.Object,System.Object)">
      <summary>Retrieve and optionally change information about a row.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oRecid">If specified (not null), then this parameter is used to specify for which object to retrieve the info.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.RecNo">
      <summary>The physical row identifier at the current cursor position.</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Refresh">
      <summary>Discard all changes to the current record and reread the buffer from disk. When the current buffer is in Append mode then the server will move to the bottom of the file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.RelArea(System.UInt32)">
      <summary>Retrieve the logical number of a related work area.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the logical number.</param>
      <returns>The area number of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.RelEval(XSharp.RDD.Support.DbRelInfo)">
      <summary>Evaluate a code block against the relation in a work area.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.RelText(System.UInt32)">
      <summary>Retrieve the key expression of a relation.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the key expression. </param>
      <returns>The key expression of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.SetFieldExtent(System.Int32)">
      <summary>Set the Number of Fields the AddField Method will add.</summary>
      <param name="fieldCount">Number of fields that will be added.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.SetFilter(XSharp.RDD.Support.DbFilterInfo)">
      <summary>Set the filter condition.</summary>
      <param name="info">object containing the filter information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.SetRel(XSharp.RDD.Support.DbRelInfo)">
      <summary>Set a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.SetScope(XSharp.RDD.Support.DbScopeInfo)">
      <summary>Set the locate condition.</summary>
      <param name="info">object containing the scope information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.WrapperRDD.Shared">
      <summary>Is the current Workarea opened Shared?</summary>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Skip(System.Int32)">
      <summary>Position the cursor relative to its current position.</summary>
      <param name="nToSkip">The number of rows to skip.
            If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.SkipFilter(System.Int32)">
      <summary>Position the cursor, respecting scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive,
            the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.SkipRaw(System.Int32)">
      <summary>Position the cursor regardless of scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.SkipScope(System.Int32)">
      <summary>Position the cursor relative to its current position within the current scope.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Sort(XSharp.RDD.Support.DbSortInfo)">
      <summary>Physically reorder a table.</summary>
      <param name="info">An object containing information about now to sort the table.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.SyncChildren">
      <summary>Force relational movement in child work areas to synchronize them with the parent work area.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Trans(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy one or more rows from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.TransRec(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy a single row from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.UnLock(System.Object)">
      <summary>Release locks.</summary>
      <param name="oRecId">The row number to unlock.  This argument is provided for drivers that support multiple row locks.  By convention, a value of zero indicates that all rows should be unlocked.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.WrapperRDD.Zap">
      <summary>Physically remove all rows from a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="T:XSharp.RDD.Enums.AutoShareMode">
      <summary>This enum specifies how files should be opened.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DBFFieldFlags">
      <summary>DBF Field flags.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.System">
      <summary>System Field ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Nullable">
      <summary>Field is Nullable</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Binary">
      <summary>Field is Binary</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.AutoIncrement">
      <summary>Field is AutoIncrement</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Compressed">
      <summary>Field is Compressed (not used yet, for compatibility with Harbour)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Encrypted">
      <summary>Field is Encrypted (not used yet, for compatibility with Harbour)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Unicode">
      <summary>Field contains Unicode text</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbfHeaderCodepage">
      <summary>This enum specifies the various code pages that can appear in DBF files.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbfHeaderCodepage.CP_DBF_WIN_CHINESE_1">
      <summary>(Hong Kong SAR, Taiwan) </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbfHeaderCodepage.CP_DBF_WIN_CHINESE_2">
      <summary>Chinese (PRC, Singapore) </summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbFieldInfo">
      <summary>This enum specifies the various values that the FieldInfo method for the IRDD interface accepts.
            </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_NAME">
      <summary>Returns the name of the field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_TYPE">
      <summary>Returns the data type of the field. This is a single character string such as 'C' or 'N'.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_LEN">
      <summary>Returns the length of the field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_DEC">
      <summary> Returns the number of decimal places for the field. </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_ALIAS">
      <summary>Returns and optionally changes an alternate name (or alias) by which a field can be referenced (by default, same as DBS_NAME).  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_FLAGS">
      <summary>Returns the field flags for a field (a value from the DBFFieldFlags enum)  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_ISNULL">
      <summary>Harbour extension: Returns the flag that indicates if a field is Nullable.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_COUNTER">
      <summary>Harbour extension: Returns the next available value for autoincrement fields.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_STEP">
      <summary>Harbour extension: Returns the step value for autoincrement fields.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_CAPTION">
      <summary>Foxpro extension: Returns the field caption.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_COLUMNINFO">
      <summary>VFP / SQL extension: Returns the object with the complete column information.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_DESCRIPTION">
      <summary>VFP / SQL extension: Returns a string describing the object (the comment).</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLANK">
      <summary>X# Extension: returns a blank value for the field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_GET">
      <summary>Gets a BLOB value.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_TYPE">
      <summary>Unlike memo fields maintained in .DBT files, BLOB files allow you to store many different types of data in memo fields. This returns type type of the BLOB as a single character string.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_LEN">
      <summary>Returns the length of the BLOB data in a memo field as an unsigned long integer.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_OFFSET">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_POINTER">
      <summary>Returns a numeric pointer to the BLOB data associated with a memo field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_DIRECT_TYPE">
      <summary>Returns the type of data in a BLOB as an unsigned long integer, without referencing a particular memo field.
             With this constant, you must specify the BLOB using a numeric pointer obtained from BLOBDirectPut(), BLOBDirectImport(),
             or DBFieldInfo(DBS_BLOB_POINTER, &lt;nFieldPos&gt;).
            </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_DIRECT_LEN">
      <summary>Returns the length of data in a BLOB as an unsigned long integer, without referencing a particular memo field.
             With this constant, you must specify the BLOB using a numeric pointer obtained from BLOBDirectPut(), BLOBDirectImport(),
             or DBFieldInfo(DBS_BLOB_POINTER, &lt;nFieldPos&gt;).
            </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_STRUCT">
      <summary>Return the RDD FieldInfo structure</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_PROPERTIES">
      <summary>Returns the number of properties defined for a field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_USER">
      <summary>Start of user defined FieldInfo values.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbFieldType">
      <summary>This enum specifies the various field types that can appear in DBF files.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Character">
      <summary>'C', uses len and dec</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Date">
      <summary>'D', 8 bytes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Logic">
      <summary>'L', 1 byte</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Memo">
      <summary>'M', 4 or 10 bytes see Length</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Number">
      <summary>'N', uses len and dec</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.VOObject">
      <summary>'O', is anybody using this ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Blob">
      <summary>'W' = Blob 4 or 10 bytes VFP type</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Currency">
      <summary> 'Y'	VFP Type 8 byte </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Double">
      <summary>'B'	VFP Type, also '8'</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.DateTime">
      <summary>'T'	VFP Type can be 4 or 8 bytes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Float">
      <summary>'F'	VFP Type, uses len and dec</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.General">
      <summary>'G'    VFP type Ole 4 or 10 bytes </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Integer">
      <summary>'I'	VFP Type , may be autoInc</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Picture">
      <summary>'P'	VFP Type, 4 or 10 bytes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.VarBinary">
      <summary>'Q'    VFP Type=, between 1 and 255 </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.VarChar">
      <summary>'V'    VFP Type </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.NullFlags">
      <summary>'0'    VFP Type, contains Null Flags</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbInfo">
      <summary>This enum specifies the various values that the Info method for the IRDD interface accepts.
            </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISDBF">
      <summary>Logical: Is the RDD DBF based ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_CANPUTREC">
      <summary>Logical: Does the RDD support the PutRec mechanism ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETHEADERSIZE">
      <summary>Numeric: Get header size of the file  ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LASTUPDATE">
      <summary>Date:    Last date RDD file updated  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETDELIMITER">
      <summary>String:  Get default FIELD delimiter</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SETDELIMITER">
      <summary>String:  Set default FIELD delimiter</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETRECSIZE">
      <summary>Numeric: Get record size </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETLOCKARRAY">
      <summary>Array:   Get array of locked records</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_TABLEEXT">
      <summary>String:  Get table file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_READONLY">
      <summary>Logic: is the file opened readonly</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISFLOCK">
      <summary>Logic: Is there a file lock active? </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FILESTREAM">
      <summary>Stream: The RDDs stream object</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_CHILDCOUNT">
      <summary>Number: Number of child relations set</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FILEHANDLE">
      <summary>IntPtr: The data file's handle</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FULLPATH">
      <summary>String: Full path to data file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISANSI">
      <summary>Logic: Is the file ansi encoded</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_BOF">
      <summary>Logic: Same as Bof()</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_EOF">
      <summary>Logic: Same as Eof()</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DBFILTER">
      <summary>String: Current Filter setting </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FOUND">
      <summary>Logic: Same as Found() </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FCOUNT">
      <summary>Number: Number of fields per record</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LOCKCOUNT">
      <summary>Number: Number of record locks  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_VALIDBUFFER">
      <summary>Logic: Is the buffer Valid</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ALIAS">
      <summary>String: Alias</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETSCOPE">
      <summary>Object: The ScopeInfo</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LOCKOFFSET">
      <summary>Number: Lock offset</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SHARED">
      <summary>Logic: is the file opened shared</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOEXT">
      <summary>String: Memo file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOHANDLE">
      <summary>Intptr: The memo file's handle</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_BLOB_HANDLE">
      <summary>Intptr: The memo file's handle</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOBLOCKSIZE">
      <summary>Number: The memo block size</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_CODEPAGE">
      <summary>Number: The Windows Codepage</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DOSCODEPAGE">
      <summary>Number: The DOS Codepage</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_BLOB_RECOVER">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_NEWINDEXLOCK">
      <summary>Logic:  Use new index lock mechanism</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_STRICTREAD">
      <summary>Flag for avoiding RDD hierarchy and using a bigger buffer when indexing</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_OPTIMIZE">
      <summary>Flag for whether to use query optimization</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_AUTOOPEN">
      <summary>Flag for automatically opening structural indexes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_AUTOORDER">
      <summary>Should the order be set to the first index when a structural index is opened</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_AUTOSHARE">
      <summary>When a network is detected, open the index shared, otherwise open exclusively</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOSTREAM">
      <summary>Stream: The memo file's stream</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DB_VERSION">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RDD_VERSION">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RDD_LIST">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOFIELD">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_VO_MACRO_SYNTAX">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RDD_OBJECT">
      <summary>Returns RDD Object.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LOCKSCHEME">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISREADONLY">
      <summary>Harbour extension: Was the file opened readonly?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ROLLBACK">
      <summary>Harbour extension: Rollback changes made to current record</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_PASSWORD">
      <summary>Harbour extension: orkarea password </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISENCRYPTED">
      <summary>Harbour extension: The database is encrypted</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOTYPE">
      <summary>Harbour extension: Type of MEMO file: DBT, SMT, FPT</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SEPARATOR">
      <summary>Harbour extension: The record separator (as a string)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOVERSION">
      <summary>Harbour extension: sub version of memo file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_TABLETYPE">
      <summary>Harbour extension: Type of table file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SCOPEDRELATION">
      <summary>Harbour extension: Is given relation scoped</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_TRIGGER">
      <summary>Harbour extension: Get/Set trigger function</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_OPENINFO">
      <summary>Harbour extension: DBOPENINFO structure pointer</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ENCRYPT">
      <summary>Harbour extension: Encrypt table</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DECRYPT">
      <summary>Harbour extension: Decrypt table</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOPACK">
      <summary>Harbour extension: Pack memo file </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DIRTYREAD">
      <summary>Harbour extension: Get/Set index dirty read flag</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_POSITIONED">
      <summary>Harbour extension: Is cursor positioned to valid record</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISTEMPORARY">
      <summary>Harbour extension: Is the table a temporary one?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LOCKTEST">
      <summary>Harbour extension: record / file lock test</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_CODEPAGE_HB">
      <summary>Harbour extension: Codepage used also memberd by VO and Vulcan</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_TRANSREC">
      <summary>Harbour extension: Is it destination table of currently processed COPY TO or APPEND FROM operation?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SETHEADER">
      <summary>Harbour extension: DBF header updating modes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_SUPPORTED">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_CREATE">
      <summary>Harbour record map extension: create new empty work area record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_REMOVE">
      <summary>Harbour record map extension: remove active work area record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_CLEAR">
      <summary>Harbour record map extension: remove all records from WA record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_FILL">
      <summary>Harbour record map extension: add all records to WA record map </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_ADD">
      <summary>Harbour record map extension: add record to work area record map </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_DROP">
      <summary>Harbour record map extension: remove record from work area record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_TEST">
      <summary>Harbour record map extension: test if record is set in WA record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_COUNT">
      <summary>Harbour record map extension: number of records set in record map </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_HANDLE">
      <summary>Harbour record map extension: get/set record map filter handle</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_QUERY">
      <summary>if area represents result of a query, obtain expression of this query </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_INFO_HANDLE">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_FILE_RECOVER">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_FILE_INTEGRITY">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_OFFSET">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_POINTER">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_LEN">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_TYPE">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_EXPORT">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_ROOT_UNLOCK">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_ROOT_PUT">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_ROOT_GET">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_ROOT_LOCK">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_IMPORT">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_PUT">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_GET">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_GET">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_EXPORT">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_IMPORT">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_NMODE">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_EXPORT_APPEND">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_EXPORT_OVERWRITE">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_TYPE">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_LEN">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_USER">
      <summary></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_USER">
      <summary>Start of user defined DBI values</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_AND">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_CLEAR">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_COUNT">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_DESTROY">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_EXFILTER">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_GETFILTER">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_HASMAYBE">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_LEN">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_MAYBEEVAL">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NEW">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NEWDUP">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NEWQUERY">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NEXTRECNO">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NOT">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_OR">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_PREVRECNO">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_SET">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_SETFILTER">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_TEST">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbLockMode">
      <summary>This enum specifies the lock modes.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbNotificationType">
      <summary>Enum that described the possible Notification messages that are sent to clients of Workareas</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.FileCreate">
      <summary>This message is sent after a file was created. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.FileOpen">
      <summary>This message is sent after a file was opened. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.FileClose">
      <summary>This message is sent after a file is closed. The Data parameter is the name of the file that was closed.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.IndexCreate">
      <summary>This message is sent after an index was created. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.IndexDelete">
      <summary>This message is sent after an index was deleted. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.IndexOpen">
      <summary>This message is sent after an index was opened. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.IndexClose">
      <summary>This message is sent after an index was closed. The Data parameter is the name of the file that was closed.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.BeforeBulkOperation">
      <summary>This message is sent before a build operation is started. The Data parameter is a description of the operation.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.AfterBulkOperation">
      <summary>This message is sent after a build operation was completed. The Data parameter is a description of the operation.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.OrderChanged">
      <summary>This message is sent after an order was changed. The Data parameter is the name of the new order.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.BeforeFieldUpdate">
      <summary>This message is sent after a field was updated The Data parameter is the fieldname of the field that was updated.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.AfterFieldUpdate">
      <summary>This message is sent after a field was updated The Data parameter is the fieldname of the field that was updated.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.BeforeMove">
      <summary>This message is sent before the record pointer is moved. The Data parameter indicates the reason for the move</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.AfterMove">
      <summary>This message is sent after the record pointer is moved. The Data parameter indicates the reason for the move</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordAppended">
      <summary>This message is sent after a new record has been appended. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordDeleted">
      <summary>This message is sent after a record has been deleted. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordRecalled">
      <summary>This message is sent after a record has been recalled. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordLocked">
      <summary>This message is sent after a record has been locked. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordUnLocked">
      <summary>This message is sent after a record has been unlocked. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.FileCommit">
      <summary>This message is sent after a Workarea was commited. The Data parameter is the file name of area.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.OperationFailed">
      <summary>This message is sent after an operation failed. The Data parameter is the description of the operation.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbOrder_Info">
      <summary>This enum specifies the various values that the OrderInfo method for the IRDD interface accepts.
            </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_CONDITION">
      <summary>String: The order's conditional expression</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_EXPRESSION">
      <summary>String: The order's key expression</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_POSITION">
      <summary>Number: The current key position in scope and filter</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYGOTO">
      <summary>Alias for DBOI_POSITION</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYNO">
      <summary>Alias for DBOI_POSITION</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_RECNO">
      <summary>Number: The current key position disregarding filters</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_NAME">
      <summary>String: The name of the order</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_NUMBER">
      <summary>Number: The numeric position in the list of orders</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_BAGNAME">
      <summary>String: The name of the file containing this order</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_INDEXNAME">
      <summary>Alias for DBOI_BAGNAME</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_BAGEXT">
      <summary>String: The extension of the file containing this order</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_INDEXEXT">
      <summary>Alias for DBOI_BAGEXT</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_DEFBAGEXT">
      <summary>String: The defauly index extension </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_COLLATION">
      <summary>FoxPro CDX Index collation</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_FULLPATH">
      <summary>String: The full path to the index file (Bag)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_FILEHANDLE">
      <summary>IntPtr: The handle of the index</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_ISDESC">
      <summary>Logic : Is the order DESCENDing? </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_ISCOND">
      <summary>Logic : Does the order have a FOR condition?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYTYPE">
      <summary>The type of the order's key  (usualType value)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYSIZE">
      <summary>Number: The length of the order's key</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYCOUNT">
      <summary>Number: The count of keys in scope and filter</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SETCODEBLOCK">
      <summary>Block : The codeblock that produces the key </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYDEC">
      <summary>Number: The # of decimals in a numeric key </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_HPLOCKING">
      <summary>Logic : Using High Performance locking for this order?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_LOCKOFFSET">
      <summary>Number: The offset used for logical locking </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYADD">
      <summary>Logic: Custom Index: Add key  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYDELETE">
      <summary>Logic: Custom Index: Delete key </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYVAL">
      <summary>Object: The value of the current key </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SCOPETOP">
      <summary>Object: Get or Set the scope top    </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SCOPEBOTTOM">
      <summary>Object: Get or Set the scope bottom</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SCOPETOPCLEAR">
      <summary>Void: Clear top scope</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SCOPEBOTTOMCLEAR">
      <summary>Void: Clear Bottom scope</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_UNIQUE">
      <summary>Logic : Does the order have the UNIQUE attribute?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_ORDERCOUNT">
      <summary>Number: The count of ORDERS contained in an index file or in total</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_CUSTOM">
      <summary>Logic: Is this a Custom Index?  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SKIPUNIQUE">
      <summary>Logic: Was a skip to adjacent unique Key successful?  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYSINCLUDED">
      <summary>Number: Number of keys in the index order</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYNORAW">
      <summary>Number: The key number disregarding filters</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_OPTLEVEL">
      <summary>Number: Optimization level for current query</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYCOUNTRAW">
      <summary>Number: The key count disregarding filter  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_FILESTREAM">
      <summary>FileStream: The stream object of the index</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_STRICTREAD">
      <summary>The following numbers are reserved but not implemented yet.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_DUMP">
      <summary>Dump the current order to a text file in the folder of the index.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_VALIDATE">
      <summary>Logic: Validate the current order. Errors are written to a text file in the folder of the index. Only supported by DBFCDX</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbRecordInfo">
      <summary>This enum specifies the various values that the RecordInfo method for the IRDD interface accepts.
            </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_DELETED">
      <summary>Gets the deleted flag for the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_LOCKED">
      <summary>Gets the locked state for the record. You may specify a specific record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RECSIZE">
      <summary>Gets the record size. You may specify a specific record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RECNO">
      <summary>Gets the record number.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_UPDATED">
      <summary>Gets/Sets a boolean indicating if the current record is updated.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_BUFFPTR">
      <summary>Gets the buffer used by the RDD system for the record data. This is an array of bytes in X#.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_ENCRYPTED">
      <summary>Harbour: Is the current record encrypted?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RAWMEMOS">
      <summary>Harbour extension: Return all the memos in the current record as one string.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RAWDATA">
      <summary>Harbour extension: Return the current record and all the memos in the current record as one string.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RAWRECORD">
      <summary>Harbour extension: Return the current record as one string.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_USER">
      <summary>Offset of user defined values.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbSortFlags">
      <summary>Flags that describe how a DbSort operation can be done.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Default">
      <summary>An ascending sort (default)   </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Case">
      <summary> A case-insensitive sort        </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Numeric">
      <summary>A sort with printable numerics        </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Ascii">
      <summary>A sort for ASCII (not nation-dependent)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Long">
      <summary>A sort with long integer values        </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Descending">
      <summary>A descending sort        </summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbTransInfoFlags">
      <summary>Flags that describe how a DbTrans operation can be done.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbTransInfoFlags.None">
      <summary>Default</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbTransInfoFlags.SameStructure">
      <summary>Both this work area and the destination work area have identical row structures (i.e., all columns match).</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbTransInfoFlags.CanPutRec">
      <summary>The RDD has the ability to transfer an entire row.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.RddInfo">
      <summary>This enum specifies the various values that the RDDInfo method for the IRDD interface accepts.
             <note type="tip">
             These enums are also available as DEFINES and can therefore also be used without the "RDDInfo." prefix.
             </note></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ISDBF">
      <summary>Does this RDD support DBFs?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_CANPUTREC">
      <summary>Can this RDD Put Records?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_DELIMITER">
      <summary>The field delimiter (as a string)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_SEPARATOR">
      <summary>The record separator (as a string) </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_TABLEEXT">
      <summary>Default data file's file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOEXT">
      <summary>Default memo file's file extension </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ORDBAGEXT">
      <summary>Default multi tag index's file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ORDEREXT">
      <summary>default single tag index's file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ORDSTRUCTEXT">
      <summary>default single tag index's file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_LOCAL">
      <summary>Local file access?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_REMOTE">
      <summary>Remote table access? </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_CONNECTION">
      <summary>Get/Set default connection</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_TABLETYPE">
      <summary>Type of table file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOTYPE">
      <summary>Type of MEMO file DB_MEMO_*: DBT, SMT, FPT(FP,SIX3,FLEXIII) </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_LARGEFILE">
      <summary>Is large file size (&gt;=4GB) supported</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_LOCKSCHEME">
      <summary>Locking scheme used by RDD</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_RECORDMAP">
      <summary>Does RDD support record map functionality?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ENCRYPTION">
      <summary>Does RDD support encryption</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_TRIGGER">
      <summary>Get/Set default trigger function</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AUTOLOCK">
      <summary>automatic locking on update</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_STRUCTORD">
      <summary>Are structural indexes supported</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_STRICTREAD">
      <summary>Flag for avoiding RDD hierarchy and using a bigger buffer when indexing</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_STRICTSTRUCT">
      <summary>Flag for strict structural order checking</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_OPTIMIZE">
      <summary>Flag for whether to use query optimization</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_FORCEOPT">
      <summary>Flag for forcing linear optimization</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AUTOOPEN">
      <summary>Flag for automatically opening structural indexes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AUTOORDER">
      <summary>When a structural index is opened, the order to be set</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AUTOSHARE">
      <summary>When a network is detected, open the index shared, otherwise open exclusively</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MULTITAG">
      <summary>Does RDD support multi tag in index file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_SORTRECNO">
      <summary>Is record number part of key in sorting</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MULTIKEY">
      <summary>Does custom orders support repeated keys?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOBLOCKSIZE">
      <summary>Memo File's block size</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOVERSION">
      <summary>sub version of memo file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOGCTYPE">
      <summary>type of garbage collector used by GC</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOREADLOCK">
      <summary>use read lock in memo file access</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOREUSE">
      <summary>reuse free space on write</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_BLOB_SUPPORT">
      <summary>can support BLOB files directly</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_PENDINGTRIGGER">
      <summary>set pending trigger for next open operation</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_PENDINGPASSWORD">
      <summary>set pending password for next open operation</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_PASSWORD">
      <summary>Get/Set default password</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_LOCKRETRY">
      <summary>Get/Set record and file lock timeout value</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_DIRTYREAD">
      <summary>Get/Set index dirty read flag</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_INDEXPAGESIZE">
      <summary>Get/Set default index page size</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_DECIMALS">
      <summary>Get/Set default number of decimal places for numeric fields if it's undefined</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_SETHEADER">
      <summary>DBF header updating modes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_CONNECT">
      <summary>connect to database</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_DISCONNECT">
      <summary>disconnect from database</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_EXECUTE">
      <summary>execute SQL statement </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ERROR">
      <summary>error number</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ERRORNO">
      <summary>error description</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_INSERTID">
      <summary>last auto insert ID</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AFFECTEDROWS">
      <summary>number of affected rows after UPDATE</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_QUERY">
      <summary>last executed query</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbEvalInfo">
      <summary>Helper class to store the scope and codeblock for a DbEval() operation. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbEvalInfo.#ctor">
      <summary>Construct a DbEvalInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbEvalInfo.Block">
      <summary>A code block to be evaluated with DbEval() on each row of the work area that is in the range defined by ScopeInfo.  </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbEvalInfo.ScopeInfo">
      <summary>A DbScopeInfo structure limiting the evaluation of Block.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbFilterInfo">
      <summary>Helper class to store a filter condition for a table.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbFilterInfo.#ctor">
      <summary>Construct a DbFilterInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbFilterInfo.Active">
      <summary>A flag that is TRUE if a filter is active.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbFilterInfo.Clear">
      <summary>Clear the filter fields.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbFilterInfo.Clone">
      <summary>Clone the filter object.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbFilterInfo.Compile(XSharp.RDD.IRdd)"></member>
    <member name="F:XSharp.RDD.Support.DbFilterInfo.FilterBlock">
      <summary>A code block representing the condition that is evaluated at each cursor location.  If the result of the evaluation is FALSE, the cursor location requested is invalid according to the current filter condition.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbFilterInfo.FilterText">
      <summary>A string representing the source code for itmCobExpr.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbFilterInfo.Optimized">
      <summary>A flag that is TRUE if a filter is optimized.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbLockInfo">
      <summary>Helper structure to store information needed to lock a row or table for exclusive access.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.Method">
      <summary>A constant indicating the type of lock to obtain.  The possible values are of the Lockmethod enum. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.RecId">
      <summary>An Item indicating the ID of the row to lock.  This member is meaningful only if Method is set to EXCLUSIVE or MULTIPLE. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.Result">
      <summary>A flag that is TRUE if the lock operation was successful.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbLockInfo.LockMethod">
      <summary>List of possible Locking Methods </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.LockMethod.Exclusive">
      <summary>Lock a row, releasing currently locked rows.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.LockMethod.Multiple">
      <summary>Lock a row, maintaining currently locked rows.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.LockMethod.File">
      <summary>Lock a table, releasing locks currently held.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbOpenInfo">
      <summary>Helper class to store information needed to open a table.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOpenInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbOpenInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOpenInfo.#ctor(System.String,System.String,System.UInt32,System.Boolean,System.Boolean)">
      <summary>Construct a DbOpenInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.Alias">
      <summary>Unique Alias that the table has. This must be a valid XBase Identifier</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOpenInfo.Clone"></member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.Extension">
      <summary>The extension for the table that must be opened.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbOpenInfo.FileMode">
      <summary>Return the numeric FileMode based on the Shared and Readonly flags </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.FileName">
      <summary>The filename (optionally includig a path) for the table that must be opened. Does not have an extension.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbOpenInfo.FullName">
      <summary>Construct a DbOpenInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.ReadOnly">
      <summary>Should the table be opened Readonly?</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.Shared">
      <summary>Should the table be opened Shared?</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.Workarea">
      <summary>Workarea number in which the table will be opened.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbOrderCondInfo">
      <summary>Helper class to store information needed to create a conditional order.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCondInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbOrderCondInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Active">
      <summary> A flag that is TRUE if one or more valid conditions have been specified in the structure. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Additive">
      <summary> A flag that is TRUE if open orders should remain open while the new order is being created. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.All">
      <summary> A flag that is TRUE if all rows are to be processed during order creation. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCondInfo.Clone"></member>
    <member name="M:XSharp.RDD.Support.DbOrderCondInfo.Compile(XSharp.RDD.IRdd)"></member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Custom">
      <summary>A flag that is TRUE if the new order will be a custom built order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Descending">
      <summary> A flag that is TRUE if the order should be created in descending order. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.EvalBlock">
      <summary>A code block defining the expression to evaluate every StepSize rows during the creation of the order.  The code block referenced should return a logical value: TRUE indicates that creation of the order should continue normally, and FALSE indicates that order creation should terminate. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.ForBlock">
      <summary>A code block defining the for condition to use for the creation and maintenance of the order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.ForExpression">
      <summary>A string defining the for condition to use for the creation and maintenance of the order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.NextCount">
      <summary>The number of rows to process for order creation.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.NoOptimize">
      <summary>A flag that is TRUE if the for condition may NOT be optimized,</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.RecNo">
      <summary> A single row number to include in the order. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Rest">
      <summary>A flag that is TRUE if only the rows specified by lStartRecno through end-of-file are to be included in the order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Scoped">
      <summary>A flag indicating whether the order is to be scoped. fScoped will be TRUE if WhileBlock, NextCount, Recno, Rest, or All is specified.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.StartRecNo">
      <summary>The row at which to begin processing when either the NextCount or Rest scoping options are specified.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.StepSize">
      <summary>The frequency of the evaluation of EvalBlock. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.UseCurrent">
      <summary>A flag that is TRUE if only rows in the controlling order are to be included in the order.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCondInfo.Validate"></member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.WhileBlock">
      <summary>A code block defining the while condition to use for the creation of the order.  An empty value indicates that no while condition is being imposed.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.WhileExpression">
      <summary>A string defining the for while condition to use for the creation and maintenance of the order.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbOrderCreateInfo">
      <summary>Helper class to store information needed to create a new order.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCreateInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbOrderCreateInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.BagName">
      <summary>The index file name.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.Block">
      <summary>A code block containing the key expression defining the order imposed on the work area. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCreateInfo.Clone"></member>
    <member name="M:XSharp.RDD.Support.DbOrderCreateInfo.Compile(XSharp.RDD.IRdd)"></member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.Expression">
      <summary>The key expression defining the order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.OrdCondInfo">
      <summary>A DbOrderCondInfo object containing information about the condition (if any) for the order. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.Order">
      <summary>The order name or number to create in BagName.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.Unique">
      <summary>A flag that is TRUE if the order should contain only unique keys. </summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbOrderInfo">
      <summary>Helper class to store information needed to open/address an order.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbOrderInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.AllTags">
      <summary>A flag that is TRUE if all tags of the index file must be opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.BagName">
      <summary>The index file name.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderInfo.Clone"></member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.Expression">
      <summary>A code block containing the key expression defining the order imposed on the work area.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbOrderInfo.IsEmpty"></member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.Order">
      <summary>An object containing the order name or number</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.Result">
      <summary>Return value for some order operations.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbRelInfo">
      <summary>Helper class to store a list of relational information.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbRelInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbRelInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Block">
      <summary>A code block used to reposition the cursor of the child table when this relation is resolved.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Child">
      <summary>A reference to the child RDD for the relation.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbRelInfo.Clone"></member>
    <member name="M:XSharp.RDD.Support.DbRelInfo.Compile"></member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Key">
      <summary>The expression used to reposition the cursor of the child table when this relation is resolved.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Name">
      <summary>name of the relation. Defaults to the parent alias = '_' + child alias.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Parent">
      <summary>A reference to the parent RDD for the relation.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbScopeInfo">
      <summary>Helper class to store references to all of the scope clause expressions. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbScopeInfo.#ctor">
      <summary>Construct a DbScopeInfo object.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbScopeInfo.Clear">
      <summary>Clear the scope fields.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbScopeInfo.Clone">
      <summary>Clone the scopeinfo object.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbScopeInfo.Compile(XSharp.RDD.IRdd)"></member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.ForBlock">
      <summary>A code block representing the conditional for clause.  A for condition is, essentially, a filter that hides rows for which the condition evaluates to FALSE.  The string value is provided for storage, while the code block is provided as a parameter for the EvalBlock() method.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.ForExpression">
      <summary>A string representing the conditional for clause.  A for condition is, essentially, a filter that hides rows for which the condition evaluates to FALSE.  The string value is provided for storage, while the code block is provided as a parameter for the EvalBlock() method.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.IgnoreDuplicates">
      <summary>A flag that is TRUE if a process should ignore duplicate key values.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.IgnoreFilter">
      <summary>A flag that is TRUE if a process should ignore any filter condition imposed on the current work area. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.IncludeDeleted">
      <summary> A flag that is TRUE if a process should include deleted rows. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.Last">
      <summary>A flag that is TRUE if the last row of the current scope is required. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.NextCount">
      <summary>Permits continuation of a process for the next lNext rows, while obeying for and while clauses.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.RecId">
      <summary>Permits continuation of a process for a single row number, while obeying for and while clauses.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.Rest">
      <summary>A flag that is TRUE if a process should continue stepping through data from the current work area cursor position until logical end-of-file. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.WhileBlock">
      <summary>A code block representing the conditional while clause.  A while condition permits continuation of a process that steps through rows until the condition evaluates to FALSE.  The string value is provided for storage, while the code block is provided as a parameter for the EvalBlock() method.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.WhileExpression">
      <summary>A string representing the conditional while clause.  A while condition permits continuation of a process that steps through rows until the condition evaluates to FALSE.  The string value is provided for storage, while the code block is provided as a parameter for the EvalBlock() method.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbSeekInfo">
      <summary>Helper structure to store information needed to perform a seek operation </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSeekInfo.Last">
      <summary>A flag that is TRUE if the last occurrence of the specified key value is to be sought, rather than the first.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSeekInfo.SoftSeek">
      <summary>A flag that is TRUE if a soft seek is to be performed. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSeekInfo.Value">
      <summary>An object containing the key value to find.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbSortInfo">
      <summary>Helper class to store information needed to perform a physical sort. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbSortInfo.#ctor(System.Int32,System.Int32)">
      <summary>Construct a DbSortInfo object.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbSortInfo.ItemCount">
      <summary>Number of items in the Items array. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortInfo.Items">
      <summary>An array of DbSortItem structures defining the key values for the sort.  Note that the key values are processed in the order that they appear in this array. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortInfo.TransInfo">
      <summary>A DbTransInfo object holding the destination work area, column transfer information, and scoping information for the Sort() method. </summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbSortItem">
      <summary>Helper structure to store information about a single sort key value. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortItem.FieldNo">
      <summary>A one-based index indicating the column on which the sort is based. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortItem.Flags">
      <summary>One or more constants that function as sort optimization and control flags.
            They are passed to your RDD Sort() routine from the high-level wrapper function for the DBSort() function.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortItem.Length">
      <summary>The length of the field in the Workarea buffer.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortItem.OffSet">
      <summary>The offset of the field in the Workarea buffer.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbTransInfo">
      <summary>Helper class to store information needed for the global transfer of data items from one work area to another. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbTransInfo.#ctor(System.Int32)">
      <summary>Construct a DbTransInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Destination">
      <summary>The destination work area. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Flags">
      <summary>Transfer attributes specified using one or more of the constants Match or PutRec. </summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbTransInfo.ItemCount">
      <summary>Number of items in the Items array.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Items">
      <summary>An array of DbTransItem structures defining the items to transfer to the destination work area. This is usually a list of column mappings from the source to the destination. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Scope">
      <summary>A DbScopeInfo object describing the limits of the scope of the transfer. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Source">
      <summary>The source work area. </summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbTransItem">
      <summary>Helper structure to store information about a single piece of data (usually a column) to transfer from one work area to another.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransItem.Destination">
      <summary>A one-based field index in the destination work area. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransItem.Source">
      <summary>A one-based field index in the source work area. </summary>
    </member>
    <member name="T:XSharp.RDD.Support.RddFieldInfo">
      <summary>Helper class for the RDD system to store field information</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Construct a RddFieldInfo object.</summary>
      <param name="sName">Name</param>
      <param name="sType">Type, may also contain flags in the form of a colon follwed by N,0,B,+,Z,E,U</param>
      <param name="nLength">Length 'DBF style', so length in Buffer</param>
      <param name="nDecimals">Number of decimals. </param>
      <param name="nOffSet">Offset in record buffer (optional).</param>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.#ctor(System.String,XSharp.RDD.Enums.DbFieldType,System.Int32,System.Int32,System.Int32,XSharp.RDD.Enums.DBFFieldFlags)">
      <summary>Construct a RddFieldInfo object.</summary>
      <param name="sName">Name</param>
      <param name="nType">Type</param>
      <param name="nLength">Length 'DBF style', so length in Buffer</param>
      <param name="nDecimals">Number of decimals. </param>
      <param name="nOffSet">Offset in record buffer (optional)</param>
      <param name="nFlags">Flags (optional)</param>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.#ctor(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Construct a RddFieldInfo object.</summary>
      <param name="oInfo">Object to copy values from.</param>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Alias">
      <summary>Alternative name, no length limit. This is the Caption for VFP fields</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.BlankValue">
      <summary>Return the blank (non null) value of the column.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.CanSort">
      <summary>Can the field be sorted?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.Caption"></member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.Clone">
      <summary>Clone a RddFieldInfo object.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.ColumnName"></member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.CopyValues(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Copy values from one object to another.</summary>
      <param name="oInfo">Object to copy values to.</param>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Decimals">
      <summary>Decimal positions</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.Description"></member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.FieldType">
      <summary>Field Type</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.FieldTypeStr">
      <summary>Field type as 1 character string.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Flags">
      <summary>Flags, such as Nullable, AutoIncrement, Binary etc.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.Format"></member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.HasProperties"></member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.InputMask"></member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsAutoIncrement">
      <summary>Is it an autoincrement ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsBinary">
      <summary>Is it binary ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsCompressed">
      <summary>Is it a  compressed field (not implemented yet) ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsEncrypted">
      <summary>Is it an encryped field (not implemented yet)?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsMemo">
      <summary>Is it a memo ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsNullable">
      <summary>Is it nullable ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsStandard">
      <summary>Is it a standard Dbase 3 field (CDLMN) ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsUnicode">
      <summary>Is it a unicode text ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsVarLength">
      <summary>Is it a variable length field ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsVfp">
      <summary>Is it a VFP extended field ?</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Length">
      <summary>Physical length in the table</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Name">
      <summary>Name, normally max 10 characters</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Offset">
      <summary>Offset in the record buffer for DBF fields.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Ordinal">
      <summary>1 based Ordinal position in the RDD.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.Properties">
      <summary>Dynamic list of optional properties, such as Caption, Description.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.SameType(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Check if two fields match in type, length and decimals.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.ToString"></member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.Validate">
      <summary>Validate combinations of type, length and decimals.</summary>
    </member>
  </members>
</doc>